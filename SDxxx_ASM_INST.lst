     1                     ;============================================================
     2                     ;	Project:		SD028_ASM_TEMP
     3                     ;	FILE:			SD028_ASM_TEMP.asm
     4                     ;  	Target:  		SD028
     5                     ;	Author:			Arthur (Lu Hungche)
     6                     ;	Date:			2020/03/11
     7                     ;------------------------------------------------------------
     8                     ;	Description:	For SD028 Instruction and EFT Verify
     9                     ;	Active-Low: P50(Red-PWR)、P51(Yel-PUSH)、
    10                     ;					
    11                     ;------------------------------------------------------------
    12                     ; History:
    13                     ; Ver  | dd-mmm-yyyy |  Who  | Description of changes
    14                     ; =====|=============|=======|===============================
    15                     ;  0.1 | 11 Mat 2020 |Arthur | Original Release.
    16                     ; -----|-------------|-------|-------------------------------
    17                     ;  0.2 |
    18                     ; -----|-------------|-------|-------------------------------
    19                     ;============================================================
    20                     
    21                     ;==================== Project Include ====================
    22                     INCLUDE		"SDxxx_DEV_TAR.h"
     1            C        ;;=========================================================================
     2            C        ;;	FILE:			SDxxx_DEV_TAR.h
     3            C        ;;	Author:			ELAN SRD Arthur (Lu Hungche)
     4            C        ;;	Date:			2020/09/15
     5            C        ;;-------------------------------------------------------------------------
     6            C        ;;	Description:	SDxxx Device Definitions
     7            C        ;;
     8            C        ;;-------------------------------------------------------------------------
     9            C        ;; History:
    10            C        ;; Ver  | dd-mmm-yyyy |  Who  | Description of changes
    11            C        ;; =====|=============|=======|============================================
    12            C        ;;  0.1 | 02 Sep 2020 | Arthur| Original Release.
    13            C        ;; -----|-------------|-------|--------------------------------------------
    14            C        ;;	0.2 |
    15            C        ;; -----|-------------|-------|--------------------------------------------
    16            C        ;;
    17            C        ;; -----|-------------|-------|--------------------------------------------
    18            C        ;;=========================================================================
    19            C        
    20            C        ;;====== Select Target Device ===========================================;;
    21       0001 C        TARGET	VAR		1
    22            C        
    23       0000 C        EM88F794N_DEV	VAR		0
    24       0000 C        EM88F758N_DEV	VAR		0
    25       0000 C        MTF351_DEV		VAR		0
    26       0000 C        SD062_DEV		VAR		0
    27       0001 C        SD028_DEV		VAR		TARGET
    28            C        
    29            C        IF	(SD062_DEV)
    30            C        	INCLUDE		"SD062.INC"
    31            C        	INCLUDE		"SDxxx_ASM_SYS.ASM"
    32            C        	INCLUDE		"SDxxx_ASM_GPIO.ASM"
    33            C        	INCLUDE		"SDxxx_ASM_EFT.ASM"
    34            C        	INCLUDE		"SDXXX_ASM_RAM.ASM"
    35            C        	INCLUDE		"SDXXX_ASM_ROM.ASM"
    36            C        ELSEIF(SD028_DEV)
    37            C        	INCLUDE		"SD028.INC"
     1            C        ;===========================================================================;
     2            C        ;  Title:       SD028 Include File                                          ;
     3            C        ;  Target MCU:  SD028                                                       ;
     4            C        ;  Description: The Definition of SD028 Registers                           ;
     5            C        ;  Company:     ELAN MICROELECTRONICS LTD.	                            	;
     6            C        ;  Date:        2020/02/20                                                  ;
     7            C        ;  Version:     v0.9                                                        ;
     8            C        ;===========================================================================;
     9            C        
    10            C        ;======================================================;
    11            C        ; Operational Registers Define                         ;
    12            C        ;======================================================;
    13       0000 C            BIT0    ==  0
    14       0001 C            BIT1    ==  1
    15       0002 C            BIT2    ==  2
    16       0003 C            BIT3    ==  3
    17       0004 C            BIT4    ==  4
    18       0005 C            BIT5    ==  5
    19       0006 C            BIT6    ==  6
    20       0007 C            BIT7    ==  7
    21            C        ;======================================================;
    22            C        ; Registers R0~R4                                      ;
    23            C        ;======================================================;
    24            C        ; R0/IAR: Indirect Address Register
    25       2000 C            R0      ==  0x00:rpage 0
    25 00000 0010 C            R0      ==  0x00:rpage 0
    26       2000 C            IAR     ==  0x00:rpage 0
    26 00000 0010 C            IAR     ==  0x00:rpage 0
    27            C        ;R1/ BSR: Bank Selection Control Register
    28       2001 C            R1      ==  0x01:rpage 0
    28 00000 0010 C            R1      ==  0x01:rpage 0
    29       2001 C            BSR     ==  0x01:rpage 0
    29 00000 0010 C            BSR     ==  0x01:rpage 0
    30       2001 C                SBS1  ==  BSR.5
    30 00000 0540 C                SBS1  ==  BSR.5
    31       2001 C                SBS0  ==  BSR.4
    31 00000 0440 C                SBS0  ==  BSR.4
    32       2001 C                GBS1  ==  BSR.1
    32 00000 0140 C                GBS1  ==  BSR.1
    33       2001 C                GBS0  ==  BSR.0
    33 00000 0040 C                GBS0  ==  BSR.0
    34            C        ; R2/PC: Program Counter & Stack
    35       2002 C            R2      ==  0x02:rpage 0
    35 00000 0010 C            R2      ==  0x02:rpage 0
    36       2002 C            PCL     ==  0x02:rpage 0
    36 00000 0010 C            PCL     ==  0x02:rpage 0
    37            C        
    38            C        ;R3/SW:Status Register
    39       2003 C            R3      ==  0x03:rpage 0
    39 00000 0010 C            R3      ==  0x03:rpage 0
    40       2003 C            STATUS  ==  0x03:rpage 0
    40 00000 0010 C            STATUS  ==  0x03:rpage 0
    41       2003 C            SR      ==  0x03:rpage 0
    41 00000 0010 C            SR      ==  0x03:rpage 0
    42       2003 C                IT	    == SR.7
    42 00000 0740 C                IT	    == SR.7
    43       2003 C                N       == SR.6
    43 00000 0640 C                N       == SR.6
    44       2003 C                OV      == SR.5
    44 00000 0540 C                OV      == SR.5
    45       2003 C                T       == SR.4
    45 00000 0440 C                T       == SR.4
    46       2003 C                P       == SR.3
    46 00000 0340 C                P       == SR.3
    47       2003 C                Z       == SR.2
    47 00000 0240 C                Z       == SR.2
    48       2003 C                DC      == SR.1
    48 00000 0140 C                DC      == SR.1
    49       2003 C                C       == SR.0
    49 00000 0040 C                C       == SR.0
    50            C        ;R4/ RSR:RAM Select Register
    51       2004 C            R4          == 0x04:rpage 0
    51 00000 0010 C            R4          == 0x04:rpage 0
    52       2004 C            RSR         == 0x04:rpage 0
    52 00000 0010 C            RSR         == 0x04:rpage 0
    53            C        
    54            C        ;======================================================;
    55            C        ; BANK 0                                               ;
    56            C        ; Registers R5~R4F                                     ;
    57            C        ;======================================================;
    58            C        ;R5/PORT5 :IO PORT 5 Data Register
    59       2005 C            PORT5   ==  0x05:rpage 0
    59 00000 0010 C            PORT5   ==  0x05:rpage 0
    60       2005 C            P5      ==  0x05:rpage 0
    60 00000 0010 C            P5      ==  0x05:rpage 0
    61       2005 C                P50     == PORT5.0
    61 00000 0040 C                P50     == PORT5.0
    62       2005 C                P51     == PORT5.1
    62 00000 0140 C                P51     == PORT5.1
    63       2005 C                P52     == PORT5.2
    63 00000 0240 C                P52     == PORT5.2
    64       2005 C                P53     == PORT5.3
    64 00000 0340 C                P53     == PORT5.3
    65       2005 C                P54     == PORT5.4
    65 00000 0440 C                P54     == PORT5.4
    66       2005 C                P55     == PORT5.5
    66 00000 0540 C                P55     == PORT5.5
    67       2005 C                P56     == PORT5.6
    67 00000 0640 C                P56     == PORT5.6
    68       2005 C                P57     == PORT5.7
    68 00000 0740 C                P57     == PORT5.7
    69            C        ;RB/IOCR5 :IO PORT 5 Control Register
    70       200B C            IOCR5   ==  0x0B:rpage 0
    70 00000 0010 C            IOCR5   ==  0x0B:rpage 0
    71            C        ;RE/OMCR :OMCR:Operating Mode Control Register
    72       200E C            OMCR    ==  0x0E:rpage 0
    72 00000 0010 C            OMCR    ==  0x0E:rpage 0
    73       200E C                CPUS    == OMCR.7
    73 00000 0740 C                CPUS    == OMCR.7
    74       200E C                IDLE    == OMCR.6
    74 00000 0640 C                IDLE    == OMCR.6
    75       200E C                PERCS   == OMCR.5
    75 00000 0540 C                PERCS   == OMCR.5
    76       200E C                IIPS    == OMCR.4
    76 00000 0440 C                IIPS    == OMCR.4
    77       200E C                FMSF    == OMCR.3
    77 00000 0340 C                FMSF    == OMCR.3
    78       200E C        	    RCM1    == OMCR.1
    78 00000 0140 C        	    RCM1    == OMCR.1
    79       200E C                RCM0    == OMCR.0
    79 00000 0040 C                RCM0    == OMCR.0
    80            C        ;RF/EIESCR :External Interrupt Edge Select Control Register
    81       200F C            EIESCR  ==  0x0F:rpage 0
    81 00000 0010 C            EIESCR  ==  0x0F:rpage 0
    82       200F C                EI1ES1  == EIESCR.3
    82 00000 0340 C                EI1ES1  == EIESCR.3
    83       200F C        	    EI1ES0  == EIESCR.2
    83 00000 0240 C        	    EI1ES0  == EIESCR.2
    84       200F C        	    EI0ES1  == EIESCR.1
    84 00000 0140 C        	    EI0ES1  == EIESCR.1
    85       200F C        	    EI0ES0  == EIESCR.0
    85 00000 0040 C        	    EI0ES0  == EIESCR.0
    86            C        ;R10/WUCR1 :Wake-up Control Register1
    87       2010 C            WUCR1   ==  0x10:rpage 0
    87 00000 0010 C            WUCR1   ==  0x10:rpage 0
    88       2010 C                CMP2WK	== WUCR1.7
    88 00000 0740 C                CMP2WK	== WUCR1.7
    89       2010 C        	    CMP1WK	== WUCR1.6
    89 00000 0640 C        	    CMP1WK	== WUCR1.6
    90       2010 C        	    ADWK    == WUCR1.4
    90 00000 0440 C        	    ADWK    == WUCR1.4
    91       2010 C                INT1WK  == WUCR1.3
    91 00000 0340 C                INT1WK  == WUCR1.3
    92       2010 C                INT0WK  == WUCR1.2
    92 00000 0240 C                INT0WK  == WUCR1.2
    93       2010 C                IGWK    == WUCR1.0
    93 00000 0040 C                IGWK    == WUCR1.0
    94            C        ;R11/WUCR2 :Wake-up Control Register2
    95       2011 C            WUCR2   == 0x11:rpage 0
    95 00000 0010 C            WUCR2   == 0x11:rpage 0
    96       2011 C                CMP3WK	== WUCR2.6
    96 00000 0640 C                CMP3WK	== WUCR2.6
    97       2011 C                URWK	== WUCR2.4
    97 00000 0440 C                URWK	== WUCR2.4
    98            C        ;R12/WUCR3 :Wake-up Control Register3
    99       2012 C            WUCR3   ==  0x12:rpage 0
    99 00000 0010 C            WUCR3   ==  0x12:rpage 0
   100       2012 C                ICWKP5  == WUCR3.4
   100 00000 0440 C                ICWKP5  == WUCR3.4
   101            C        ;R13/SYSCON :
   102       2013 C            SYSCON  == 0x13:rpage 0
   102 00000 0010 C            SYSCON  == 0x13:rpage 0
   103       2013 C                LDOI    ==  SYSCON.7
   103 00000 0740 C                LDOI    ==  SYSCON.7
   104            C        ;R14/SFR1 :Status Flag Register 1
   105       2014 C            SFR1    == 0x14:rpage 0
   105 00000 0010 C            SFR1    == 0x14:rpage 0
   106       2014 C                CMP2SF  == SFR1.7
   106 00000 0740 C                CMP2SF  == SFR1.7
   107       2014 C        	    CMP1SF  == SFR1.6
   107 00000 0640 C        	    CMP1SF  == SFR1.6
   108       2014 C        	    ADSF    == SFR1.4
   108 00000 0440 C        	    ADSF    == SFR1.4
   109       2014 C                EXSF1   == SFR1.3
   109 00000 0340 C                EXSF1   == SFR1.3
   110       2014 C                EXSF0   == SFR1.2
   110 00000 0240 C                EXSF0   == SFR1.2
   111            C        ;R15/SFR2 :Status Flag Register2
   112       2015 C            SFR2    == 0x15:rpage 0
   112 00000 0010 C            SFR2    == 0x15:rpage 0
   113       2015 C        	    CMP3SF  == SFR2.6
   113 00000 0640 C        	    CMP3SF  == SFR2.6
   114       2015 C                UERRSF  == SFR2.5
   114 00000 0540 C                UERRSF  == SFR2.5
   115       2015 C                URSF    == SFR2.4
   115 00000 0440 C                URSF    == SFR2.4
   116       2015 C                UTSF    == SFR2.3
   116 00000 0340 C                UTSF    == SFR2.3
   117            C        
   118            C        ;R17/SFR4 :Status Flag Register4
   119       2017 C            SFR4    == 0x17:rpage 0
   119 00000 0010 C            SFR4    == 0x17:rpage 0
   120       2017 C                P5ICSF  == SFR4.4
   120 00000 0440 C                P5ICSF  == SFR4.4
   121            C        
   122            C        ;R19/SFR6 :Status Flag Register6
   123       2019 C            SFR6    ==  0x19:rpage 0
   123 00000 0010 C            SFR6    ==  0x19:rpage 0
   124       2019 C                SHSF    == SFR6.7
   124 00000 0740 C                SHSF    == SFR6.7
   125            C        ;R1A/SFR7 :Status Flag Register7
   126       201A C            SFR7        == 0x1A:rpage 0
   126 00000 0010 C            SFR7        == 0x1A:rpage 0
   127       201A C                IGSF    == SFR7.7
   127 00000 0740 C                IGSF    == SFR7.7
   128       201A C                TXDSF   == SFR7.6
   128 00000 0640 C                TXDSF   == SFR7.6
   129       201A C                TXCSF   == SFR7.5
   129 00000 0540 C                TXCSF   == SFR7.5
   130       201A C                TM2DASF == SFR7.4
   130 00000 0440 C                TM2DASF == SFR7.4
   131       201A C                TM1DASF == SFR7.3
   131 00000 0340 C                TM1DASF == SFR7.3
   132       201A C                TM1OFSF == SFR7.2
   132 00000 0240 C                TM1OFSF == SFR7.2
   133       201A C                TM2DBSF == SFR7.1
   133 00000 0140 C                TM2DBSF == SFR7.1
   134       201A C                TM1DBSF == SFR7.0
   134 00000 0040 C                TM1DBSF == SFR7.0
   135            C        ;R1B/IMR1 :Interrupt Mask Register 1
   136       201B C            IMR1        == 0x1B:rpage 0
   136 00000 0010 C            IMR1        == 0x1B:rpage 0
   137       201B C                CMP2IE  == IMR1.7
   137 00000 0740 C                CMP2IE  == IMR1.7
   138       201B C        	    CMP1IE  == IMR1.6
   138 00000 0640 C        	    CMP1IE  == IMR1.6
   139       201B C        	    ADIE    == IMR1.4
   139 00000 0440 C        	    ADIE    == IMR1.4
   140       201B C                EXIE1   == IMR1.3
   140 00000 0340 C                EXIE1   == IMR1.3
   141       201B C                EXIE0   == IMR1.2
   141 00000 0240 C                EXIE0   == IMR1.2
   142            C        ;RF/IMR2 :Interrupt Mask Register 2
   143       201C C            IMR2        == 0x1C:rpage 0
   143 00000 0010 C            IMR2        == 0x1C:rpage 0
   144       201C C                CMP3IE  == IMR2.6
   144 00000 0640 C                CMP3IE  == IMR2.6
   145       201C C                UERRIE  == IMR2.5
   145 00000 0540 C                UERRIE  == IMR2.5
   146       201C C                URIE    == IMR2.4
   146 00000 0440 C                URIE    == IMR2.4
   147       201C C                UTIE    == IMR2.3
   147 00000 0340 C                UTIE    == IMR2.3
   148            C        
   149            C        ;R1E/IMR4 :Interrupt Mask Register 4
   150       201E C            IMR4        ==  0x1E:rpage 0
   150 00000 0010 C            IMR4        ==  0x1E:rpage 0
   151       201E C                P5ICIE  ==  IMR4.4
   151 00000 0440 C                P5ICIE  ==  IMR4.4
   152            C        
   153            C        ;R20/IMR6 :Interrupt Mask Register 6
   154       2020 C            IMR6        == 0x20:rpage 0
   154 00000 0010 C            IMR6        == 0x20:rpage 0
   155       2020 C                SHIE    == IMR6.7
   155 00000 0740 C                SHIE    == IMR6.7
   156       2020 C                IGIE    == IMR6.3
   156 00000 0340 C                IGIE    == IMR6.3
   157       2020 C                TXTMIE  == IMR6.2
   157 00000 0240 C                TXTMIE  == IMR6.2
   158       2020 C                TM2IE   == IMR6.1
   158 00000 0140 C                TM2IE   == IMR6.1
   159       2020 C                TM1IE   == IMR6.0
   159 00000 0040 C                TM1IE   == IMR6.0
   160            C        ;R21/WDTCR :Watch Dog Timer Control Register
   161       2021 C            WDTCR       == 0x21:rpage 0
   161 00000 0010 C            WDTCR       == 0x21:rpage 0
   162       2021 C                WDTE    == WDTCR.7
   162 00000 0740 C                WDTE    == WDTCR.7
   163       2021 C                FSSF    == WDTCR.6
   163 00000 0640 C                FSSF    == WDTCR.6
   164       2021 C                PSWE    == WDTCR.3
   164 00000 0340 C                PSWE    == WDTCR.3
   165       2021 C                WPSR2   == WDTCR.2
   165 00000 0240 C                WPSR2   == WDTCR.2
   166       2021 C                WPSR1   == WDTCR.1
   166 00000 0140 C                WPSR1   == WDTCR.1
   167       2021 C                WPSR0   == WDTCR.0
   167 00000 0040 C                WPSR0   == WDTCR.0
   168            C        ;R3E/ADCR1 :ADC Control Register1
   169       203E C            ADCR1       == 0x3E:rpage 0
   169 00000 0010 C            ADCR1       == 0x3E:rpage 0
   170       203E C                CKR1    == ADCR1.6
   170 00000 0640 C                CKR1    == ADCR1.6
   171       203E C                CKR0    == ADCR1.5
   171 00000 0540 C                CKR0    == ADCR1.5
   172       203E C                ADRUN   == ADCR1.4
   172 00000 0440 C                ADRUN   == ADCR1.4
   173       203E C                ADP     == ADCR1.3
   173 00000 0340 C                ADP     == ADCR1.3
   174       203E C                ADOM    == ADCR1.2
   174 00000 0240 C                ADOM    == ADCR1.2
   175       203E C                SHS1    == ADCR1.1
   175 00000 0140 C                SHS1    == ADCR1.1
   176       203E C                SHS0    == ADCR1.0
   176 00000 0040 C                SHS0    == ADCR1.0
   177            C        ;R3F/ADCR2 :ADC Control Register2
   178       203F C            ADCR2       == 0x3F:rpage 0
   178 00000 0010 C            ADCR2       == 0x3F:rpage 0
   179       203F C                ADLPFEN == ADCR2.7
   179 00000 0740 C                ADLPFEN == ADCR2.7
   180       203F C                ADIM    == ADCR2.5
   180 00000 0540 C                ADIM    == ADCR2.5
   181       203F C                ADCMS   == ADCR2.4
   181 00000 0440 C                ADCMS   == ADCR2.4
   182       203F C                VPIS1   == ADCR2.3
   182 00000 0340 C                VPIS1   == ADCR2.3
   183       203F C                VPIS0   == ADCR2.2
   183 00000 0240 C                VPIS0   == ADCR2.2
   184       203F C                VREFP   == ADCR2.1
   184 00000 0140 C                VREFP   == ADCR2.1
   185            C        ;R40/ADISR :Analog to Digital Converter Input Channel Selection Register
   186       2040 C            ADISR       == 0x40:rpage 0
   186 00000 0010 C            ADISR       == 0x40:rpage 0
   187       2040 C                ADIS1   == ADISR.1
   187 00000 0140 C                ADIS1   == ADISR.1
   188       2040 C                ADIS0   == ADISR.0
   188 00000 0040 C                ADIS0   == ADISR.0
   189            C        ;R41/ADER1 :ADC Input Enable Register
   190       2041 C            ADER1       == 0x41:rpage 0
   190 00000 0010 C            ADER1       == 0x41:rpage 0
   191       2041 C                ADE1    == ADER1.1
   191 00000 0140 C                ADE1    == ADER1.1
   192       2041 C                ADE0    == ADER1.0
   192 00000 0040 C                ADE0    == ADER1.0
   193            C        ;R43/ADDL :ADC Low-8 Bits Data Buffer
   194       2043 C            ADDL        == 0x43:rpage 0
   194 00000 0010 C            ADDL        == 0x43:rpage 0
   195            C        ;R44/ADDH :ADC High-8 Bits Data Buffer
   196       2044 C            ADDH        == 0x44:rpage 0
   196 00000 0010 C            ADDH        == 0x44:rpage 0
   197            C        ;R45/ADCVL :Low Byte of Analog to Digital Converter Comparison
   198       2045 C            ADCVL       == 0x45:rpage 0
   198 00000 0010 C            ADCVL       == 0x45:rpage 0
   199            C        ;R46/ADCVH :High Byte of Analog to Digital Converter Comparison
   200       2046 C            ADCVH       == 0x46:rpage 0
   200 00000 0010 C            ADCVH       == 0x46:rpage 0
   201            C        ;======================================================
   202            C        ; BANK 1
   203            C        ; Registers R5~R4F
   204            C        ;======================================================
   205            C        ;R08/P5PHCR :Port5 Pull-high Control Register
   206       2008 C          P5PHCR        ==  0x08:rpage 1
   206 00000 0011 C          P5PHCR        ==  0x08:rpage 1
   207       2008 C                PH55    ==  P5PHCR.6
   207 00000 0641 C                PH55    ==  P5PHCR.6
   208       2008 C                PH54    ==  P5PHCR.4
   208 00000 0441 C                PH54    ==  P5PHCR.4
   209       2008 C                PH53    ==  P5PHCR.3
   209 00000 0341 C                PH53    ==  P5PHCR.3
   210       2008 C                PH52    ==  P5PHCR.2
   210 00000 0241 C                PH52    ==  P5PHCR.2
   211       2008 C                PH51    ==  P5PHCR.1
   211 00000 0141 C                PH51    ==  P5PHCR.1
   212       2008 C                PH50    ==  P5PHCR.0
   212 00000 0041 C                PH50    ==  P5PHCR.0
   213            C        
   214            C        ;R0B/P5PLCR Port 5 Pull-low Control Register
   215       200B C            P5PLCR      ==  0x0B:rpage 1
   215 00000 0011 C            P5PLCR      ==  0x0B:rpage 1
   216       200B C                PL55    ==  P5PLCR.5
   216 00000 0541 C                PL55    ==  P5PLCR.5
   217       200B C                PL54    ==  P5PLCR.4
   217 00000 0441 C                PL54    ==  P5PLCR.4
   218       200B C                PL53    ==  P5PLCR.3
   218 00000 0341 C                PL53    ==  P5PLCR.3
   219       200B C                PL52    ==  P5PLCR.2
   219 00000 0241 C                PL52    ==  P5PLCR.2
   220       200B C                PL51    ==  P5PLCR.1
   220 00000 0141 C                PL51    ==  P5PLCR.1
   221       200B C                PL50    ==  P5PLCR.0
   221 00000 0041 C                PL50    ==  P5PLCR.0
   222            C        
   223            C        ;R0E/P5HDSCR :Port 5 High Drive/Sink Control Register
   224       200E C            P5HDSCR     ==  0x0E:rpage 1
   224 00000 0011 C            P5HDSCR     ==  0x0E:rpage 1
   225       200E C                HDS55   ==  P5HDSCR.5
   225 00000 0541 C                HDS55   ==  P5HDSCR.5
   226       200E C                HDS54   ==  P5HDSCR.4
   226 00000 0441 C                HDS54   ==  P5HDSCR.4
   227       200E C                HDS53   ==  P5HDSCR.3
   227 00000 0341 C                HDS53   ==  P5HDSCR.3
   228       200E C                HDS52   ==  P5HDSCR.2
   228 00000 0241 C                HDS52   ==  P5HDSCR.2
   229       200E C                HDS51   ==  P5HDSCR.1
   229 00000 0141 C                HDS51   ==  P5HDSCR.1
   230       200E C                HDS50   ==  P5HDSCR.0
   230 00000 0041 C                HDS50   ==  P5HDSCR.0
   231            C        
   232            C        ;R33 URCR :UART Control Register
   233       2033 C            URCR        == 0x33:rpage 1
   233 00000 0011 C            URCR        == 0x33:rpage 1
   234       2033 C                UINVEN  == URCR.7
   234 00000 0741 C                UINVEN  == URCR.7
   235       2033 C                UMODE1  == URCR.6
   235 00000 0641 C                UMODE1  == URCR.6
   236       2033 C                UMODE0  == URCR.5
   236 00000 0541 C                UMODE0  == URCR.5
   237       2033 C                BRATE2  == URCR.4
   237 00000 0441 C                BRATE2  == URCR.4
   238       2033 C                BRATE1  == URCR.3
   238 00000 0341 C                BRATE1  == URCR.3
   239       2033 C                BRATE0  == URCR.2
   239 00000 0241 C                BRATE0  == URCR.2
   240       2033 C        	    UTBF    == URCR.1
   240 00000 0141 C        	    UTBF    == URCR.1
   241       2033 C        	    TXE     == URCR.0
   241 00000 0041 C        	    TXE     == URCR.0
   242            C        ;R34 URS :UART Status Register
   243       2034 C            URS         == 0x34:rpage 1
   243 00000 0011 C            URS         == 0x34:rpage 1
   244       2034 C                URTD8   == URS.7
   244 00000 0741 C                URTD8   == URS.7
   245       2034 C                EVEN    == URS.6
   245 00000 0641 C                EVEN    == URS.6
   246       2034 C                PER     == URS.5
   246 00000 0541 C                PER     == URS.5
   247       2034 C                PRERR   == URS.4
   247 00000 0441 C                PRERR   == URS.4
   248       2034 C                OVERR   == URS.3
   248 00000 0341 C                OVERR   == URS.3
   249       2034 C                FMERR   == URS.2
   249 00000 0241 C                FMERR   == URS.2
   250       2034 C        	    URBF    == URS.1
   250 00000 0141 C        	    URBF    == URS.1
   251       2034 C        	    RXE     == URS.0
   251 00000 0041 C        	    RXE     == URS.0
   252            C        ;R35 URTD :UART Transmit Data Buffer Register
   253       2035 C            URTD        == 0x35:rpage 1
   253 00000 0011 C            URTD        == 0x35:rpage 1
   254            C        ;R36 URRDL :UART Receive Data Low Buffer Register
   255       2036 C            URRDL       == 0x36:rpage 1
   255 00000 0011 C            URRDL       == 0x36:rpage 1
   256            C        ;R37 URRDH :UART Receive Data High Buffer Register
   257       2037 C            URRDH       == 0x37:rpage 1
   257 00000 0011 C            URRDH       == 0x37:rpage 1
   258       2037 C                URRD8   == URRDH.7
   258 00000 0741 C                URRD8   == URRDH.7
   259       2037 C                URSS    == URRDH.0
   259 00000 0041 C                URSS    == URRDH.0
   260            C        
   261            C        ;R40/EECR1 :EEPROM Control Register 1
   262       2040 C            EECR1       ==  0x40:rpage 1
   262 00000 0011 C            EECR1       ==  0x40:rpage 1
   263       2040 C                EEPVSF  ==  EECR1.4
   263 00000 0441 C                EEPVSF  ==  EECR1.4
   264       2040 C                EEPV    ==  EECR1.3
   264 00000 0341 C                EEPV    ==  EECR1.3
   265       2040 C                ONRD    ==  EECR1.2
   265 00000 0241 C                ONRD    ==  EECR1.2
   266       2040 C                RD      ==  EECR1.1
   266 00000 0141 C                RD      ==  EECR1.1
   267       2040 C                WR      ==  EECR1.0
   267 00000 0041 C                WR      ==  EECR1.0
   268            C        ;R41/EECR2 :EEPROM Control Register 2
   269       2041 C            EECR2       ==  0x41:rpage 1
   269 00000 0011 C            EECR2       ==  0x41:rpage 1
   270       2041 C                EEWE    ==  EECR2.7
   270 00000 0741 C                EEWE    ==  EECR2.7
   271       2041 C                EEDF    ==  EECR2.6
   271 00000 0641 C                EEDF    ==  EECR2.6
   272       2041 C                EEPC    ==  EECR2.5
   272 00000 0541 C                EEPC    ==  EECR2.5
   273            C        ;R42/EERA :EEPROM Address
   274       2042 C            EERA        ==  0x42:rpage 1
   274 00000 0011 C            EERA        ==  0x42:rpage 1
   275            C        ;R43/EERD :EEPROM Data
   276       2043 C            EERD        ==  0x43:rpage 1
   276 00000 0011 C            EERD        ==  0x43:rpage 1
   277            C        ;R44/FLKR :Flash Key Register for Table Write Use
   278       2044 C            FLKR        ==  0x44:rpage 1
   278 00000 0011 C            FLKR        ==  0x44:rpage 1
   279            C        ;R45/TBPTL :Table Point Low Register
   280       2045 C            TBPTL       ==  0x45:rpage 1
   280 00000 0011 C            TBPTL       ==  0x45:rpage 1
   281            C        ;R46/TBPTH :Table Point High Register
   282       2046 C            TBPTH       ==  0x46:rpage 1
   282 00000 0011 C            TBPTH       ==  0x46:rpage 1
   283       2046 C                HLB     ==  TBPTH.7
   283 00000 0741 C                HLB     ==  TBPTH.7
   284       2046 C                RDS     ==  TBPTH.6
   284 00000 0641 C                RDS     ==  TBPTH.6
   285            C        ;R47/STKMON :Stack point
   286       2047 C            STKMON      ==  0x47:rpage 1
   286 00000 0011 C            STKMON      ==  0x47:rpage 1
   287       2047 C                STOV    ==  STKMON.7
   287 00000 0741 C                STOV    ==  STKMON.7
   288       2047 C                STL2    ==  STKMON.2
   288 00000 0241 C                STL2    ==  STKMON.2
   289       2047 C                STL1    ==  STKMON.1
   289 00000 0141 C                STL1    ==  STKMON.1
   290       2047 C                STL0    ==  STKMON.0
   290 00000 0041 C                STL0    ==  STKMON.0
   291            C        ;R48/PCH :Program Counter High
   292       2048 C            PCH         == 0x48:rpage 1
   292 00000 0011 C            PCH         == 0x48:rpage 1
   293            C        
   294       204A C            COBS1       == 0x4A:rpage 1
   294 00000 0011 C            COBS1       == 0x4A:rpage 1
   295       204A C                HLFS	== COBS1.7
   295 00000 0741 C                HLFS	== COBS1.7
   296       204A C                ENWDT	== COBS1.5
   296 00000 0541 C                ENWDT	== COBS1.5
   297       204A C                NRHL	== COBS1.4
   297 00000 0441 C                NRHL	== COBS1.4
   298       204A C                NRE     == COBS1.3
   298 00000 0341 C                NRE     == COBS1.3
   299       204A C                ADFM	== COBS1.2
   299 00000 0241 C                ADFM	== COBS1.2
   300       204B C            COBS2       == 0x4B:rpage 1
   300 00000 0011 C            COBS2       == 0x4B:rpage 1
   301       204B C                RT5     == COBS2.5
   301 00000 0541 C                RT5     == COBS2.5
   302       204B C                RT4     == COBS2.4
   302 00000 0441 C                RT4     == COBS2.4
   303       204B C                RT3     == COBS2.3
   303 00000 0341 C                RT3     == COBS2.3
   304       204B C                RT2     == COBS2.2
   304 00000 0241 C                RT2     == COBS2.2
   305       204B C                RT1     == COBS2.1
   305 00000 0141 C                RT1     == COBS2.1
   306       204B C                RT0     == COBS2.0
   306 00000 0041 C                RT0     == COBS2.0
   307       204C C            COBS3       == 0x4C:rpage 1
   307 00000 0011 C            COBS3       == 0x4C:rpage 1
   308       204C C                CT3     == COBS3.3
   308 00000 0341 C                CT3     == COBS3.3
   309       204C C                CT2     == COBS3.2
   309 00000 0241 C                CT2     == COBS3.2
   310       204C C                CT1     == COBS3.1
   310 00000 0141 C                CT1     == COBS3.1
   311       204C C                CT0     == COBS3.0
   311 00000 0041 C                CT0     == COBS3.0
   312            C        ;R4D/TBWCR :Table Write Control Register
   313       204D C            TBWCR       ==  0x4D:rpage 1
   313 00000 0011 C            TBWCR       ==  0x4D:rpage 1
   314       204D C                IAPVSF  ==  TBWCR.2
   314 00000 0241 C                IAPVSF  ==  TBWCR.2
   315       204D C                IAPV    ==  TBWCR.1
   315 00000 0141 C                IAPV    ==  TBWCR.1
   316       204D C                IAPEN   ==  TBWCR.0
   316 00000 0041 C                IAPEN   ==  TBWCR.0
   317            C        ;R4E/TBWAL :Table Write start Address Low byte
   318       204E C            TBWAL       ==  0x4E:rpage 1
   318 00000 0011 C            TBWAL       ==  0x4E:rpage 1
   319            C        ;R4F/TBWAH :Table Write start Address High byte
   320       204F C            TBWAH       ==  0x4F:rpage 1
   320 00000 0011 C            TBWAH       ==  0x4F:rpage 1
   321            C        
   322            C        ;======================================================
   323            C        ; BANK 2
   324            C        ; Registers R5~R4F
   325            C        ;======================================================
   326            C        ;R05/TM1CR1 :Timer/Counter 1 Control Register 1
   327       2005 C            TM1CR1      ==  0x05:rpage 2
   327 00000 0012 C            TM1CR1      ==  0x05:rpage 2
   328       2005 C                TM1S    ==  TM1CR1.7
   328 00000 0742 C                TM1S    ==  TM1CR1.7
   329       2005 C                TM1RC   ==  TM1CR1.6
   329 00000 0642 C                TM1RC   ==  TM1CR1.6
   330       2005 C                TM1SS1  ==  TM1CR1.5
   330 00000 0542 C                TM1SS1  ==  TM1CR1.5
   331       2005 C                TM1RX1  ==  TM1CR1.4
   331 00000 0442 C                TM1RX1  ==  TM1CR1.4
   332       2005 C                TM1FF   ==  TM1CR1.3
   332 00000 0342 C                TM1FF   ==  TM1CR1.3
   333       2005 C                TM1MOS  ==  TM1CR1.2
   333 00000 0242 C                TM1MOS  ==  TM1CR1.2
   334       2005 C                TM1IS1  ==  TM1CR1.1
   334 00000 0142 C                TM1IS1  ==  TM1CR1.1
   335       2005 C                TM1IS0  ==  TM1CR1.0
   335 00000 0042 C                TM1IS0  ==  TM1CR1.0
   336            C        ;R06/TM1CR2 :Timer/Counter 1 Control Register 2
   337       2006 C            TM1CR2      ==  0x06:rpage 2
   337 00000 0012 C            TM1CR2      ==  0x06:rpage 2
   338       2006 C                TM1M2   ==  TM1CR2.7
   338 00000 0742 C                TM1M2   ==  TM1CR2.7
   339       2006 C                TM1M1   ==  TM1CR2.6
   339 00000 0642 C                TM1M1   ==  TM1CR2.6
   340       2006 C                TM1M0   ==  TM1CR2.5
   340 00000 0542 C                TM1M0   ==  TM1CR2.5
   341       2006 C                TM1SS0  ==  TM1CR2.4
   341 00000 0442 C                TM1SS0  ==  TM1CR2.4
   342       2006 C                TM1CK3  ==  TM1CR2.3
   342 00000 0342 C                TM1CK3  ==  TM1CR2.3
   343       2006 C                TM1CK2  ==  TM1CR2.2
   343 00000 0242 C                TM1CK2  ==  TM1CR2.2
   344       2006 C                TM1CK1  ==  TM1CR2.1
   344 00000 0142 C                TM1CK1  ==  TM1CR2.1
   345       2006 C                TM1CK0  ==  TM1CR2.0
   345 00000 0042 C                TM1CK0  ==  TM1CR2.0
   346            C        ;R07/TM1DBH :Timer/Counter 1 Data Buffer B High Byte
   347       2007 C            TM1DBH      ==  0x07:rpage 2
   347 00000 0012 C            TM1DBH      ==  0x07:rpage 2
   348            C        ;R08/TM1DBL :Timer/Counter 1 Data Buffer B Low Byte
   349       2008 C            TM1DBL      ==  0x08:rpage 2
   349 00000 0012 C            TM1DBL      ==  0x08:rpage 2
   350            C        ;R09/TM1DAH :Timer/Counter 1 Data Buffer A High Byte
   351       2009 C            TM1DAH      ==  0x09:rpage 2
   351 00000 0012 C            TM1DAH      ==  0x09:rpage 2
   352            C        ;R0A/TM1DAL :Timer/Counter 1 Data Buffer A Low Byte
   353       200A C            TM1DAL      ==  0x0A:rpage 2
   353 00000 0012 C            TM1DAL      ==  0x0A:rpage 2
   354            C        ;R0B/TM2CR1 :Timer/Counter 2 Control Register 1
   355       200B C            TM2CR1      ==  0x0B:rpage 2
   355 00000 0012 C            TM2CR1      ==  0x0B:rpage 2
   356       200B C                TM2S    ==  TM2CR1.7
   356 00000 0742 C                TM2S    ==  TM2CR1.7
   357       200B C                TM2RC   ==  TM2CR1.6
   357 00000 0642 C                TM2RC   ==  TM2CR1.6
   358       200B C                TM2SS1  ==  TM2CR1.5
   358 00000 0542 C                TM2SS1  ==  TM2CR1.5
   359       200B C                TM2RX2  ==  TM2CR1.4
   359 00000 0442 C                TM2RX2  ==  TM2CR1.4
   360       200B C                TM2FF   ==  TM2CR1.3
   360 00000 0342 C                TM2FF   ==  TM2CR1.3
   361       200B C                TM2MOS  ==  TM2CR1.2
   361 00000 0242 C                TM2MOS  ==  TM2CR1.2
   362       200B C                TM2IS1  ==  TM2CR1.1
   362 00000 0142 C                TM2IS1  ==  TM2CR1.1
   363       200B C                TM2IS0  ==  TM2CR1.0
   363 00000 0042 C                TM2IS0  ==  TM2CR1.0
   364            C        ;R0C/TM2CR2 :Timer/Counter 2 Control Register 2
   365       200C C            TM2CR2      ==  0x0C:rpage 2
   365 00000 0012 C            TM2CR2      ==  0x0C:rpage 2
   366       200C C                TM2M2   ==  TM2CR2.7
   366 00000 0742 C                TM2M2   ==  TM2CR2.7
   367       200C C                TM2M1   ==  TM2CR2.6
   367 00000 0642 C                TM2M1   ==  TM2CR2.6
   368       200C C                TM2M0   ==  TM2CR2.5
   368 00000 0542 C                TM2M0   ==  TM2CR2.5
   369       200C C                TM2SS0  ==  TM2CR2.4
   369 00000 0442 C                TM2SS0  ==  TM2CR2.4
   370       200C C                TM2CK3  ==  TM2CR2.3
   370 00000 0342 C                TM2CK3  ==  TM2CR2.3
   371       200C C                TM2CK2  ==  TM2CR2.2
   371 00000 0242 C                TM2CK2  ==  TM2CR2.2
   372       200C C                TM2CK1  ==  TM2CR2.1
   372 00000 0142 C                TM2CK1  ==  TM2CR2.1
   373       200C C                TM2CK0  ==  TM2CR2.0
   373 00000 0042 C                TM2CK0  ==  TM2CR2.0
   374            C        ;R0D/TM2DBH :Timer/Counter 2 Data Buffer B High Byte
   375       200D C            TM2DBH      ==  0x0D:rpage 2
   375 00000 0012 C            TM2DBH      ==  0x0D:rpage 2
   376            C        ;R0E/TM2DBL :Timer/Counter 2 Data Buffer B Low Byte
   377       200E C            TM2DBL      ==  0x0E:rpage 2
   377 00000 0012 C            TM2DBL      ==  0x0E:rpage 2
   378            C        ;R0F/TM2DAH :Timer/Counter 2 Data Buffer A High Byte
   379       200F C            TM2DAH      ==  0x0F:rpage 2
   379 00000 0012 C            TM2DAH      ==  0x0F:rpage 2
   380            C        ;R10/TM2DAL :Timer/Counter 2 Data Buffer A Low Byte
   381       2010 C            TM2DAL      ==  0x10:rpage 2
   381 00000 0012 C            TM2DAL      ==  0x10:rpage 2
   382            C        
   383            C        ;R11 RX1CR1(RX1 Control Register 1)
   384       2011 C            RX1CR1      ==  0x11:rpage 2
   384 00000 0012 C            RX1CR1      ==  0x11:rpage 2
   385       2011 C                RX1E    ==  RX1CR1.7
   385 00000 0742 C                RX1E    ==  RX1CR1.7
   386       2011 C                RXIVE   ==  RX1CR1.6
   386 00000 0642 C                RXIVE   ==  RX1CR1.6
   387       2011 C                RX1HV4  ==  RX1CR1.4
   387 00000 0442 C                RX1HV4  ==  RX1CR1.4
   388       2011 C                RX1HV3  ==  RX1CR1.3
   388 00000 0342 C                RX1HV3  ==  RX1CR1.3
   389       2011 C                RX1HV2  ==  RX1CR1.2
   389 00000 0242 C                RX1HV2  ==  RX1CR1.2
   390       2011 C                RX1HV1  ==  RX1CR1.1
   390 00000 0142 C                RX1HV1  ==  RX1CR1.1
   391       2011 C                RX1HV0  ==  RX1CR1.0
   391 00000 0042 C                RX1HV0  ==  RX1CR1.0
   392            C        ;R12 RX1CR2(RX1 Control Register 2)
   393       2012 C            RX1CR2      ==  0x12:rpage 2
   393 00000 0012 C            RX1CR2      ==  0x12:rpage 2
   394       2012 C                RX1OPE  ==  RX1CR2.7
   394 00000 0742 C                RX1OPE  ==  RX1CR2.7
   395       2012 C                RX1OUT  ==  RX1CR2.6
   395 00000 0642 C                RX1OUT  ==  RX1CR2.6
   396       2012 C                RX1LV4  ==  RX1CR2.4
   396 00000 0442 C                RX1LV4  ==  RX1CR2.4
   397       2012 C                RX1LV3  ==  RX1CR2.3
   397 00000 0342 C                RX1LV3  ==  RX1CR2.3
   398       2012 C                RX1LV2  ==  RX1CR2.2
   398 00000 0242 C                RX1LV2  ==  RX1CR2.2
   399       2012 C                RX1LV1  ==  RX1CR2.1
   399 00000 0142 C                RX1LV1  ==  RX1CR2.1
   400       2012 C                RX1LV0  ==  RX1CR2.0
   400 00000 0042 C                RX1LV0  ==  RX1CR2.0
   401            C        ;R13 RX2CR1(RX2 Control Register 1)
   402       2013 C            RX2CR1      ==  0x13:rpage 2
   402 00000 0012 C            RX2CR1      ==  0x13:rpage 2
   403       2013 C                RX2E    ==  RX2CR1.7
   403 00000 0742 C                RX2E    ==  RX2CR1.7
   404       2013 C                RX2HV4  ==  RX2CR1.4
   404 00000 0442 C                RX2HV4  ==  RX2CR1.4
   405       2013 C                RX2HV3  ==  RX2CR1.3
   405 00000 0342 C                RX2HV3  ==  RX2CR1.3
   406       2013 C                RX2HV2  ==  RX2CR1.2
   406 00000 0242 C                RX2HV2  ==  RX2CR1.2
   407       2013 C                RX2HV1  ==  RX2CR1.1
   407 00000 0142 C                RX2HV1  ==  RX2CR1.1
   408       2013 C                RX2HV0  ==  RX2CR1.0
   408 00000 0042 C                RX2HV0  ==  RX2CR1.0
   409            C        ;R14 RX2CR2(RX2 Control Register 2)
   410       2014 C            RX2CR2      ==  0x14:rpage 2
   410 00000 0012 C            RX2CR2      ==  0x14:rpage 2
   411       2014 C                RX2OPE  ==  RX2CR2.7
   411 00000 0742 C                RX2OPE  ==  RX2CR2.7
   412       2014 C                RX2OUT  ==  RX2CR2.6
   412 00000 0642 C                RX2OUT  ==  RX2CR2.6
   413       2014 C                RX2LV4  ==  RX2CR2.4
   413 00000 0442 C                RX2LV4  ==  RX2CR2.4
   414       2014 C                RX2LV3  ==  RX2CR2.3
   414 00000 0342 C                RX2LV3  ==  RX2CR2.3
   415       2014 C                RX2LV2  ==  RX2CR2.2
   415 00000 0242 C                RX2LV2  ==  RX2CR2.2
   416       2014 C                RX2LV1  ==  RX2CR2.1
   416 00000 0142 C                RX2LV1  ==  RX2CR2.1
   417       2014 C                RX2LV0  ==  RX2CR2.0
   417 00000 0042 C                RX2LV0  ==  RX2CR2.0
   418            C        ;R15 RXDCR(RX Deglitch Control Register)
   419       2015 C            RXDCR       ==  0x15:rpage 2
   419 00000 0012 C            RXDCR       ==  0x15:rpage 2
   420       2015 C                RX1DS   ==  RXDCR.7
   420 00000 0742 C                RX1DS   ==  RXDCR.7
   421       2015 C                RX1DT2  ==  RXDCR.6
   421 00000 0642 C                RX1DT2  ==  RXDCR.6
   422       2015 C                RX1DT1  ==  RXDCR.5
   422 00000 0542 C                RX1DT1  ==  RXDCR.5
   423       2015 C                RX1DT0  ==  RXDCR.4
   423 00000 0442 C                RX1DT0  ==  RXDCR.4
   424       2015 C                RX2DS   ==  RXDCR.3
   424 00000 0342 C                RX2DS   ==  RXDCR.3
   425       2015 C                RX2DT2  ==  RXDCR.2
   425 00000 0242 C                RX2DT2  ==  RXDCR.2
   426       2015 C                RX2DT1  ==  RXDCR.1
   426 00000 0142 C                RX2DT1  ==  RXDCR.1
   427       2015 C                RX2DT0  ==  RXDCR.0
   427 00000 0042 C                RX2DT0  ==  RXDCR.0
   428            C        ;R16 TXSC(TX Sink Current Register)
   429       2016 C            TXSC        ==  0x16:rpage 2
   429 00000 0012 C            TXSC        ==  0x16:rpage 2
   430       2016 C                TXCS3   ==  TXSC.3
   430 00000 0342 C                TXCS3   ==  TXSC.3
   431       2016 C                TXCS2   ==  TXSC.2
   431 00000 0242 C                TXCS2   ==  TXSC.2
   432       2016 C                TXCS1   ==  TXSC.1
   432 00000 0142 C                TXCS1   ==  TXSC.1
   433       2016 C                TXCS0   ==  TXSC.0
   433 00000 0042 C                TXCS0   ==  TXSC.0
   434            C        ;R17 TXCR1(TX Control Register 1)
   435       2017 C            TXCR1       ==  0x17:rpage 2
   435 00000 0012 C            TXCR1       ==  0x17:rpage 2
   436       2017 C                TXEN    ==  TXCR1.7
   436 00000 0742 C                TXEN    ==  TXCR1.7
   437       2017 C                TXTM    ==  TXCR1.5
   437 00000 0542 C                TXTM    ==  TXCR1.5
   438       2017 C                TXSR1   ==  TXCR1.4
   438 00000 0442 C                TXSR1   ==  TXCR1.4
   439       2017 C                TXSR0   ==  TXCR1.3
   439 00000 0342 C                TXSR0   ==  TXCR1.3
   440       2017 C                TXMV2   ==  TXCR1.2
   440 00000 0242 C                TXMV2   ==  TXCR1.2
   441       2017 C                TXMV1   ==  TXCR1.1
   441 00000 0142 C                TXMV1   ==  TXCR1.1
   442       2017 C                TXMV0   ==  TXCR1.0
   442 00000 0042 C                TXMV0   ==  TXCR1.0
   443            C        ;R18 TXCR2(TX Control Register 2)
   444       2018 C            TXCR2       ==  0x18:rpage 2
   444 00000 0012 C            TXCR2       ==  0x18:rpage 2
   445       2018 C                TXS     ==  TXCR2.7
   445 00000 0742 C                TXS     ==  TXCR2.7
   446       2018 C                TXCLK   ==  TXCR2.6
   446 00000 0642 C                TXCLK   ==  TXCR2.6
   447       2018 C                TXDP2   ==  TXCR2.5
   447 00000 0542 C                TXDP2   ==  TXCR2.5
   448       2018 C                TXDP1   ==  TXCR2.4
   448 00000 0442 C                TXDP1   ==  TXCR2.4
   449       2018 C                TXDP0   ==  TXCR2.3
   449 00000 0342 C                TXDP0   ==  TXCR2.3
   450       2018 C                TXCP2   ==  TXCR2.2
   450 00000 0242 C                TXCP2   ==  TXCR2.2
   451       2018 C                TXCP1   ==  TXCR2.1
   451 00000 0142 C                TXCP1   ==  TXCR2.1
   452       2018 C                TXCP0   ==  TXCR2.0
   452 00000 0042 C                TXCP0   ==  TXCR2.0
   453            C        ;R19 TXDT(TX Delay Timer Register)
   454       2019 C            TXDT       ==  0x19:rpage 2
   454 00000 0012 C            TXDT       ==  0x19:rpage 2
   455            C        ;R1A TXCT(TX Sink Current Timer Register)
   456       201A C            TXCT       ==  0x1A:rpage 2
   456 00000 0012 C            TXCT       ==  0x1A:rpage 2
   457            C        ;R1B TXRC (TXTM Read Counting)
   458       201B C            TXRC       ==  0x1B:rpage 2
   458 00000 0012 C            TXRC       ==  0x1B:rpage 2
   459            C        ;R1C CMP3&LRR (CMP3&Limiting Resistor)
   460       201C C            LRR         ==  0x1C:rpage 2
   460 00000 0012 C            LRR         ==  0x1C:rpage 2
   461       201C C                CMP3DS  ==  LRR.7
   461 00000 0742 C                CMP3DS  ==  LRR.7
   462       201C C                CMP3DT2 ==  LRR.6
   462 00000 0642 C                CMP3DT2 ==  LRR.6
   463       201C C                CMP3DT1 ==  LRR.5
   463 00000 0542 C                CMP3DT1 ==  LRR.5
   464       201C C                CMP3DT0 ==  LRR.4
   464 00000 0442 C                CMP3DT0 ==  LRR.4
   465       201C C                CL0     ==  LRR.0
   465 00000 0042 C                CL0     ==  LRR.0
   466            C        ;R1D DCCR (Discharge Control Register)
   467       201D C            DCCR        ==  0x1D:rpage 2
   467 00000 0012 C            DCCR        ==  0x1D:rpage 2
   468       201D C                CMP3E   ==  DCCR.7
   468 00000 0742 C                CMP3E   ==  DCCR.7
   469       201D C                MCDC    ==  DCCR.6
   469 00000 0642 C                MCDC    ==  DCCR.6
   470       201D C                DCT2    ==  DCCR.4
   470 00000 0442 C                DCT2    ==  DCCR.4
   471       201D C                DCT1    ==  DCCR.3
   471 00000 0342 C                DCT1    ==  DCCR.3
   472       201D C                DCT0    ==  DCCR.2
   472 00000 0242 C                DCT0    ==  DCCR.2
   473       201D C                DCR1    ==  DCCR.1
   473 00000 0142 C                DCR1    ==  DCCR.1
   474       201D C                DCR0    ==  DCCR.0
   474 00000 0042 C                DCR0    ==  DCCR.0
   475            C        ;R1E DCVS (Discharge Voltage select Register)
   476       201E C            DCVS        ==  0x1E:rpage 2
   476 00000 0012 C            DCVS        ==  0x1E:rpage 2
   477       201E C                CMP3OPE ==  DCVS.7
   477 00000 0742 C                CMP3OPE ==  DCVS.7
   478       201E C                CMP3OUT ==  DCVS.6
   478 00000 0642 C                CMP3OUT ==  DCVS.6
   479       201E C                DCP     ==  DCVS.3
   479 00000 0342 C                DCP     ==  DCVS.3
   480       201E C                DCV2    ==  DCVS.2
   480 00000 0242 C                DCV2    ==  DCVS.2
   481       201E C                DCV1    ==  DCVS.1
   481 00000 0142 C                DCV1    ==  DCVS.1
   482       201E C                DCV0    ==  DCVS.0
   482 00000 0042 C                DCV0    ==  DCVS.0
   483            C        
   484            C        
   485            C        ;R1F IR1SR (IR1 Sink Current Control Register)
   486       201F C            IR1SR       ==  0x1F:rpage 2
   486 00000 0012 C            IR1SR       ==  0x1F:rpage 2
   487            C        ;R20 IR2SR (IR2 Sink Current Control Register)
   488       2020 C            IR2SR       ==  0x20:rpage 2
   488 00000 0012 C            IR2SR       ==  0x20:rpage 2
   489            C        ;R21 IRCR1 (IR Control Register 1)
   490       2021 C            IRCR1       ==  0x21:rpage 2
   490 00000 0012 C            IRCR1       ==  0x21:rpage 2
   491            C        ;R22 IGCR1 (Integrator Control Register 1)
   492       2022 C            IGCR1       ==  0x22:rpage 2
   492 00000 0012 C            IGCR1       ==  0x22:rpage 2
   493            C        ;R23 IGCR2 (Integrator Control Register 2)
   494       2023 C            IGCR2       ==  0x23:rpage 2
   494 00000 0012 C            IGCR2       ==  0x23:rpage 2
   495            C        ;R24 IGCR3 (Integrator Control Register 3)
   496       2024 C            IGCR3       ==  0x24:rpage 2
   496 00000 0012 C            IGCR3       ==  0x24:rpage 2
   497            C        ;R25 IGDBH (Integrator Data Buffer High byte)
   498       2025 C            IGDBH       ==  0x25:rpage 2
   498 00000 0012 C            IGDBH       ==  0x25:rpage 2
   499            C        ;R26 IGDBL (Integrator Data Buffer Low byte)
   500       2026 C            IGDBL       ==  0x26:rpage 2    
   500 00000 0012 C            IGDBL       ==  0x26:rpage 2    
   501            C        ;R27 TLED (Time of LED Control Register)
   502       2027 C            TLED        ==  0x27:rpage 2
   502 00000 0012 C            TLED        ==  0x27:rpage 2
   503            C        
   504            C        ;R38 IGCOBS1 (Integrator Code Option Bit Selection Register 1)
   505       2038 C            IGCOBS1     ==  0x38:rpage 2
   505 00000 0012 C            IGCOBS1     ==  0x38:rpage 2
   506            C        ;R39 IGCOBS2 (Integrator Code Option Bit Selection Register 2)
   507       2039 C            IGCOBS2     ==  0x39:rpage 2
   507 00000 0012 C            IGCOBS2     ==  0x39:rpage 2
   508            C        ;R3A IGCOBS3 (Integrator Code Option Bit Selection Register 3)
   509       203A C            IGCOBS3     ==  0x3A:rpage 2
   509 00000 0012 C            IGCOBS3     ==  0x3A:rpage 2
   510            C        ;R3B IGCOBS4 (Integrator Code Option Bit Selection Register 4)
   511       203B C            IGCOBS4     ==  0x3B:rpage 2
   511 00000 0012 C            IGCOBS4     ==  0x3B:rpage 2
   512            C        ;R3C IGCOBS5 (Integrator Code Option Bit Selection Register 5)
   513       203C C            IGCOBS5     ==  0x3C:rpage 2
   513 00000 0012 C            IGCOBS5     ==  0x3C:rpage 2
   514            C        ;R3D IGCOBS6 (Integrator Code Option Bit Selection Register 6)
   515       203D C            IGCOBS6     ==  0x3D:rpage 2
   515 00000 0012 C            IGCOBS6     ==  0x3D:rpage 2
   516            C        ;R3E IGCOBS7 (Integrator Code Option Bit Selection Register 7)
   517       203E C            IGCOBS7     ==  0x3E:rpage 2
   517 00000 0012 C            IGCOBS7     ==  0x3E:rpage 2
   518            C        
   519            C        ;R41 VRCOBS1 (VREF Code Option Bit Selection Register 1)
   520       2041 C            VRCOBS1     ==  0x41:rpage 2
   520 00000 0012 C            VRCOBS1     ==  0x41:rpage 2
   521            C        ;R42/COBS4 :Code Option Bit Selection Register4
   522       2042 C            COBS4       ==  0x42:rpage 2
   522 00000 0012 C            COBS4       ==  0x42:rpage 2
   523            C        ;R43/COBS5 :Code Option Bit Selection Register5
   524       2043 C            COBS5       ==  0x43:rpage 2
   524 00000 0012 C            COBS5       ==  0x43:rpage 2
   525            C        ;R44/COBS6 :Code Option Bit Selection Register6
   526       2044 C            COBS6       ==  0x44:rpage 2
   526 00000 0012 C            COBS6       ==  0x44:rpage 2
   527            C        
   528            C        ;R47/LOCKPR (Lock Page Number Register)
   529       2047 C            LOCKPR      ==  0x47:rpage 2
   529 00000 0012 C            LOCKPR      ==  0x47:rpage 2
   530            C        ;R46/LOCKCR (Lock Control Register)
   531       2048 C            LOCKCR      ==  0x48:rpage 2
   531 00000 0012 C            LOCKCR      ==  0x48:rpage 2
   532       2048 C        	LOCKEN  == LOCKCR.7
   532 00000 0742 C        	LOCKEN  == LOCKCR.7
    38            C        	INCLUDE		"SDxxx_ASM_SYS.ASM"
     1            C        ;ORG 	0x03FF
     2            C        ;SDxxx_SYS_INIT:	
     3            C            ;SDxxx_SYS_INIT
     4            C            ;RET
     5            C        
     6            C        
     7            C        ;;====== For IC Application =================================================;;
     8            C        SDxxx_SYS_INIT MACRO
     9            C            SBANK	0
    10            C            BS		CPUS
    11            C            BS		IDLE
    12            C            ENDM
    13            C        
    14            C        DELAY_NOP_NO_10	MACRO
    15            C            NOP
    16            C            NOP
    17            C            NOP
    18            C            NOP
    19            C            NOP
    20            C            NOP
    21            C            NOP
    22            C            NOP
    23            C            NOP
    24            C            NOP
    25            C            ENDM
    26            C        
    27            C        SDxxx_RAM_TABLE MACRO
    28            C            MOV		A,@0x80		; Write Start SRAM
    29            C            MOV		RSR,A
    30            C            GBANK	3
    31            C            MOV		A,@0x55		; SRAM(0x0085)
    32            C            MOV		IAR,A
    33            C            INC		RSR
    34            C            MOV		A,@0xAA
    35            C            MOV		IAR,A
    36            C            INC		RSR		
    37            C            MOV		A,@0xF0
    38            C            XOR		A,RSR		; INC(0x80),UNTIL(0xC0)
    39            C            JBS		Z
    40            C            JMP		$-9
    41            C            ENDM
    42            C        
    43            C        SDxxx_IAP_WR MACRO
    44            C            SBANK	1		
    45            C            MOV		A,@0x00
    46            C            MOV		TBWAL,A
    47            C            MOV		A,@0x0C
    48            C            MOV		TBWAH,A
    49            C            MOV		A,@0x01
    50            C            MOV		TBWCR,A
    51            C            MOV		A,@0xB4
    52            C            MOV		FLKR,A
    53            C            TBWR
    54            C            ENDM
    55            C        
    56            C        SDxxx_IAP_RD MACRO
    57            C        	GBANK	0
    58            C            MOV		A,@0x80
    59            C            MOV		TMP4,A
    60            C            MOV		A,@0x00
    61            C            MOV		TMP3,A			
    62            C            TEXT1:
    63            C            MOV		A,TMP4
    64            C            MOV		RSR,A
    65            C            SBANK	1
    66            C            MOV		A,TMP3	; Set ROM Pointer
    67            C            MOV		TBPTL,A
    68            C            MOV		A,@0x0C
    69            C            MOV		TBPTH,A
    70            C            TBRDA	TMP5	; A(LowByte),TMP5(HiByte)
    71            C            MOV		IAR,A
    72            C            INC		RSR
    73            C            MOV		A,TMP5
    74            C            MOV		IAR,A
    75            C            INC		TMP3
    76            C            INC		TMP4
    77            C            INC		TMP4
    78            C            MOV		A,TMP4
    79            C            XOR		A,@0xC0
    80            C            JBS		Z
    81            C            JMP		TEXT1
    82            C            ENDM
    83            C        
    84            C        SDxxx_ROM_PROTECT   MACRO RANGE
    85            C        	SBANK	2
    86            C        	BS		LOCKEN
    87            C        	SBANK	1
    88            C        	MOV		A,@0xC5
    89            C        	MOV		FLKR,A
    90            C        	SBANK	2
    91            C        	MOV		A,@RANGE    ;0x01
    92            C        	MOV		LOCKPR,A	;Lock(0x0000~0x007F)
    93            C            ENDM
    94            C        SDxxx_ROM_READ  MACRO ADDR_H,ADDR_L,BYTE_H
    95            C        	SBANK	1
    96            C        	MOV		A,@ADDR_L
    97            C        	MOV		TBPTL,A
    98            C        	MOV		A,@ADDR_H
    99            C        	MOV		TBPTH,A
   100            C        	TBRDA	BYTE_H	    ;A(LowByte),TMP5(HiByte)
   101            C            ENDM
   102            C        
   103            C        SDxxx_WDT_SET MACRO
   104            C        	SBANK	0
   105            C        	MOV		A,@0x88
   106            C        	MOV		WDTCR,A
   107            C            ENDM
   108            C        
   109            C        ;;====== For IC Function Verify =============================================;;
   110            C        SDxxx_WR_COBS_IRC MACRO
   111            C        	SBANK	1
   112            C        	MOV		A,@0xA0
   113            C        	MOV		COBS1,A
   114            C            MOV		A,@0x3F
   115            C        	MOV		COBS2,A
   116            C            MOV		A,@0x0F
   117            C        	MOV		COBS3,A
   118            C        	SBANK	2
   119            C        	MOV		A,@0x1F
   120            C        	MOV		COBS4,A
   121            C            MOV		A,@0x3F
   122            C        	MOV		COBS2,A
   123            C            MOV		A,@0x0F
   124            C        	MOV		COBS3,A
   125            C            ENDM
   126            C        
   127            C        
   128            C        ;RAM_WRITE MACRO G_BANK,START_ADDR,VALUE
   129            C        ; GBANK G_BANK
   130            C        ; MOV A,@START_ADDR
   131            C        ; MOV RSR,A
   132            C        ; MOV A,@VALUE
   133            C        ; MOV IAR,A
   134            C        ; INC RSR
   135            C        ; JBS Z
   136            C        ; JMP $-3
   137            C        ;ENDM
   138            C        
   139            C        
   140            C        
    39            C        	INCLUDE		"SDxxx_ASM_GPIO.ASM"
     1            C        ;ORG 	0x03FF
     2            C        ;SDxxx_GPIO_INIT:
     3            C            ;SDxxx_GPIO_INIT
     4            C            ;RET
     5            C        
     6            C        
     7            C        ;SDxxx_SYS_INIT:	
     8            C            ;SBANK	0
     9            C            ;BS		CPUS
    10            C            ;BS		IDLE
    11            C            ;RET
    12            C        	;CALL		GPIO_Control_01	; O/P:P5,P6,P7
    13            C        	;CALL		GPIO_Control_011; I/P:P5,P6,P7
    14            C        	;CALL		GPIO_Control_02	; O/P: P5,P6,P7 , Pull-Hi
    15            C        	;CALL		GPIO_Control_03	; O/P: P5,P6,P7 , Pull-Lo
    16            C        	;CALL		GPIO_Control_04	; O/P: P5,P6,P7 , Pull-HSCR
    17            C        	;CALL		GPIO_Control_05	; O/P: P5,P6,P7 , Pull-OD
    18            C        
    19            C        ;;====== For IC Application =================================================;;
    20            C        SDxxx_GPIO_INIT MACRO
    21            C        	SBANK	0
    22            C        	CLR		P5
    23            C        	MOV		A,@0x00
    24            C        	MOV		IOCR5,A
    25            C            ENDM
    26            C        
    27            C        ;;====== For IC Function Verify =============================================;;
    28            C        SDxxx_GPIO_OUT_P5 MACRO
    29            C        	SBANK	0
    30            C            MOV		A,@0xFF
    31            C        	MOV		PORT5,A
    32            C            MOV     0x50,@0xFE
    33            C            MOV     A,0x50
    34            C            MOV		IOCR5,A
    35            C            RL      0x50
    36            C            MOV     A,0x50
    37            C            MOV		IOCR5,A
    38            C            RL      0x50
    39            C            MOV     A,0x50
    40            C            MOV		IOCR5,A
    41            C            RL      0x50
    42            C            MOV     A,0x50
    43            C            MOV		IOCR5,A
    44            C            RL      0x50
    45            C            MOV     A,0x50
    46            C            MOV		IOCR5,A
    47            C            RL      0x50
    48            C            MOV     A,0x50    
    49            C            MOV		IOCR5,A
    50            C            RL      0x50
    51            C            MOV     A,0x50
    52            C            MOV		IOCR5,A
    53            C            RL      0x50
    54            C            MOV     A,0x50
    55            C            MOV		IOCR5,A
    56            C            ENDM
    57            C        
    58            C        SDxxx_GPIO_OUT_P6 MACRO
    59            C        	SBANK	0
    60            C            MOV		A,@0xFF
    61            C        	MOV		PORT6,A
    62            C            MOV     A,@0xFF
    63            C            MOV		IOCR6,A
    64            C            MOV     0x50,@0xFE
    65            C            MOV     A,0x50
    66            C            MOV		IOCR6,A
    67            C            RL      0x50
    68            C            MOV     A,0x50
    69            C            MOV		IOCR6,A
    70            C            RL      0x50
    71            C            MOV     A,0x50
    72            C            MOV		IOCR6,A
    73            C            RL      0x50
    74            C            MOV     A,0x50
    75            C            MOV		IOCR6,A
    76            C            RL      0x50
    77            C            MOV     A,0x50
    78            C            MOV		IOCR6,A
    79            C            RL      0x50
    80            C            MOV     A,0x50
    81            C            MOV		IOCR6,A
    82            C            RL      0x50
    83            C            MOV     A,0x50
    84            C            MOV		IOCR6,A
    85            C            ENDM
    86            C        
    87            C        SDxxx_GPIO_OUT_P7 MACRO
    88            C        	SBANK	0
    89            C            MOV		A,@0xFF
    90            C        	MOV		PORT7,A
    91            C            MOV     A,@0xFF
    92            C            MOV		IOCR7,A
    93            C            MOV     0x50,@0xFE
    94            C            MOV     A,0x50
    95            C            MOV		IOCR7,A
    96            C            RL      0x50
    97            C            MOV     A,0x50
    98            C            MOV		IOCR7,A
    99            C            RL      0x50
   100            C            MOV     A,0x50
   101            C            MOV		IOCR7,A
   102            C            RL      0x50
   103            C            MOV     A,0x50
   104            C            MOV		IOCR7,A
   105            C            RL      0x50
   106            C            MOV     A,0x50
   107            C            MOV		IOCR7,A
   108            C            RL      0x50
   109            C            MOV     A,0x50
   110            C            MOV		IOCR7,A
   111            C            RL      0x50
   112            C            MOV     A,0x50
   113            C            MOV		IOCR7,A
   114            C            ENDM
   115            C        
   116            C        SDxxx_GPIO_PH_P5 MACRO
   117            C        	SBANK	0
   118            C            ENDM
   119            C        
   120            C        SDxxx_GPIO_PL_P5 MACRO
   121            C        	SBANK	0
   122            C            ENDM
   123            C        
   124            C        SDxxx_GPIO_OD_P5 MACRO
   125            C        	SBANK	0
   126            C            ENDM
   127            C        
   128            C        SDxxx_GPIO_HD_P5 MACRO
   129            C        	SBANK	0
   130            C            ENDM
   131            C        
    40            C        	INCLUDE		"SDxxx_ASM_EFT.ASM"
     1            C        SDxxx_EFT_INIT MACRO
     2            C        
     3            C            ENDM
     4            C        
     5            C        SDxxx_EFT_WAKE MACRO
     6            C        	WAKE_INIT:
     7            C        		SBANK	0
     8            C        		JBS		P			; PWR ON reset(1)/RST pin reset(0)
     9            C        		JMP		$+3
    10            C        		BC		P5,0		; PWR ON reset,Light PWR_LED
    11            C        		SLEP
    12            C        		JBS		P
    13            C        		JMP		$+3
    14            C        		BC		P5,0		; PWR ON reset,Light PWR_LED
    15            C        		SLEP
    16            C        		JBS		P
    17            C        		JMP		$+3
    18            C        		BC		P5,0		; PWR ON reset,Light PWR_LED
    19            C        		BC		P5,0		; PWR ON reset,Light PWR_LED
    20            C        		SLEP		
    21            C            ENDM
    22            C        
    23            C        SDxxx_EFT_KEY_TRIG MACRO
    24            C            KEY_TRG:
    25            C                JBS		P5,0		; Push,or not
    26            C                JMP		DEBOUNCE
    27            C                JMP		KEY_TRG
    28            C            DEBOUNCE:
    29            C                JBS		P5,0
    30            C                JMP		KEY_TRG
    31            C                JBS		P5,0
    32            C                JMP		KEY_TRG
    33            C                JBS		P5,0
    34            C                JMP		KEY_TRG
    35            C                JBS		P5,0
    36            C                JMP		KEY_TRG
    37            C                JBS		P5,0
    38            C                JMP		KEY_TRG
    39            C                JBS		P5,0
    40            C                JMP		KEY_TRG
    41            C                JBS		P5,0
    42            C                JMP		KEY_TRG
    43            C                JBS		P5,0
    44            C                JMP		KEY_TRG
    45            C                JBS		P5,0
    46            C                JMP		KEY_TRG
    47            C                JBS		P5,0
    48            C                JMP		$-2
    49            C                MOV		A,@0xFF
    50            C                MOV		P5,A
    51            C                MOV		A,@0xFF		; Turn Off all LED
    52            C                MOV		P5,A
    53            C            ENDM
    54            C        
    55            C        SDxxx_EFT_TES_JMP MACRO
    56            C            TEST_JMP:
    57            C                MOV		A,@0x00
    58            C                MOV		STATUS,A
    59            C                CLR 	0x50
    60            C                INC 	0x50                ;[0x50] = 0x01
    61            C                JMP 	$+2
    62            C                JMP 	JMP_FAIL
    63            C                INC 	0x50                ;[0x50] = 0x02
    64            C                JMP 	$+2
    65            C                JMP 	JMP_FAIL
    66            C                INC 	0x50                ;[0x50] = 0x03
    67            C                JMP 	$+2
    68            C                JMP 	JMP_FAIL
    69            C                INC 	0x50                ;[0x50] = 0x04
    70            C                JMP 	$+2
    71            C                JMP 	JMP_FAIL
    72            C                INC 	0x50                ;[0x50] = 0x05
    73            C                JMP 	$+2
    74            C                JMP 	JMP_FAIL
    75            C                INC 	0x50                ;[0x50] = 0x06
    76            C                JMP 	$+2
    77            C                JMP 	JMP_FAIL
    78            C                INC 	0x50                ;[0x50] = 0x07
    79            C                JMP 	$+2
    80            C                JMP 	JMP_FAIL
    81            C                INC 	0x50                ;[0x50] = 0x08
    82            C                JMP 	$+2
    83            C                JMP 	JMP_FAIL
    84            C                INC 	0x50                ;[0x50] = 0x09
    85            C                JMP 	$+2
    86            C                JMP 	JMP_FAIL
    87            C                INC 	0x50                ;[0x50] = 0x0A
    88            C                JMP 	$+2
    89            C                JMP 	JMP_FAIL
    90            C                INC 	0x50                ;[0x50] = 0x0B
    91            C                JMP 	$+2
    92            C                JMP 	JMP_FAIL
    93            C                INC 	0x50                ;[0x50] = 0x0C
    94            C                JMP 	$+2
    95            C                JMP 	JMP_FAIL
    96            C                INC 	0x50                ;[0x50] = 0x0D
    97            C                JMP 	$+2
    98            C                JMP 	JMP_FAIL
    99            C                INC 	0x50                ;[0x50] = 0x0E
   100            C                JMP 	$+2
   101            C                JMP 	JMP_FAIL
   102            C                INC 	0x50                ;[0x50] = 0x0F
   103            C                JMP 	$+2
   104            C                JMP 	JMP_FAIL
   105            C                INC 	0x50
   106            C                JMP 	$+2                ;[0x50] = 0x10
   107            C                JMP 	JMP_FAIL
   108            C                MOV 	A,@0x10
   109            C                XOR 	0x50,A				;[0x50] = 0x10 ?
   110            C                JBS		Z			; Check Z = 1?
   111            C                JMP	JMP_FAIL
   112            C                JBC		N			; Check N = 0?
   113            C                JMP	JMP_FAIL
   114            C            ENDM
   115            C        
   116            C        SDxxx_EFT_STACK MACRO
   117            C        	TEST_STACK:
   118            C        		SBANK	1
   119            C        		MOV		A,STKMON
   120            C        		XOR		A,@0x00
   121            C        		CALL	INST_XOR_JUDGE
   122            C        		CALL	STACK1
   123            C        		JMP		TEST_STACK_END
   124            C        	STACK1:
   125            C        		MOV		A,STKMON
   126            C        		XOR		A,@0x01
   127            C        		CALL	INST_XOR_JUDGE
   128            C        		CALL	STACK2
   129            C        		RET
   130            C        	STACK2:
   131            C        		MOV		A,STKMON
   132            C        		XOR		A,@0x02
   133            C        		CALL	INST_XOR_JUDGE
   134            C        		CALL	STACK3
   135            C        		RET
   136            C        	STACK3:
   137            C        		MOV		A,STKMON
   138            C        		XOR		A,@0x03
   139            C        		CALL	INST_XOR_JUDGE
   140            C        		CALL	STACK4
   141            C        		RET
   142            C        	STACK4:
   143            C        		MOV		A,STKMON
   144            C        		XOR		A,@0x04
   145            C        		CALL	INST_XOR_JUDGE
   146            C        		CALL	STACK5
   147            C        		RET
   148            C        	STACK5:
   149            C        		MOV		A,STKMON
   150            C        		XOR		A,@0x05
   151            C        		CALL	INST_XOR_JUDGE
   152            C        		CALL	STACK6
   153            C        		RET
   154            C        	STACK6:
   155            C        		MOV		A,STKMON
   156            C        		XOR		A,@0x06
   157            C        		CALL	INST_XOR_JUDGE
   158            C        		CALL	STACK7
   159            C        		RET
   160            C        	STACK7:
   161            C        		NOP
   162            C        		;CALL	INST_XOR_JUDGE ;Sack Over(Shut Down Tst)
   163            C        		RET
   164            C        	TEST_STACK_END:
   165            C        		NOP
   166            C            ENDM
   167            C        
   168            C        SDxxx_EFT_STACK_16 MACRO
   169            C        	TEST_STACK:
   170            C        		SBANK	1
   171            C        		MOV		A,STKMON
   172            C        		XOR		A,@0x00
   173            C        		CALL	INST_XOR_JUDGE
   174            C        		CALL	STACK1
   175            C        		JMP		TEST_STACK_END
   176            C        	STACK1:
   177            C        		MOV		A,STKMON
   178            C        		XOR		A,@0x01
   179            C        		CALL	INST_XOR_JUDGE
   180            C        		CALL	STACK2
   181            C        		RET
   182            C        	STACK2:
   183            C        		MOV		A,STKMON
   184            C        		XOR		A,@0x02
   185            C        		CALL	INST_XOR_JUDGE
   186            C        		CALL	STACK3
   187            C        		RET
   188            C        	STACK3:
   189            C        		MOV		A,STKMON
   190            C        		XOR		A,@0x03
   191            C        		CALL	INST_XOR_JUDGE
   192            C        		CALL	STACK4
   193            C        		RET
   194            C        	STACK4:
   195            C        		MOV		A,STKMON
   196            C        		XOR		A,@0x04
   197            C        		CALL	INST_XOR_JUDGE
   198            C        		CALL	STACK5
   199            C        		RET
   200            C        	STACK5:
   201            C        		MOV		A,STKMON
   202            C        		XOR		A,@0x05
   203            C        		CALL	INST_XOR_JUDGE
   204            C        		CALL	STACK6
   205            C        		RET
   206            C        	STACK6:
   207            C        		MOV		A,STKMON
   208            C        		XOR		A,@0x06
   209            C        		CALL	INST_XOR_JUDGE
   210            C        		CALL	STACK7
   211            C        		RET
   212            C        	STACK7:
   213            C        		NOP
   214            C        		;CALL	INST_XOR_JUDGE ;Sack Over(Shut Down Tst)
   215            C        		RET
   216            C        	TEST_STACK_END:
   217            C        		NOP
   218            C            ENDM
   219            C        
   220            C        SDxxx_EFT_INST_ARITHEMATIC MACRO
   221            C            INST_DAA:			;-------Instruction Test => DAA , C?
   222            C                CALL	STATUS_CLEAR	;-------DAA(0xAA)=10
   223            C                MOV		A,@0xAA
   224            C                DAA
   225            C                JBS		C			; Check C = 1?
   226            C                JMP	INS_FAIL
   227            C                JBC		DC			; Check DC = 0?
   228            C                JMP	INS_FAIL
   229            C                JBC		Z			; Check Z = 0?
   230            C                JMP	INS_FAIL
   231            C                JBC		OV			; Check OV = 0?
   232            C                JMP	INS_FAIL
   233            C                JBC		N			; Check N = 0?
   234            C                JMP	INS_FAIL
   235            C                XOR		A,@0x10		; Check Result ?
   236            C                JBS		Z			; Check Z = 1?
   237            C                JMP	INS_FAIL
   238            C                JBC		N			; Check N = 0?
   239            C                JMP	INS_FAIL
   240            C                CALL	STATUS_CLEAR	;-------DAA(0xFF)=65
   241            C                MOV		A,@0x80
   242            C                MOV		0x50,A		; [0x50] = 0x80
   243            C                MOV		A,@0x7F		; 
   244            C                ADD		A,0x50		; A = 0x7F + 0x80 = 0xFF
   245            C                DAA
   246            C                JBS		C			; Check C = 1?
   247            C                JMP	INS_FAIL
   248            C                JBC		DC			; Check DC = 0?
   249            C                JMP	INS_FAIL
   250            C                JBC		Z			; Check Z = 0?
   251            C                JMP	INS_FAIL
   252            C                JBC		OV			; Check OV = 0?
   253            C                JMP	INS_FAIL
   254            C                JBS		N			; Check N = 1?	; Result is Negative
   255            C                JMP	INS_FAIL
   256            C                BC		Z
   257            C                BC		N
   258            C                XOR		A,@0x65		; Check Result ?
   259            C                JBS		Z			; Check Z = 1?
   260            C                JMP	INS_FAIL
   261            C                JBC		N			; Check N = 0?
   262            C                JMP	INS_FAIL
   263            C                NOP
   264            C                MOV		A,@0x00
   265            C                MOV		STATUS,A
   266            C                ;-------DAA(0x00)=66
   267            C                BS		C
   268            C                MOV		A,@0x80
   269            C                MOV		0x50,A		; [0x50] = 0x80
   270            C                MOV		A,@0x7F		; 
   271            C                ADC		A,0x50		; A = 0x7F + 0x80
   272            C                DAA
   273            C                JBS		C			; Check C = 1? 	/ By ADC
   274            C                JMP	INS_FAIL
   275            C                JBS		DC			; Check DC = 1? / By ADC
   276            C                JMP	INS_FAIL
   277            C                JBS		Z			; Check Z = 1? 	/ By ADC
   278            C                JMP	INS_FAIL
   279            C                JBC		OV			; Check OV = 0?
   280            C                JMP	INS_FAIL
   281            C                JBC		N			; Check N = 0?
   282            C                JMP	INS_FAIL
   283            C                XOR		A,@0x66		; Check Result ?
   284            C                JBS		Z			; Check Z = 1?
   285            C                JMP	INS_FAIL
   286            C                JBC		N			; Check N = 0?
   287            C                JMP	INS_FAIL
   288            C                MOV		A,@0x00
   289            C                MOV		STATUS,A
   290            C                ;-------DAA(0x80)=E6
   291            C                MOV		A,@0xFF
   292            C                MOV		0x50,A		; [0x50] = 0xFF
   293            C                MOV		A,@0x7F		; 
   294            C                SUB		A,0x50		; A = 0xFF - 0x7F
   295            C                DAA
   296            C                JBS		C			; Check C = 1? 	/ By SUB
   297            C                JMP	INS_FAIL
   298            C                JBS		DC			; Check DC = 1? / By SUB
   299            C                JMP	INS_FAIL
   300            C                JBC		Z			; Check Z = 0?
   301            C                JMP	INS_FAIL
   302            C                JBC		OV			; Check OV = 0?
   303            C                JMP	INS_FAIL
   304            C                JBS		N			; Check N = 1?	; Result is Negative
   305            C                JMP	INS_FAIL
   306            C                BC		Z
   307            C                BC		N
   308            C                XOR		A,@0xE6		; Check Result ?
   309            C                JBS		Z			; Check Z = 1?
   310            C                JMP	INS_FAIL
   311            C                JBC		N			; Check N = 0?
   312            C                JMP	INS_FAIL
   313            C            INST_CLA:			;-------Instruction Test => CLA
   314            C                MOV		A,@0x5A
   315            C                XOR		A,@0x5A		; Check Result ?
   316            C                JBS		Z			; Check Z = 1?
   317            C                JMP	INS_FAIL
   318            C                JBC		N			; Check N = 0?
   319            C                JMP	INS_FAIL
   320            C                MOV		A,@0x5A
   321            C                CLRA
   322            C                JBS		Z			; Check Z = 1?
   323            C                JMP	INS_FAIL
   324            C                BC		Z
   325            C                XOR		A,@0x00		; Check Result ?
   326            C                JBS		Z			; Check Z = 1?
   327            C                JMP	INS_FAIL
   328            C                JBC		N			; Check N = 0?
   329            C                JMP	INS_FAIL
   330            C            INST_CLR:			;-------Instruction Test => CLR
   331            C                MOV		A,@0xAA
   332            C                MOV		0x50,A
   333            C                MOV		A,0x50
   334            C                XOR		A,@0xAA		; Check Result ?
   335            C                JBS		Z			; Check Z = 1?
   336            C                JMP	INS_FAIL
   337            C                JBC		N			; Check N = 0?
   338            C                JMP	INS_FAIL
   339            C                CLR		0x50
   340            C                JBS		Z			; Check Z = 1?
   341            C                JMP	INS_FAIL
   342            C                BC		Z
   343            C                MOV		A,0x50
   344            C                XOR		A,@0x00		; Check Result ?
   345            C                JBS		Z			; Check Z = 1?
   346            C                JMP	INS_FAIL
   347            C                JBC		N			; Check N = 0?
   348            C                JMP	INS_FAIL
   349            C            INST_SUB_A_R:		;-------Instruction Test => SUB A,R
   350            C                MOV		A,@0x00
   351            C                MOV		STATUS,A
   352            C                MOV		A,@0x02		; SUB(2-1)=1
   353            C                MOV		0x50,A		; [0x50] = 0x02
   354            C                MOV		A,@0x01
   355            C                SUB		A,0x50		; A = [0x50] - A
   356            C                JBS		C			; Check C = 1? 	; Resulet is Positive
   357            C                JMP	INS_FAIL
   358            C                JBS		DC			; Check DC = 1?	; Low-Byte is Positve
   359            C                JMP	INS_FAIL
   360            C                JBC		Z			; Check Z = 0?
   361            C                JMP	INS_FAIL
   362            C                JBC		OV			; Check OV = 0?
   363            C                JMP	INS_FAIL
   364            C                JBC		N			; Check N = 0?
   365            C                JMP	INS_FAIL
   366            C                BC		Z
   367            C                XOR		A,@0x01		; Check Result ?
   368            C                JBS		Z			; Check Z = 1?
   369            C                JMP	INS_FAIL
   370            C                JBC		N			; Check N = 0?
   371            C                JMP	INS_FAIL
   372            C                MOV		A,@0x00
   373            C                MOV		STATUS,A
   374            C                MOV		A,@0x02		; SUB(2-2)=0
   375            C                MOV		0x50,A		; [0x50] = 0x02
   376            C                MOV		A,@0x02
   377            C                SUB		A,0x50		; A = [0x50] - A
   378            C                JBS		C			; Check C = 1?	; Result is Positive
   379            C                JMP	INS_FAIL
   380            C                JBS		DC			; Check DC = 1?	; Low-Byte is Positve
   381            C                JMP	INS_FAIL
   382            C                JBS		Z			; Check Z = 1?	; Result is Zero
   383            C                JMP	INS_FAIL
   384            C                JBC		OV			; Check OV = 0?
   385            C                JMP	INS_FAIL
   386            C                JBC		N			; Check N = 0?
   387            C                JMP	INS_FAIL
   388            C                BC		Z
   389            C                XOR		A,@0x00		; Check Result ?
   390            C                JBS		Z			; Check Z = 1?
   391            C                JMP	INS_FAIL
   392            C                JBC		N			; Check N = 0?
   393            C                JMP	INS_FAIL
   394            C                MOV		A,@0x00
   395            C                MOV		STATUS,A
   396            C                MOV		A,@0xFF		; SUB(-1-127) = -128(0x80)
   397            C                MOV		0x50,A		; [0x50] = 0xFF
   398            C                MOV		A,@0x7F
   399            C                SUB		A,0x50		; A = [0x50] - A
   400            C                JBS		C			; Check C = 1?
   401            C                JMP	INS_FAIL
   402            C                JBS		DC			; Check DC = 1?
   403            C                JMP	INS_FAIL
   404            C                JBC		Z			; Check Z = 0?
   405            C                JMP	INS_FAIL
   406            C                JBC		OV			; Check OV = 0?
   407            C                JMP	INS_FAIL
   408            C                JBS		N			; Check N = 1?
   409            C                JMP	INS_FAIL
   410            C                BC		Z
   411            C                BC		N
   412            C                XOR		A,@0x80		; Check Result ?
   413            C                JBS		Z			; Check Z = 1?
   414            C                JMP	INS_FAIL
   415            C                JBC		N			; Check N = 0?
   416            C                JMP	INS_FAIL
   417            C                MOV		A,@0x00
   418            C                MOV		STATUS,A
   419            C                MOV		A,@0x80		; SUB(-128-127) = 1(0x01)
   420            C                MOV		0x50,A		; [0x50] = 0x80
   421            C                MOV		A,@0x7F
   422            C                SUB		A,0x50		; A = [0x50] - A
   423            C                JBS		C			; Check C = 1?
   424            C                JMP	INS_FAIL
   425            C                JBC		DC			; Check DC = 0?
   426            C                JMP	INS_FAIL
   427            C                JBC		Z			; Check Z = 0?
   428            C                JMP	INS_FAIL
   429            C                JBS		OV			; Check OV = 1?
   430            C                JMP	INS_FAIL
   431            C                JBC		N			; Check N = 0?
   432            C                JMP	INS_FAIL
   433            C                BC		Z
   434            C                BC		N
   435            C                XOR		A,@0x01		; Check Result ?
   436            C                JBS		Z			; Check Z = 1?
   437            C                JMP	INS_FAIL
   438            C                JBC		N			; Check N = 0?
   439            C                JMP	INS_FAIL
   440            C                MOV		A,@0x00
   441            C                MOV		STATUS,A
   442            C                MOV		A,@0x01		; SUB(1-3) = -2(0xFE)
   443            C                MOV		0x50,A		; [0x50] = 0x01
   444            C                MOV		A,@0x03
   445            C                SUB		A,0x50		; A = [0x50] - A
   446            C                JBC		C			; Check C = 0?
   447            C                JMP	INS_FAIL
   448            C                JBC		DC			; Check DC = 0?
   449            C                JMP	INS_FAIL
   450            C                JBC		Z			; Check Z = 0?
   451            C                JMP	INS_FAIL
   452            C                JBC		OV			; Check OV = 0?
   453            C                JMP	INS_FAIL
   454            C                JBS		N			; Check N = 1?
   455            C                JMP	INS_FAIL
   456            C                BC		Z
   457            C                BC		N
   458            C                XOR		A,@0xFE		; Check Result ?
   459            C                JBS		Z			; Check Z = 1?
   460            C                JMP	INS_FAIL
   461            C                JBC		N			; Check N = 0?
   462            C                JMP	INS_FAIL
   463            C            INST_SUB_R_A:		;-------Instruction Test => SUB R,A
   464            C                MOV		A,@0x00
   465            C                MOV		STATUS,A
   466            C                MOV		A,@0x02
   467            C                MOV		0x50,A		; [0x50] = 0x02
   468            C                MOV		A,@0x01
   469            C                SUB		0x50,A		; [0x50] = [0x50] - 0x01
   470            C                MOV		A,STATUS
   471            C                XOR		A,@0x1B		; for non reset
   472            C                ;;XOR		A,@0x13
   473            C                CALL	INST_XOR_JUDGE
   474            C                BC		Z
   475            C                BC		N
   476            C                MOV		A,0x50
   477            C                XOR		A,@0x01		; Check Result ?
   478            C                CALL	INST_XOR_JUDGE
   479            C                MOV		A,@0x00
   480            C                MOV		STATUS,A
   481            C                MOV		A,@0x02
   482            C                MOV		0x50,A		; [0x50] = 0x02
   483            C                MOV		A,@0x02
   484            C                SUB		0x50,A		; [0x50] = [0x50] - 0x02
   485            C                MOV		A,STATUS
   486            C                XOR		A,@0x1F		; for nono reset
   487            C                ;;XOR		A,@0x17
   488            C                CALL	INST_XOR_JUDGE
   489            C                BC		Z
   490            C                BC		N
   491            C                MOV		A,0x50
   492            C                XOR		A,@0x00		; Check Result ?
   493            C                JBS		Z			; Check Z = 1?
   494            C                JMP	INS_FAIL
   495            C                JBC		N			; Check N = 0?
   496            C                JMP	INS_FAIL
   497            C                MOV		A,@0x00
   498            C                MOV		STATUS,A
   499            C                MOV		A,@0x80
   500            C                MOV		0x50,A		; [0x50] = 0x80
   501            C                MOV		A,@0x01
   502            C                SUB		0x50,A		; [0x50] = [0x50] - 0x01
   503            C                MOV		A,STATUS
   504            C                XOR		A,@0x39	;; for non reset
   505            C                ;;XOR		A,@0x31
   506            C                CALL	INST_XOR_JUDGE
   507            C                BC		Z
   508            C                BC		N
   509            C                MOV		A,0x50
   510            C                XOR		A,@0x7F		; Check Result ?
   511            C                CALL	INST_XOR_JUDGE
   512            C            INST_SUB_A_K:		;-------Instruction Test => SUB A,k
   513            C                CALL	STATUS_CLEAR
   514            C                MOV		A,@0xFF		; 0xFF-0xFF
   515            C                SUB		A,@0xFF		; A = 0xFF - 0xFF
   516            C                JBS		C			; Check C = 1?
   517            C                JMP	INS_FAIL
   518            C                JBS		DC			; Check DC = 1?
   519            C                JMP	INS_FAIL
   520            C                JBS		Z			; Check Z = 1?
   521            C                JMP	INS_FAIL
   522            C                JBC		OV			; Check OV = 0?
   523            C                JMP	INS_FAIL
   524            C                JBC		N			; Check N = 0?
   525            C                JMP	INS_FAIL
   526            C                XOR		A,@0x00		; Check Result ?
   527            C                CALL	INST_XOR_JUDGE
   528            C                CALL	STATUS_CLEAR
   529            C                MOV		A,@0x7F		; 0x00-0x7F
   530            C                SUB		A,@0x00		; A = 0x00 - 0x7F
   531            C                JBC		C			; Check C = 0?
   532            C                JMP	INS_FAIL
   533            C                JBC		DC			; Check DC = 0?
   534            C                JMP	INS_FAIL
   535            C                JBC		Z			; Check Z = 0?
   536            C                JMP	INS_FAIL
   537            C                JBC		OV			; Check OV = 0?
   538            C                JMP	INS_FAIL
   539            C                JBS		N			; Check N = 1?
   540            C                JMP	INS_FAIL
   541            C                XOR		A,@0x81		; Check Result ?
   542            C                CALL	INST_XOR_JUDGE
   543            C                CALL	STATUS_CLEAR
   544            C                MOV		A,@0x01		; 0x80-0x01
   545            C                SUB		A,@0x80		; A = 0x80 - 0x01
   546            C                JBS		C			; Check C = 1?
   547            C                JMP	INS_FAIL
   548            C                JBC		DC			; Check DC = 0?
   549            C                JMP	INS_FAIL
   550            C                JBC		Z			; Check Z = 0?
   551            C                JMP	INS_FAIL
   552            C                JBS		OV			; Check OV = 1?
   553            C                JMP	INS_FAIL
   554            C                JBC		N			; Check N = 0?
   555            C                JMP	INS_FAIL
   556            C                XOR		A,@0x7F		; Check Result ?
   557            C                CALL	INST_XOR_JUDGE
   558            C            INST_SUBB_A_R:		;-------Instruction Test => SUBB A,R
   559            C                CALL	STATUS_CLEAR
   560            C                BC		C			; B = 1
   561            C                MOV		A,@0x00		;0x00-0xF
   562            C                MOV		0x50,A		; [0x50] = 0x00
   563            C                MOV		A,@0xFF		; A = 0x01
   564            C                SUBB	A,0x50		; A = [0x50] - A - B
   565            C                JBC		C			; Check C = 0?
   566            C                JMP	INS_FAIL
   567            C                JBC		DC			; Check DC = 0?
   568            C                JMP	INS_FAIL
   569            C                JBS		Z			; Check Z = 1?
   570            C                JMP	INS_FAIL
   571            C                JBC		OV			; Check OV = 0?
   572            C                JMP	INS_FAIL
   573            C                JBC		N			; Check N = 0?
   574            C                JMP	INS_FAIL
   575            C                XOR		A,@0x00		; Check Result ?
   576            C                CALL	INST_XOR_JUDGE	
   577            C                CALL	STATUS_CLEAR
   578            C                BC		C			; B = 1
   579            C                MOV		A,@0x00		; 0x00-0x7F
   580            C                MOV		0x50,A		; [0x50] = 0x00
   581            C                MOV		A,@0x7F		; A = 0x01
   582            C                SUBB	A,0x50		; A = [0x50] - A - B
   583            C                JBC		C			; Check C = 0?
   584            C                JMP	INS_FAIL
   585            C                JBC		DC			; Check DC = 0?
   586            C                JMP	INS_FAIL
   587            C                JBC		Z			; Check Z = 0?
   588            C                JMP	INS_FAIL
   589            C                JBC		OV			; Check OV = 0?
   590            C                JMP	INS_FAIL
   591            C                JBS		N			; Check N = 1?
   592            C                JMP	INS_FAIL
   593            C                XOR		A,@0x80		; Check Result ?
   594            C                CALL	INST_XOR_JUDGE
   595            C                CALL	STATUS_CLEAR
   596            C                BC		C			; B = 1
   597            C                MOV		A,@0x80		; 0x80-0x01
   598            C                MOV		0x50,A		; [0x50] = 0x80
   599            C                MOV		A,@0x01		; A = 0x01
   600            C                SUBB	A,0x50		; A = [0x50] - A - B
   601            C                JBS		C			; Check C = 1?
   602            C                JMP	INS_FAIL
   603            C                JBC		DC			; Check DC = 0?
   604            C                JMP	INS_FAIL
   605            C                JBC		Z			; Check Z = 0?
   606            C                JMP	INS_FAIL
   607            C                JBS		OV			; Check OV = 1?
   608            C                JMP	INS_FAIL
   609            C                JBC		N			; Check N = 0?
   610            C                JMP	INS_FAIL
   611            C                XOR		A,@0x7E		; Check Result ?
   612            C                CALL	INST_XOR_JUDGE
   613            C            INST_SUBB_R_A:      ;-------Instruction Test => SUBB R,A
   614            C                CALL	STATUS_CLEAR
   615            C                BC		C			; B = 1
   616            C                MOV		A,@0x00		; 0x00-0xFF
   617            C                MOV		0x50,A		; [0x50] = 0x00
   618            C                MOV		A,@0xFF
   619            C                SUBB	0x50,A		; [0x50] = 0x00 - 0xFF - B
   620            C                MOV		A,STATUS
   621            C                XOR		A,@0x1C		; Check Status ?
   622            C                ;;XOR		A,@0x14		; Check Status ?
   623            C                CALL	INST_XOR_JUDGE
   624            C                MOV		A,0x50
   625            C                XOR		A,@0x00		; Check Result ?
   626            C                CALL	INST_XOR_JUDGE
   627            C                CALL	STATUS_CLEAR
   628            C                BC		C			; B = 1
   629            C                MOV		A,@0x00		; 0x00-0x7F
   630            C                MOV		0x50,A		; [0x50] = 0x00
   631            C                MOV		A,@0x7F
   632            C                SUBB	0x50,A		; [0x50] = 0x00 - 0x7F - B
   633            C                MOV		A,STATUS
   634            C                XOR		A,@0x58		; Check Status ?
   635            C                ;;XOR		A,@0x50		; Check Status ?
   636            C                CALL	INST_XOR_JUDGE
   637            C                MOV		A,0x50
   638            C                XOR		A,@0x80		; Check Result ?
   639            C                CALL	INST_XOR_JUDGE
   640            C                CALL	STATUS_CLEAR
   641            C                BC		C			; B = 1
   642            C                MOV		A,@0x80		; ,0x80-0x01
   643            C                MOV		0x50,A		; [0x50] = 0x80
   644            C                MOV		A,@0x01
   645            C                SUBB	0x50,A		; [0x50] = 0x80 - 0x01 - B
   646            C                MOV		A,STATUS
   647            C                XOR		A,@0x39		; Check Status ?
   648            C                ;;XOR		A,@0x31		; Check Status ?
   649            C                CALL	INST_XOR_JUDGE
   650            C                MOV		A,0x50
   651            C                XOR		A,@0x7E		; Check Result ?
   652            C                CALL	INST_XOR_JUDGE
   653            C            INST_DECA:			;-------Instruction Test => DECA R
   654            C                MOV		A,@0x00
   655            C                MOV		STATUS,A
   656            C                MOV		A,@0x20		; 0x20-1
   657            C                MOV		0x50,A		; [0x50] = 0x20
   658            C                DECA	0x50		; A = [0x50] - 1
   659            C                JBS		C			; Check C = 1?	; Result is Positive
   660            C                JMP	INS_FAIL
   661            C                JBC		DC			; Check DC = 0?
   662            C                JMP	INS_FAIL
   663            C                JBC		Z			; Check Z = 0?
   664            C                JMP	INS_FAIL
   665            C                JBC		OV			; Check OV = 0?
   666            C                JMP	INS_FAIL
   667            C                JBC		N			; Check N = 0?
   668            C                JMP	INS_FAIL
   669            C                XOR		A,@0x1F		; Check Result ?
   670            C                JBS		Z			; Check Z = 1?
   671            C                JMP	INS_FAIL
   672            C                JBC		N			; Check N = 0?
   673            C                JMP	INS_FAIL
   674            C                MOV		A,@0x00
   675            C                MOV		STATUS,A
   676            C                MOV		A,@0x01		; 0x01-1
   677            C                MOV		0x50,A		; [0x50] = 0x01
   678            C                DECA	0x50		; A = [0x50] - 1
   679            C                JBS		C			; Check C = 1?	; Result is Positive
   680            C                JMP	INS_FAIL
   681            C                JBS		DC			; Check DC = 1?
   682            C                JMP	INS_FAIL
   683            C                JBS		Z			; Check Z = 1?
   684            C                JMP	INS_FAIL
   685            C                JBC		OV			; Check OV = 0?
   686            C                JMP	INS_FAIL
   687            C                JBC		N			; Check N = 0?
   688            C                JMP	INS_FAIL
   689            C                BC		Z
   690            C                XOR		A,@0x00		; Check Result ?
   691            C                JBS		Z			; Check Z = 1?
   692            C                JMP	INS_FAIL
   693            C                JBC		N			; Check N = 0?
   694            C                JMP	INS_FAIL
   695            C                MOV		A,@0x00
   696            C                MOV		STATUS,A
   697            C                MOV		A,@0x00		; 0x00-1
   698            C                MOV		0x50,A		; [0x50] = 0x00
   699            C                DECA	0x50		; A = [0x50] - 1
   700            C                JBC		C			; Check C = 0?
   701            C                JMP	INS_FAIL
   702            C                JBC		DC			; Check DC = 0?
   703            C                JMP	INS_FAIL
   704            C                JBC		Z			; Check Z = 0?
   705            C                JMP	INS_FAIL
   706            C                JBC		OV			; Check OV = 0?
   707            C                JMP	INS_FAIL
   708            C                JBS		N			; Check N = 1?
   709            C                JMP	INS_FAIL
   710            C                BC		Z
   711            C                BC		N
   712            C                XOR		A,@0xFF		; Check Result ?
   713            C                JBS		Z			; Check Z = 1?
   714            C                JMP	INS_FAIL
   715            C                JBC		N			; Check N = 0?
   716            C                JMP	INS_FAIL
   717            C                MOV		A,@0x00
   718            C                MOV		STATUS,A
   719            C                MOV		A,@0x80		; 0x80-1
   720            C                MOV		0x50,A		; [0x50] = 0x80
   721            C                DECA	0x50		; A = [0x50] - 1
   722            C                JBS		C			; Check C = 1?
   723            C                JMP	INS_FAIL
   724            C                JBC		DC			; Check DC = 0?
   725            C                JMP	INS_FAIL
   726            C                JBC		Z			; Check Z = 0?
   727            C                JMP	INS_FAIL
   728            C                JBS		OV			; Check OV = 1?
   729            C                JMP	INS_FAIL
   730            C                JBC		N			; Check N = 0?
   731            C                JMP	INS_FAIL
   732            C                BC		Z
   733            C                BC		N
   734            C                XOR		A,@0x7F		; Check Result ?
   735            C                JBS		Z			; Check Z = 1?
   736            C                JMP	INS_FAIL
   737            C                JBC		N			; Check N = 0?
   738            C                JMP	INS_FAIL
   739            C            INST_DEC:			;-------Instruction Test => DEC R
   740            C                MOV		A,@0x00
   741            C                MOV		STATUS,A
   742            C                MOV		A,@0x20		; 0x20-1
   743            C                MOV		0x50,A		; [0x50] = 0x20
   744            C                DEC		0x50		; [0x50] = [0x50] - 0x01
   745            C                MOV		A,STATUS
   746            C                XOR		A,@0x19		; Check Status ? for non rest
   747            C                ;;XOR		A,@0x11		; Check Status ?
   748            C                JBS		Z			; Check Z = 1?
   749            C                JMP	INS_FAIL
   750            C                JBC		N			; Check N = 0?
   751            C                JMP	INS_FAIL
   752            C                BC		Z
   753            C                MOV		A,0x50
   754            C                XOR		A,@0x1F		; Check Result ?
   755            C                JBS		Z			; Check Z = 1?
   756            C                JMP	INS_FAIL
   757            C                JBC		N			; Check N = 0?
   758            C                JMP	INS_FAIL
   759            C                MOV		A,@0x00
   760            C                MOV		STATUS,A
   761            C                MOV		A,@0x01		; 0x01-1
   762            C                MOV		0x50,A		; [0x50] = 0x01
   763            C                DEC		0x50		; [0x50] = [0x50] - 0x01
   764            C                MOV		A,STATUS
   765            C                XOR		A,@0x1F		; Check Status ? for non reset
   766            C                ;;XOR		A,@0x17		; Check Status ?
   767            C                JBS		Z			; Check Z = 1?
   768            C                JMP	INS_FAIL
   769            C                JBC		N			; Check N = 0?
   770            C                JMP	INS_FAIL
   771            C                BC		Z
   772            C                MOV		A,0x50
   773            C                XOR		A,@0x00		; Check Result ?
   774            C                JBS		Z			; Check Z = 1?
   775            C                JMP	INS_FAIL
   776            C                JBC		N			; Check N = 0?
   777            C                JMP	INS_FAIL
   778            C                MOV		A,@0x00
   779            C                MOV		STATUS,A
   780            C                MOV		A,@0x00		; 0x00-1
   781            C                MOV		0x50,A		; [0x50] = 0x00
   782            C                DEC		0x50		; [0x50] = [0x50] - 0x01
   783            C                MOV		A,STATUS
   784            C                XOR		A,@0x58		; Check Status ? for non reset
   785            C                ;;XOR		A,@0x50		; Check Status ?
   786            C                JBS		Z			; Check Z = 1?
   787            C                JMP	INS_FAIL
   788            C                JBC		N			; Check N = 0?
   789            C                JMP	INS_FAIL
   790            C                BC		Z
   791            C                MOV		A,0x50
   792            C                XOR		A,@0xFF		; Check Result ?
   793            C                JBS		Z			; Check Z = 1?
   794            C                JMP	INS_FAIL
   795            C                JBC		N			; Check N = 0?
   796            C                JMP	INS_FAIL
   797            C                MOV		A,@0x00
   798            C                MOV		STATUS,A
   799            C                MOV		A,@0x80		; 0x80-1
   800            C                MOV		0x50,A		; [0x50] = 0x80
   801            C                DEC		0x50		; [0x50] = [0x50] - 0x01
   802            C                MOV		A,STATUS
   803            C                XOR		A,@0x39		; Check Status ? for non reset
   804            C                ;;XOR		A,@0x31		; Check Status ?
   805            C                JBS		Z			; Check Z = 1?
   806            C                JMP	INS_FAIL
   807            C                JBC		N			; Check N = 0?
   808            C                JMP	INS_FAIL
   809            C                BC		Z
   810            C                MOV		A,0x50
   811            C                XOR		A,@0x7F		; Check Result ?
   812            C                JBS		Z			; Check Z = 1?
   813            C                JMP	INS_FAIL
   814            C                JBC		N			; Check N = 0?
   815            C                JMP	INS_FAIL
   816            C            INST_ADD_A_R:		;-------Instruction Test => ADD A,R
   817            C                CALL	STATUS_CLEAR	; 0x80+0x7F
   818            C                MOV		A,@0x80
   819            C                MOV		0x50,A		; [0x50] = 0x80
   820            C                MOV		A,@0x7F		; 
   821            C                ADD		A,0x50		; A = 0x7F + 0x80
   822            C                JBC		C			; Check C = 0?
   823            C                JMP	INS_FAIL
   824            C                JBC		DC			; Check DC = 0?
   825            C                JMP	INS_FAIL
   826            C                JBC		Z			; Check Z = 0?
   827            C                JMP	INS_FAIL
   828            C                JBC		OV			; Check OV = 0?
   829            C                JMP	INS_FAIL
   830            C                JBS		N			; Check N = 1?	; Result is Negative
   831            C                JMP	INS_FAIL
   832            C                BC		Z
   833            C                BC		N
   834            C                XOR		A,@0xFF		; Check Result ?
   835            C                JBS		Z			; Check Z = 1?
   836            C                JMP	INS_FAIL
   837            C                JBC		N			; Check N = 0?
   838            C                JMP	INS_FAIL
   839            C                CALL	STATUS_CLEAR	; 0xFF+0x01
   840            C                MOV		A,@0xFF
   841            C                MOV		0x50,A		; [0x50] = 0xFF
   842            C                MOV		A,@0x01		; 
   843            C                ADD		A,0x50		; A = 0x01 + 0xFF
   844            C                JBS		C			; Check C = 1?
   845            C                JMP	INS_FAIL
   846            C                JBS		DC			; Check DC = 1?
   847            C                JMP	INS_FAIL
   848            C                JBS		Z			; Check Z = 1?
   849            C                JMP	INS_FAIL
   850            C                JBC		OV			; Check OV = 0?
   851            C                JMP	INS_FAIL
   852            C                JBC		N			; Check N = 0?
   853            C                JMP	INS_FAIL
   854            C                BC		Z
   855            C                BC		N
   856            C                XOR		A,@0x00		; Check Result ?
   857            C                JBS		Z			; Check Z = 1?
   858            C                JMP	INS_FAIL
   859            C                JBC		N			; Check N = 0?
   860            C                JMP	INS_FAIL
   861            C                CALL	STATUS_CLEAR	; 0x7F+0x01
   862            C                MOV		A,@0x7F
   863            C                MOV		0x50,A		; [0x50] = 0x7F
   864            C                MOV		A,@0x01		; 
   865            C                ADD		A,0x50		; A = 0x01 + 0x7F
   866            C                JBC		C			; Check C = 0?
   867            C                JMP	INS_FAIL
   868            C                JBS		DC			; Check DC = 1?
   869            C                JMP	INS_FAIL
   870            C                JBC		Z			; Check Z = 0?
   871            C                JMP	INS_FAIL
   872            C                JBS		OV			; Check OV = 1?
   873            C                JMP	INS_FAIL
   874            C                JBS		N			; Check N = 1?
   875            C                JMP	INS_FAIL
   876            C                BC		Z
   877            C                BC		N
   878            C                XOR		A,@0x80		; Check Result ?
   879            C                JBS		Z			; Check Z = 1?
   880            C                JMP	INS_FAIL
   881            C                JBC		N			; Check N = 0?
   882            C                JMP	INS_FAIL
   883            C            INST_ADD_R_A:		;-------Instruction Test => ADD R,A
   884            C                CALL	STATUS_CLEAR	; 0x80+0x7F
   885            C                MOV		A,@0x80
   886            C                MOV		0x50,A		; [0x50] = 0x80
   887            C                MOV		A,@0x7F		; A = 0x7F
   888            C                ADD		0x50,A		; [0x50] = 0x80 + 0x7F
   889            C                MOV		A,STATUS
   890            C                XOR		A,@0x58		; Check Status ? for non reset
   891            C                ;;XOR		A,@0x50		; Check Status ?
   892            C                JBS		Z			; Check Z = 1?
   893            C                JMP	INS_FAIL
   894            C                JBC		N			; Check N = 0?
   895            C                JMP	INS_FAIL
   896            C                MOV		A,0x50
   897            C                XOR		A,@0xFF		; Check Result ?
   898            C                JBS		Z			; Check Z = 1?
   899            C                JMP	INS_FAIL
   900            C                JBC		N			; Check N = 0?
   901            C                JMP	INS_FAIL
   902            C                CALL	STATUS_CLEAR	; 0xFF+0x01
   903            C                MOV		A,@0xFF
   904            C                MOV		0x50,A		; [0x50] = 0xFF
   905            C                MOV		A,@0x01		; A = 0x01
   906            C                ADD		0x50,A		; [0x50] = 0xFF + 0x01
   907            C                MOV		A,STATUS
   908            C                XOR		A,@0x1F		; Check Status ? for non reset
   909            C                ;;XOR		A,@0x17		; Check Status ?
   910            C                JBS		Z			; Check Z = 1?
   911            C                JMP	INS_FAIL
   912            C                JBC		N			; Check N = 0?
   913            C                JMP	INS_FAIL
   914            C                MOV		A,0x50
   915            C                XOR		A,@0x00		; Check Result ?
   916            C                JBS		Z			; Check Z = 1?
   917            C                JMP	INS_FAIL
   918            C                JBC		N			; Check N = 0?
   919            C                JMP	INS_FAIL
   920            C                CALL	STATUS_CLEAR	;0x7F+0x01
   921            C                MOV		A,@0x7F
   922            C                MOV		0x50,A		; [0x50] = 0x7F
   923            C                MOV		A,@0x01		; A = 0x01
   924            C                ADD		0x50,A		; [0x50] = 0x7F + 0x01
   925            C                MOV		A,STATUS
   926            C                XOR		A,@0x7A		; Check Status ? for non reset
   927            C                ;;XOR		A,@0x72		; Check Status ?
   928            C                JBS		Z			; Check Z = 1?
   929            C                JMP	INS_FAIL
   930            C                JBC		N			; Check N = 0?
   931            C                JMP	INS_FAIL
   932            C                MOV		A,0x50
   933            C                XOR		A,@0x80		; Check Result ?
   934            C                JBS		Z			; Check Z = 1?
   935            C                JMP	INS_FAIL
   936            C                JBC		N			; Check N = 0?
   937            C                JMP	INS_FAIL
   938            C            INST_ADD_A_K:		;-------Instruction Test => ADD A,k
   939            C                CALL	STATUS_CLEAR
   940            C                MOV		A,@0x7F		;0x7F+0x01
   941            C                ADD		A,@0x01		; A = 0x01 + A
   942            C                JBC		C			; Check C = 0?
   943            C                JMP	INS_FAIL
   944            C                JBS		DC			; Check DC = 1?
   945            C                JMP	INS_FAIL
   946            C                JBC		Z			; Check Z = 0?
   947            C                JMP	INS_FAIL
   948            C                JBS		OV			; Check OV = 1?
   949            C                JMP	INS_FAIL
   950            C                JBS		N			; Check N = 1?
   951            C                JMP	INS_FAIL
   952            C                XOR		A,@0x80		; Check Result ?
   953            C                CALL	INST_XOR_JUDGE
   954            C                CALL	STATUS_CLEAR
   955            C                MOV		A,@0xFF		;0xFF+0x01
   956            C                ADD		A,@0x01		; A = 0x01 + A
   957            C                JBS		C			; Check C = 1?
   958            C                JMP	INS_FAIL
   959            C                JBS		DC			; Check DC = 1?
   960            C                JMP	INS_FAIL
   961            C                JBS		Z			; Check Z = 1?
   962            C                JMP	INS_FAIL
   963            C                JBC		OV			; Check OV = 0?
   964            C                JMP	INS_FAIL
   965            C                JBC		N			; Check N = 0?
   966            C                JMP	INS_FAIL
   967            C                XOR		A,@0x00		; Check Result ?
   968            C                CALL	INST_XOR_JUDGE
   969            C                CALL	STATUS_CLEAR
   970            C                MOV		A,@0x7F		; 0x80+0x7F
   971            C                ADD		A,@0x80		; A = 0x80 + A
   972            C                JBC		C			; Check C = 0?
   973            C                JMP	INS_FAIL
   974            C                JBC		DC			; Check DC = 0?
   975            C                JMP	INS_FAIL
   976            C                JBC		Z			; Check Z = 0?
   977            C                JMP	INS_FAIL
   978            C                JBC		OV			; Check OV = 0?
   979            C                JMP	INS_FAIL
   980            C                JBS		N			; Check N = 1?
   981            C                JMP	INS_FAIL
   982            C                XOR		A,@0xFF		; Check Result ?
   983            C                CALL	INST_XOR_JUDGE
   984            C            INST_ADC_A_R:		;-------Instruction Test => ADC A,R
   985            C                CALL	STATUS_CLEAR
   986            C                BS		C			; 0x7F+0x00
   987            C                MOV		A,@0x7F		
   988            C                MOV		0x50,A		; [0x50] = 0x7F
   989            C                MOV		A,@0x00		; A = 0x00
   990            C                ADC		A,0x50		; A = A + [0x50] + C
   991            C                JBC		C			; Check C = 0?
   992            C                JMP	INS_FAIL
   993            C                JBS		DC			; Check DC = 1?
   994            C                JMP	INS_FAIL
   995            C                JBC		Z			; Check Z = 0?
   996            C                JMP	INS_FAIL
   997            C                JBS		OV			; Check OV = 1?
   998            C                JMP	INS_FAIL
   999            C                JBS		N			; Check N = 1?
  1000            C                JMP	INS_FAIL
  1001            C                XOR		A,@0x80		; Check Result ?
  1002            C                CALL	INST_XOR_JUDGE
  1003            C                CALL	STATUS_CLEAR
  1004            C                BS		C			; 0x80+0x7F
  1005            C                MOV		A,@0x80
  1006            C                MOV		0x50,A		; [0x50] = 0x80
  1007            C                MOV		A,@0x7F		; A = 0x7F
  1008            C                ADC		A,0x50		; A = A + [0x50] + C
  1009            C                JBS		C			; Check C = 1?
  1010            C                JMP	INS_FAIL
  1011            C                JBS		DC			; Check DC = 1?
  1012            C                JMP	INS_FAIL
  1013            C                JBS		Z			; Check Z = 1?
  1014            C                JMP	INS_FAIL
  1015            C                JBC		OV			; Check OV = 0?
  1016            C                JMP	INS_FAIL
  1017            C                JBC		N			; Check N = 0?
  1018            C                JMP	INS_FAIL
  1019            C                XOR		A,@0x00		; Check Result ?
  1020            C                CALL	INST_XOR_JUDGE
  1021            C            INST_ADC_R_A:		;-------Instruction Test => ADC R,A
  1022            C                CALL	STATUS_CLEAR
  1023            C                BS		C			;0x7F+0x00
  1024            C                MOV		A,@0x7F
  1025            C                MOV		0x50,A		; [0x50] = 0x7F
  1026            C                MOV		A,@0x00		; A = 0x00
  1027            C                BC		Z
  1028            C                ADC		0x50,A		; TMP1 = A + [0x50] + C
  1029            C                MOV		A,STATUS
  1030            C                XOR		A,@0x7A		; Check Status ?
  1031            C                ;;XOR		A,@0x72		; Check Status ?
  1032            C                CALL	INST_XOR_JUDGE
  1033            C                MOV		A,0x50
  1034            C                XOR		A,@0x80		; Check Result ?
  1035            C                CALL	INST_XOR_JUDGE
  1036            C                CALL	STATUS_CLEAR
  1037            C                BS		C			;0x80+0x7F
  1038            C                MOV		A,@0x80
  1039            C                MOV		0x50,A		; [0x50] = 0x80
  1040            C                MOV		A,@0x7F		; A = 0x7F
  1041            C                BC		Z
  1042            C                ADC		0x50,A		; TMP1 = A + [0x50] + C
  1043            C                MOV		A,STATUS
  1044            C                XOR		A,@0x1F		; Check Status ?
  1045            C                ;;XOR		A,@0x17		; Check Status ?
  1046            C                CALL	INST_XOR_JUDGE
  1047            C                MOV		A,0x50
  1048            C                XOR		A,@0x00		; Check Result ?
  1049            C                CALL	INST_XOR_JUDGE
  1050            C            INST_INCA:			;-------Instruction Test => INCA R
  1051            C                CALL	STATUS_CLEAR	; 0x7F+0x01
  1052            C                MOV		A,@0x7F
  1053            C                MOV		0x50,A		; [0x50] = 0x7F
  1054            C                INCA	0x50		; A = [0x50] +1		
  1055            C                JBC		C			; Check C = 0?
  1056            C                JMP	INS_FAIL
  1057            C                JBS		DC			; Check DC = 1?
  1058            C                JMP	INS_FAIL
  1059            C                JBC		Z			; Check Z = 0?
  1060            C                JMP	INS_FAIL
  1061            C                JBS		OV			; Check OV = 1?
  1062            C                JMP	INS_FAIL
  1063            C                JBS		N			; Check N = 1?
  1064            C                JMP	INS_FAIL
  1065            C                BC		Z
  1066            C                BC		N
  1067            C                XOR		A,@0x80		; Check Result ?
  1068            C                JBS		Z			; Check Z = 1?
  1069            C                JMP	INS_FAIL
  1070            C                JBC		N			; Check N = 0?
  1071            C                JMP	INS_FAIL
  1072            C                CALL	STATUS_CLEAR	; 0xFF+0x01
  1073            C                MOV		A,@0xFF
  1074            C                MOV		0x50,A		; [0x50] = 0xFF
  1075            C                INCA	0x50		; A = [0x50] +1		
  1076            C                JBS		C			; Check C = 1?
  1077            C                JMP	INS_FAIL
  1078            C                JBS		DC			; Check DC = 1?
  1079            C                JMP	INS_FAIL
  1080            C                JBS		Z			; Check Z = 1?
  1081            C                JMP	INS_FAIL
  1082            C                JBC		OV			; Check OV = 0?
  1083            C                JMP	INS_FAIL
  1084            C                JBC		N			; Check N = 0?
  1085            C                JMP	INS_FAIL
  1086            C                BC		Z
  1087            C                BC		N
  1088            C                XOR		A,@0x00		; Check Result ?
  1089            C                JBS		Z			; Check Z = 1?
  1090            C                JMP	INS_FAIL
  1091            C                JBC		N			; Check N = 0?
  1092            C                JMP	INS_FAIL
  1093            C            INST_INC:			;-------Instruction Test => INC R
  1094            C                CALL 	STATUS_CLEAR	; 0x7F+0x01
  1095            C                MOV		A,@0x7F
  1096            C                MOV		0x50,A		; [0x50] = 0x7F
  1097            C                INC		0x50		; [0x50] = [0x50] + 0x01
  1098            C                MOV		A,STATUS
  1099            C                XOR		A,@0x7A		; Check Status ?
  1100            C                ;;XOR		A,@0x72		; Check Status ?
  1101            C                JBS		Z			; Check Z = 1?
  1102            C                JMP	INS_FAIL
  1103            C                JBC		N			; Check N = 0?
  1104            C                JMP	INS_FAIL
  1105            C                MOV		A,0x50
  1106            C                XOR		A,@0x80		; Check Result ?
  1107            C                JBS		Z			; Check Z = 1?
  1108            C                JMP	INS_FAIL
  1109            C                JBC		N			; Check N = 0?
  1110            C                JMP	INS_FAIL
  1111            C                CALL	STATUS_CLEAR	; 0xFF+0x01
  1112            C                MOV		A,@0xFF
  1113            C                MOV		0x50,A		; [0x50] = 0x7F
  1114            C                INC		0x50		; [0x50] = [0x50] + 0x01
  1115            C                MOV		A,STATUS
  1116            C                XOR		A,@0x1F		; Check Status ?
  1117            C                ;;XOR		A,@0x17		; Check Status ?
  1118            C                JBS		Z			; Check Z = 1?
  1119            C                JMP	INS_FAIL
  1120            C                JBC		N			; Check N = 0?
  1121            C                JMP	INS_FAIL
  1122            C                MOV		A,0x50
  1123            C                XOR		A,@0x00		; Check Result ?
  1124            C                JBS		Z			; Check Z = 1?
  1125            C                JMP	INS_FAIL
  1126            C                JBC		N			; Check N = 0?
  1127            C                JMP	INS_FAIL
  1128            C            INST_NEG_R:			;-------Instruction Test => NEG R
  1129            C                CALL	STATUS_CLEAR
  1130            C                MOV		A,@0x00		; 0x00
  1131            C                MOV		0x50,A		; [0x50] = 0x00
  1132            C                NEG		0x50
  1133            C                MOV		A,STATUS
  1134            C                XOR		A,@0x1F		; Check Status ?
  1135            C                ;;XOR		A,@0x17		; Check Status ?
  1136            C                CALL	INST_XOR_JUDGE
  1137            C                MOV		A,0x50
  1138            C                XOR		A,@0x00		; Check Result ?
  1139            C                CALL	INST_XOR_JUDGE
  1140            C                CALL	STATUS_CLEAR
  1141            C                MOV		A,@0x01		; 0x01
  1142            C                MOV		0x50,A		; [0x50] = 0x01
  1143            C                NEG		0x50
  1144            C                MOV		A,STATUS
  1145            C                XOR		A,@0x58		; Check Status ?
  1146            C                ;;XOR		A,@0x50		; Check Status ?
  1147            C                CALL	INST_XOR_JUDGE
  1148            C                MOV		A,0x50
  1149            C                XOR		A,@0xFF		; Check Result ?
  1150            C                CALL	INST_XOR_JUDGE
  1151            C                CALL	STATUS_CLEAR
  1152            C                MOV		A,@0x80		; 0x80
  1153            C                MOV		0x50,A		; [0x50] = 0x80
  1154            C                NEG		0x50
  1155            C                MOV		A,STATUS
  1156            C                XOR		A,@0x7A		; Check Status ?
  1157            C                ;;XOR		A,@0x72		; Check Status ?
  1158            C                CALL	INST_XOR_JUDGE
  1159            C                MOV		A,0x50
  1160            C                XOR		A,@0x80		; Check Result ?
  1161            C                CALL	INST_XOR_JUDGE
  1162            C            ENDM
  1163            C        
  1164            C        SDxxx_EFT_INST_LOGIC_I MACRO
  1165            C            INST_BTG:			;-------Instruction Test => BTG R,b	
  1166            C                CALL	STATUS_CLEAR
  1167            C                MOV		A,@0xFF
  1168            C                MOV		RSR,A		; Start Address
  1169            C                BTG		RSR
  1170            C                MOV		A,RSR
  1171            C                XOR		A,@0xFE		; Check Result ?
  1172            C                CALL	INST_XOR_JUDGE
  1173            C            INST_OR_A_R:		;-------Instruction Test => OR A,R
  1174            C                MOV		A,@0x00
  1175            C                MOV		STATUS,A
  1176            C                MOV		A,@0x00
  1177            C                MOV		0x50,A		; [0x50] = 0x00
  1178            C                MOV		A,@0x00
  1179            C                BC		Z
  1180            C                OR		A,0x50		; A = A | [0x50]
  1181            C                JBC		C			; Check C = 0?
  1182            C                JMP	INS_FAIL
  1183            C                JBC		DC			; Check DC = 0?
  1184            C                JMP	INS_FAIL
  1185            C                JBS		Z			; Check Z = 1?
  1186            C                JMP	INS_FAIL
  1187            C                JBC		OV			; Check OV = 0?
  1188            C                JMP	INS_FAIL
  1189            C                JBC		N			; Check N = 0?
  1190            C                JMP	INS_FAIL
  1191            C                BC		Z
  1192            C                XOR		A,@0x00		; Check Result ?
  1193            C                JBS		Z			; Check Z = 1?
  1194            C                JMP	INS_FAIL
  1195            C                JBC		N			; Check N = 0?
  1196            C                JMP	INS_FAIL
  1197            C                MOV		A,@0x00
  1198            C                MOV		STATUS,A
  1199            C                MOV		A,@0x55
  1200            C                MOV		0x50,A		; [0x50] = 0x55
  1201            C                MOV		A,@0xAA
  1202            C                BC		Z
  1203            C                OR		A,0x50		; A = A | [0x50]
  1204            C                JBC		C			; Check C = 0?
  1205            C                JMP	INS_FAIL
  1206            C                JBC		DC			; Check DC = 0?
  1207            C                JMP	INS_FAIL
  1208            C                JBC		Z			; Check Z = 0?
  1209            C                JMP	INS_FAIL
  1210            C                JBC		OV			; Check OV = 0?
  1211            C                JMP	INS_FAIL
  1212            C                JBS		N			; Check N = 1?
  1213            C                JMP	INS_FAIL
  1214            C                BC		Z
  1215            C                XOR		A,@0xFF		; Check Result ?
  1216            C                JBS		Z			; Check Z = 1?
  1217            C                JMP	INS_FAIL
  1218            C                JBC		N			; Check N = 0?
  1219            C                JMP	INS_FAIL
  1220            C        
  1221            C            INST_OR_R_A:		;-------Instruction Test => OR R,A
  1222            C                MOV		A,@0x00
  1223            C                MOV		STATUS,A
  1224            C                MOV		A,@0x00
  1225            C                MOV		0x50,A		; [0x50] = 0x00
  1226            C                MOV		A,@0x00		; A = 0x00
  1227            C                BC		Z
  1228            C                OR		0x50,A		; [0x50] = A | [0x50]
  1229            C                MOV		A,STATUS
  1230            C                XOR		A,@0x1C		; Check Status ? for non reset
  1231            C                ;;XOR		A,@0x14		; Check Status ?
  1232            C                JBS		Z			; Check Z = 1?
  1233            C                JMP	INS_FAIL
  1234            C                JBC		N			; Check N = 0?
  1235            C                JMP	INS_FAIL
  1236            C                MOV		A,0x50		; A = Result[0x50]
  1237            C                BC		Z
  1238            C                BC		N
  1239            C                XOR		A,@0x00		; Check Result ?
  1240            C                JBS		Z			; Check Z = 1?
  1241            C                JMP	INS_FAIL
  1242            C                JBC		N			; Check N = 0?
  1243            C                JMP	INS_FAIL
  1244            C                MOV		A,@0x00
  1245            C                MOV		STATUS,A
  1246            C                MOV		A,@0x55
  1247            C                MOV		0x50,A		; [0x50] = 0x55
  1248            C                MOV		A,@0xAA		; A = 0xAA
  1249            C                OR		0x50,A		; [0x50] = 0xAA | 0x55
  1250            C                MOV		A,STATUS
  1251            C                XOR		A,@0x58		; Check Status ? for non reset
  1252            C                ;;XOR		A,@0x50		; Check Status ?
  1253            C                JBS		Z			; Check Z = 1?
  1254            C                JMP	INS_FAIL
  1255            C                JBC		N			; Check N = 0?
  1256            C                JMP	INS_FAIL
  1257            C                MOV		A,0x50
  1258            C                BC		Z
  1259            C                BC		N
  1260            C                XOR		A,@0xFF		; Check Result ?
  1261            C                JBS		Z			; Check Z = 1?
  1262            C                JMP	INS_FAIL
  1263            C                JBC		N			; Check N = 0?
  1264            C                JMP	INS_FAIL
  1265            C        
  1266            C            INST_AND_A_R:		;-------Instruction Test => AND A,R
  1267            C                CALL	STATUS_CLEAR
  1268            C                MOV		A,@0x55
  1269            C                MOV		0x50,A		; [0x50] = 0x55
  1270            C                MOV		A,@0xAA
  1271            C                AND		A,0x50		; A = 0xAA & 0x55
  1272            C                JBC		C			; Check C = 0?
  1273            C                JMP	INS_FAIL
  1274            C                JBC		DC			; Check DC = 0?
  1275            C                JMP	INS_FAIL
  1276            C                JBS		Z			; Check Z = 1?
  1277            C                JMP	INS_FAIL
  1278            C                JBC		OV			; Check OV = 0?
  1279            C                JMP	INS_FAIL
  1280            C                JBC		N			; Check N = 0?
  1281            C                JMP	INS_FAIL
  1282            C                XOR		A,@0x00		; Check Result ?
  1283            C                JBS		Z			; Check Z = 1?
  1284            C                JMP	INS_FAIL
  1285            C                JBC		N			; Check N = 0?
  1286            C                JMP	INS_FAIL
  1287            C                CALL	STATUS_CLEAR
  1288            C                MOV		A,@0xF5
  1289            C                MOV		0x50,A		; [0x50] = 0xF5
  1290            C                MOV		A,@0xFA
  1291            C                AND		A,0x50		; A = 0xFA & 0xF5
  1292            C                JBC		C			; Check C = 0?
  1293            C                JMP	INS_FAIL
  1294            C                JBC		DC			; Check DC = 0?
  1295            C                JMP	INS_FAIL
  1296            C                JBC		Z			; Check Z = 0?
  1297            C                JMP	INS_FAIL
  1298            C                JBC		OV			; Check OV = 0?
  1299            C                JMP	INS_FAIL
  1300            C                JBS		N			; Check N = 1?
  1301            C                JMP	INS_FAIL
  1302            C                XOR		A,@0xF0		; Check Result ?
  1303            C                JBS		Z			; Check Z = 1?
  1304            C                JMP	INS_FAIL
  1305            C                JBC		N			; Check N = 0?
  1306            C                JMP	INS_FAIL
  1307            C            INST_AND_R_A:		;-------Instruction Test => AND R,A
  1308            C                CALL	STATUS_CLEAR
  1309            C                MOV		A,@0x55
  1310            C                MOV		0x50,A		; [0x50] = 0x55
  1311            C                MOV		A,@0xAA
  1312            C                AND		0x50,A		; [0x50] = 0xAA & 0x55
  1313            C                MOV		A,STATUS
  1314            C                XOR		A,@0x1C		; Check Status ? for non reset
  1315            C                ;;XOR		A,@0x14		; Check Status ?
  1316            C                JBS		Z			; Check Z = 1?
  1317            C                JMP	INS_FAIL
  1318            C                JBC		N			; Check N = 0?
  1319            C                JMP	INS_FAIL
  1320            C                BC		Z
  1321            C                MOV		A,0x50
  1322            C                BC		Z
  1323            C                XOR		A,@0x00		; Check Result ?
  1324            C                JBS		Z			; Check Z = 1?
  1325            C                JMP	INS_FAIL
  1326            C                JBC		N			; Check N = 0?
  1327            C                JMP	INS_FAIL
  1328            C                CALL	STATUS_CLEAR
  1329            C                MOV		A,@0xF5
  1330            C                MOV		0x50,A		; [0x50] = 0xF5
  1331            C                MOV		A,@0xFA
  1332            C                AND		0x50,A		; [0x50] = 0xFA & 0xF5
  1333            C                MOV		A,STATUS
  1334            C                XOR		A,@0x58		; Check Status ? for non reset
  1335            C                ;;XOR		A,@0x50		; Check Status ?
  1336            C                JBS		Z			; Check Z = 1?
  1337            C                JMP	INS_FAIL
  1338            C                JBC		N			; Check N = 0?
  1339            C                JMP	INS_FAIL
  1340            C                BC		Z
  1341            C                MOV		A,0x50
  1342            C                BC		Z
  1343            C                XOR		A,@0xF0		; Check Result ?
  1344            C                JBS		Z			; Check Z = 1?
  1345            C                JMP	INS_FAIL
  1346            C                JBC		N			; Check N = 0?
  1347            C                JMP	INS_FAIL
  1348            C            INST_AND_A_K:		;-------Instruction Test => AND A,k
  1349            C                CALL	STATUS_CLEAR
  1350            C                MOV		A,@0xAA
  1351            C                AND		A,@0x55		; A = 0xAA & 0x55
  1352            C                JBC		C			; Check C = 0?
  1353            C                JMP	INS_FAIL
  1354            C                JBC		DC			; Check DC = 0?
  1355            C                JMP	INS_FAIL
  1356            C                JBS		Z			; Check Z = 1?
  1357            C                JMP	INS_FAIL
  1358            C                JBC		OV			; Check OV = 0?
  1359            C                JMP	INS_FAIL
  1360            C                JBC		N			; Check N = 0?
  1361            C                JMP	INS_FAIL
  1362            C                XOR		A,@0x00		; Check Result ?
  1363            C                JBS		Z			; Check Z = 1?
  1364            C                JMP	INS_FAIL
  1365            C                JBC		N			; Check N = 0?
  1366            C                JMP	INS_FAIL
  1367            C                CALL	STATUS_CLEAR
  1368            C                MOV		A,@0xAA
  1369            C                AND		A,@0xFF		; A = A & 0xFF
  1370            C                JBC		C			; Check C = 0?
  1371            C                JMP	INS_FAIL
  1372            C                JBC		DC			; Check DC = 0?
  1373            C                JMP	INS_FAIL
  1374            C                JBC		Z			; Check Z = 0?
  1375            C                JMP	INS_FAIL
  1376            C                JBC		OV			; Check OV = 0?
  1377            C                JMP	INS_FAIL
  1378            C                JBS		N			; Check N = 1?
  1379            C                JMP	INS_FAIL
  1380            C                XOR		A,@0xAA		; Check Result ?
  1381            C                CALL	INST_XOR_JUDGE
  1382            C        
  1383            C            INST_COMA:			;-------Instruction Test => COMA R
  1384            C                CALL	STATUS_CLEAR
  1385            C                MOV		A,@0xFF
  1386            C                MOV		0x50,A		; [0x50] = 0xFF
  1387            C                COMA	0x50		; A = /R
  1388            C                JBC		C			; Check C = 0?
  1389            C                JMP	INS_FAIL
  1390            C                JBC		DC			; Check DC = 0?
  1391            C                JMP	INS_FAIL
  1392            C                JBS		Z			; Check Z = 1?
  1393            C                JMP	INS_FAIL
  1394            C                JBC		OV			; Check OV = 0?
  1395            C                JMP	INS_FAIL
  1396            C                JBC		N			; Check N = 0?
  1397            C                JMP	INS_FAIL
  1398            C                XOR		A,@0x00		; Check Result ?
  1399            C                JBS		Z			; Check Z = 1?
  1400            C                JMP	INS_FAIL
  1401            C                JBC		N			; Check N = 0?
  1402            C                JMP	INS_FAIL	
  1403            C                CALL	STATUS_CLEAR
  1404            C                MOV		A,@0x05
  1405            C                MOV		0x50,A		; [0x50] = 0x05
  1406            C                COMA	0x50		; A = /R
  1407            C                JBC		C			; Check C = 0?
  1408            C                JMP	INS_FAIL
  1409            C                JBC		DC			; Check DC = 0?
  1410            C                JMP	INS_FAIL
  1411            C                JBC		Z			; Check Z = 0?
  1412            C                JMP	INS_FAIL
  1413            C                JBC		OV			; Check OV = 0?
  1414            C                JMP	INS_FAIL
  1415            C                JBS		N			; Check N = 1?
  1416            C                JMP	INS_FAIL
  1417            C                XOR		A,@0xFA		; Check Result ?
  1418            C                JBS		Z			; Check Z = 1?
  1419            C                JMP	INS_FAIL
  1420            C                JBC		N			; Check N = 0?
  1421            C                JMP	INS_FAIL
  1422            C            INST_COM:			;-------Instruction Test => COM R
  1423            C                CALL	STATUS_CLEAR
  1424            C                MOV		A,@0xFF
  1425            C                MOV		0x50,A		; [0x50] = 0xFF
  1426            C                COM		0x50		; [0x50] = /[0x50]
  1427            C                MOV		A,STATUS
  1428            C                XOR		A,@0x1C		; Check Status ?
  1429            C                ;;XOR		A,@0x14		; Check Status ?
  1430            C                JBS		Z			; Check Z = 1?
  1431            C                JMP	INS_FAIL
  1432            C                JBC		N			; Check N = 0?
  1433            C                JMP	INS_FAIL
  1434            C                BC		Z
  1435            C                BC		N
  1436            C                MOV		A,0x50
  1437            C                XOR		A,@0x00		; Check Result ?
  1438            C                JBS		Z			; Check Z = 1?
  1439            C                JMP	INS_FAIL
  1440            C                JBC		N			; Check N = 0?
  1441            C                JMP	INS_FAIL
  1442            C                CALL	STATUS_CLEAR
  1443            C                MOV		A,@0x00
  1444            C                MOV		0x50,A		; [0x50] = 0xFF
  1445            C                COM		0x50		; [0x50] = /[0x50]
  1446            C                MOV		A,STATUS
  1447            C                XOR		A,@0x58		; Check Status ?
  1448            C                ;;XOR		A,@0x50		; Check Status ?
  1449            C                JBS		Z			; Check Z = 1?
  1450            C                JMP	INS_FAIL
  1451            C                JBC		N			; Check N = 0?
  1452            C                JMP	INS_FAIL
  1453            C                BC		Z
  1454            C                BC		N
  1455            C                MOV		A,0x50
  1456            C                XOR		A,@0xFF		; Check Result ?
  1457            C                JBS		Z			; Check Z = 1?
  1458            C                JMP	INS_FAIL
  1459            C                JBC		N			; Check N = 0?
  1460            C                JMP	INS_FAIL
  1461            C            INST_OR_A_K:		;-------Instruction Test => OR A,k
  1462            C                CALL	STATUS_CLEAR
  1463            C                MOV		A,@0xA5
  1464            C                OR		A,@0x5A		; A = 0xA5 | 0x5A
  1465            C                XOR		A,@0xFF		; Check Result ?
  1466            C                CALL	INST_XOR_JUDGE
  1467            C            ENDM
  1468            C        
  1469            C        SDxxx_EFT_INST_LOGIC_II MACRO
  1470            C            INST_RR_R:			;-------Instruction Test => RR R
  1471            C                CALL	STATUS_CLEAR
  1472            C                MOV		A,@0x55
  1473            C                MOV		0x50,A		; [0x50] = 0x55
  1474            C                RR		0x50		; [0x50] = [0x50] >> 1
  1475            C                MOV		A,STATUS
  1476            C                XOR		A,@0x58		; Check Status ?
  1477            C                ;;XOR		A,@0x50		; Check Status ?
  1478            C                CALL	INST_XOR_JUDGE
  1479            C                MOV		A,0x50
  1480            C                XOR		A,@0xAA		; Check Result ?
  1481            C                CALL	INST_XOR_JUDGE
  1482            C        
  1483            C            INST_RRA_R:			;-------Instruction Test => RRA R
  1484            C                CALL 	STATUS_CLEAR
  1485            C                MOV		A,@0x55
  1486            C                MOV		0x50,A		; [0x50] = 0x55
  1487            C                RRA		0x50		; A = [0x50] >> 1
  1488            C                JBC		C			; Check C = 0?
  1489            C                JMP	INS_FAIL
  1490            C                JBC		DC			; Check DC = 0?
  1491            C                JMP	INS_FAIL
  1492            C                JBC		Z			; Check Z = 0?
  1493            C                JMP	INS_FAIL
  1494            C                JBC		OV			; Check OV = 0?
  1495            C                JMP	INS_FAIL
  1496            C                JBS		N			; Check N = 1?
  1497            C                JMP	INS_FAIL
  1498            C                XOR		A,@0xAA		; Check Result ?
  1499            C                CALL	INST_XOR_JUDGE
  1500            C        
  1501            C            INST_RRCA_R:		;-------Instruction Test => RRCA R
  1502            C                CALL	STATUS_CLEAR
  1503            C                BS		C
  1504            C                MOV		A,@0xAA
  1505            C                MOV		0x50,A		; [0x50] = 0xAA
  1506            C                RRCA	0x50		; A = [0x50] >> 1
  1507            C                JBC		C			; Check C = 0?
  1508            C                JMP	INS_FAIL
  1509            C                JBC		DC			; Check DC = 0?
  1510            C                JMP	INS_FAIL
  1511            C                JBC		Z			; Check Z = 0?
  1512            C                JMP	INS_FAIL
  1513            C                JBC		OV			; Check OV = 0?
  1514            C                JMP	INS_FAIL
  1515            C                JBS		N			; Check N = 1?
  1516            C                JMP	INS_FAIL
  1517            C                XOR		A,@0xD5		; Check Result ?
  1518            C                CALL	INST_XOR_JUDGE
  1519            C                CALL	STATUS_CLEAR
  1520            C                MOV		A,@0x55
  1521            C                MOV		0x50,A		; [0x50] = 0x55
  1522            C                RRCA	0x50		; A = [0x50] >> 1
  1523            C                JBS		C			; Check C = 1?
  1524            C                JMP	INS_FAIL
  1525            C                JBC		DC			; Check DC = 0?
  1526            C                JMP	INS_FAIL
  1527            C                JBC		Z			; Check Z = 0?
  1528            C                JMP	INS_FAIL
  1529            C                JBC		OV			; Check OV = 0?
  1530            C                JMP	INS_FAIL
  1531            C                JBC		N			; Check N = 0?
  1532            C                JMP	INS_FAIL
  1533            C                XOR		A,@0x2A		; Check Result ?
  1534            C                CALL	INST_XOR_JUDGE
  1535            C            INST_RRC_R:			;-------Instruction Test => RRC R
  1536            C                CALL	STATUS_CLEAR
  1537            C                BS		C
  1538            C                MOV		A,@0xAA
  1539            C                MOV		0x50,A		; [0x50] = 0xAA
  1540            C                BC		Z
  1541            C                RRC		0x50		; [0x50] = [0x50] >> 1
  1542            C                MOV		A,STATUS
  1543            C                XOR		A,@0x58		; Check Status ?
  1544            C                ;;XOR		A,@0x50		; Check Status ?
  1545            C                CALL	INST_XOR_JUDGE
  1546            C                MOV		A,0x50
  1547            C                XOR		A,@0xD5		; Check Result ?
  1548            C                CALL	INST_XOR_JUDGE
  1549            C                CALL	STATUS_CLEAR
  1550            C                MOV		A,@0x55
  1551            C                MOV		0x50,A		; [0x50] = 0x55
  1552            C                BC		Z
  1553            C                RRC		0x50		; [0x50] = [0x50] >> 1
  1554            C                MOV		A,STATUS
  1555            C                XOR		A,@0x19		; Check Status ?
  1556            C                ;;XOR		A,@0x11		; Check Status ?
  1557            C                JBS		Z			; Check Z = 1?
  1558            C                JMP	INS_FAIL
  1559            C                JBC		N			; Check N = 0?
  1560            C                JMP	INS_FAIL
  1561            C                MOV		A,0x50
  1562            C                XOR		A,@0x2A		; Check Result ?
  1563            C                CALL	INST_XOR_JUDGE
  1564            C            INST_RLCA_R:		;-------Instruction Test => RLCA R
  1565            C                CALL STATUS_CLEAR
  1566            C                BS		C
  1567            C                MOV		A,@0x55
  1568            C                MOV		0x50,A		; [0x50] = 0x55
  1569            C                RLCA	0x50		; A = [0x50] << 1
  1570            C                JBC		C			; Check C = 0?
  1571            C                JMP	INS_FAIL
  1572            C                JBC		DC			; Check DC = 0?
  1573            C                JMP	INS_FAIL
  1574            C                JBC		Z			; Check Z = 0?
  1575            C                JMP	INS_FAIL
  1576            C                JBC		OV			; Check OV = 0?
  1577            C                JMP	INS_FAIL
  1578            C                JBS		N			; Check N = 1?
  1579            C                JMP	INS_FAIL
  1580            C                XOR		A,@0xAB		; Check Result ?
  1581            C                CALL	INST_XOR_JUDGE
  1582            C                CALL	STATUS_CLEAR
  1583            C                MOV		A,@0xAA
  1584            C                MOV		0x50,A		; [0x50] = 0xAA
  1585            C                RLCA	0x50		; A = [0x50] << 1
  1586            C                JBS		C			; Check C = 1?
  1587            C                JMP	INS_FAIL
  1588            C                JBC		DC			; Check DC = 0?
  1589            C                JMP	INS_FAIL
  1590            C                JBC		Z			; Check Z = 0?
  1591            C                JMP	INS_FAIL
  1592            C                JBC		OV			; Check OV = 0?
  1593            C                JMP	INS_FAIL
  1594            C                JBC		N			; Check N = 0?
  1595            C                JMP	INS_FAIL
  1596            C                XOR		A,@0x54		; Check Result ?
  1597            C                CALL	INST_XOR_JUDGE
  1598            C            INST_RLC_R:			;-------Instruction Test => RLC R
  1599            C                CALL	STATUS_CLEAR
  1600            C                BS		C
  1601            C                MOV		A,@0x55
  1602            C                MOV		0x50,A		; [0x50] = 0x55
  1603            C                RLC		0x50		; [0x50] = [0x50] << 1
  1604            C                MOV		A,STATUS
  1605            C                XOR		A,@0x58		; Check Status ?
  1606            C                ;;XOR		A,@0x50		; Check Status ?
  1607            C                CALL	INST_XOR_JUDGE
  1608            C                MOV		A,0x50
  1609            C                XOR		A,@0xAB		; Check Result ?
  1610            C                CALL	INST_XOR_JUDGE
  1611            C                CALL	STATUS_CLEAR
  1612            C                MOV		A,@0xAA
  1613            C                MOV		0x50,A		; [0x50] = 0xAA
  1614            C                RLC		0x50		; [0x50] = [0x50] << 1
  1615            C                MOV		A,STATUS
  1616            C                XOR		A,@0x19		; Check Status ?
  1617            C                ;;XOR		A,@0x11		; Check Status ?
  1618            C                CALL	INST_XOR_JUDGE
  1619            C                MOV		A,0x50
  1620            C                XOR		A,@0x54		; Check Result ?
  1621            C                CALL	INST_XOR_JUDGE
  1622            C        
  1623            C            INST_RLA_A:			;-------Instruction Test => RLA R
  1624            C                CALL	STATUS_CLEAR
  1625            C                MOV		A,@0x5A
  1626            C                MOV		0x50,A		; [0x50] = 0x5A
  1627            C                RLA		0x50		; A = [0x50] << 1
  1628            C                JBC		C			; Check C = 0?
  1629            C                JMP	INS_FAIL
  1630            C                JBC		DC			; Check DC = 0?
  1631            C                JMP	INS_FAIL
  1632            C                JBC		Z			; Check Z = 0?
  1633            C                JMP	INS_FAIL
  1634            C                JBC		OV			; Check OV = 0?
  1635            C                JMP	INS_FAIL
  1636            C                JBS		N			; Check N = 1?
  1637            C                JMP	INS_FAIL
  1638            C                XOR		A,@0xB4		; Check Result ?
  1639            C                CALL	INST_XOR_JUDGE
  1640            C        
  1641            C            INST_RL_R:			;-------Instruction Test => RL R
  1642            C                CALL	STATUS_CLEAR
  1643            C                MOV		A,@0x5A
  1644            C                MOV		0x50,A		; [0x50] = 0xA5
  1645            C                RL		0x50		; [0x50] = [0x50] << 1
  1646            C                MOV		A,STATUS
  1647            C                XOR		A,@0x58		; Check Status ?
  1648            C                ;;XOR		A,@0x50		; Check Status ?
  1649            C                JBS		Z			; Check Z = 1?
  1650            C                JMP	INS_FAIL
  1651            C                JBC		N			; Check N = 0?
  1652            C                JMP	INS_FAIL
  1653            C                MOV		A,0x50
  1654            C                XOR		A,@0xB4		; Check Result ?
  1655            C                CALL	INST_XOR_JUDGE
  1656            C            INST_XCH:			;-------Instruction Test => XCH R
  1657            C        			CALL	STATUS_CLEAR
  1658            C        			MOV		A,@0x55
  1659            C        			MOV		0x50,A		; [0x50] = 0x55
  1660            C        			MOV		A,@0xAA
  1661            C        			XCH		0x50		; [0x50] <-> A
  1662            C        			XOR		A,@0x55		; Check Result ?
  1663            C        			JBS		Z			; Check Z = 1?
  1664            C        			JMP	INS_FAIL
  1665            C        			JBC		N			; Check N = 0?
  1666            C        			JMP	INS_FAIL
  1667            C        			MOV		A,0x50
  1668            C        			XOR		A,@0xAA		; Check Result ?
  1669            C        			CALL	INST_XOR_JUDGE
  1670            C            ENDM
  1671            C        
  1672            C        SDxxx_EFT_INST_TRANSFER MACRO
  1673            C            INST_MOV_R_A:		;-------Instruction Test => MOV R,A
  1674            C                CALL	STATUS_CLEAR
  1675            C                MOV		A,@0xFF
  1676            C                MOV		0x50,A
  1677            C                MOV		A,STATUS
  1678            C                XOR		A,@0x18		;At  OCDS
  1679            C                ;XOR		A,@0x98		; Check Status ? ;; For not reset
  1680            C                ;;XOR		A,@0x10		; Check Status ?
  1681            C                CALL	INST_XOR_JUDGE
  1682            C                MOV		A,0x50
  1683            C                XOR		A,@0xFF		; Check Result ?
  1684            C                CALL	INST_XOR_JUDGE
  1685            C            INST_MOV_R_R:		;-------Instruction Test => MOV R,R
  1686            C                CALL	STATUS_CLEAR
  1687            C                MOV		A,@0x00
  1688            C                MOV		0x50,A		; [0x50] = 0x00		
  1689            C                MOV		0x50,0x50	; [0x50] = [0x50]
  1690            C                MOV		A,STATUS
  1691            C                XOR		A,@0x1C		; Check Status ?
  1692            C                ;;XOR		A,@0x14		; Check Status ?
  1693            C                JBS		Z			; Check Z = 1?
  1694            C                JMP	INS_FAIL
  1695            C                JBC		N			; Check N = 0?
  1696            C                JMP	INS_FAIL
  1697            C                MOV		A,0x50
  1698            C                BC		Z
  1699            C                XOR		A,@0x00		; Check Result ?
  1700            C                JBS		Z			; Check Z = 1?
  1701            C                JMP	INS_FAIL
  1702            C                JBC		N			; Check N = 0?
  1703            C                JMP	INS_FAIL
  1704            C                CALL	STATUS_CLEAR
  1705            C                MOV		A,@0x00
  1706            C                MOV		0x50,A		; [0x50] = 0x00		
  1707            C                MOV		0x50,0x50	; [0x50] = [0x50]
  1708            C                BS		0x50,0
  1709            C                MOV		A,0x50
  1710            C                XOR		A,@0x01		; Check Result ?
  1711            C                CALL	INST_XOR_JUDGE
  1712            C        
  1713            C            INST_SWAPA_R:		;-------Instruction Test => SWAPA R
  1714            C                CALL	STATUS_CLEAR
  1715            C                MOV		A,@0x5A
  1716            C                MOV		0x50,A		; [0x50] = 0x5A
  1717            C                SWAPA	0x50
  1718            C                XOR		A,@0xA5		; Check Result ?
  1719            C                CALL	INST_XOR_JUDGE
  1720            C            INST_SWAP_R:		;-------Instruction Test => SWAP R
  1721            C                CALL	STATUS_CLEAR
  1722            C                MOV		A,@0x5A
  1723            C                MOV		0x50,A		; [0x50] = 0x5A
  1724            C                SWAP	0x50
  1725            C                MOV		A,0x50
  1726            C                XOR		A,@0xA5		; Check Result ?
  1727            C                CALL	INST_XOR_JUDGE
  1728            C            ENDM
  1729            C        
  1730            C        SDxxx_EFT_INST_MANIPULATION MACRO   TMP50
  1731            C            INST_BS_R:		;-------Instruction Test => BS	R
  1732            C                CALL	STATUS_CLEAR
  1733            C                SBANK	0
  1734            C                MOV		A,ADCR1
  1735            C                MOV		TMP50,A
  1736            C                BS		ADCR1.0
  1737            C                MOV		A,TMP50
  1738            C                XOR		A,ADCR1
  1739            C                JBC		Z
  1740            C                JMP		INS_FAIL
  1741            C                JBC		N
  1742            C                JMP		INS_FAIL
  1743            C                MOV		A,ADCR1
  1744            C                MOV		TMP50,A
  1745            C                BS		ADCR1.1
  1746            C                MOV		A,TMP50
  1747            C                XOR		A,ADCR1
  1748            C                JBC		Z
  1749            C                JMP		INS_FAIL
  1750            C                JBC		N
  1751            C                JMP		INS_FAIL
  1752            C            INST_BC_R:		;-------Instruction Test => BC	R
  1753            C                MOV		A,ADCR1
  1754            C                MOV		TMP50,A
  1755            C                BC		ADCR1.0
  1756            C                MOV		A,TMP50
  1757            C                XOR		A,ADCR1
  1758            C                JBC		Z
  1759            C                JMP		INS_FAIL
  1760            C                JBC		N
  1761            C                JMP		INS_FAIL
  1762            C                MOV		A,ADCR1
  1763            C                MOV		TMP50,A
  1764            C                BC		ADCR1.1
  1765            C                MOV		A,TMP50
  1766            C                XOR		A,ADCR1
  1767            C                JBC		Z
  1768            C                JMP		INS_FAIL
  1769            C                JBC		N
  1770            C                JMP		INS_FAIL
  1771            C            ENDM
  1772            C        
  1773            C        SDxxx_EFT_BRANCH_I MACRO
  1774            C            INST_DJZ_R:			;------- Instruction Test => DJZ R
  1775            C                CALL	STATUS_CLEAR
  1776            C                MOV		A,@0x01
  1777            C                MOV		0x50,A		; [0x50] = 0x01
  1778            C                DJZ		0x50		; [0x50] = [0x50] - 1,if z,skip
  1779            C                JMP		INS_FAIL
  1780            C                MOV		A,0x50
  1781            C                XOR		A,@0x00		; Check Result ?
  1782            C                CALL	INST_XOR_JUDGE	
  1783            C                CALL	STATUS_CLEAR
  1784            C                MOV		A,@0x02
  1785            C                MOV		0x50,A		; [0x50] = 0x02
  1786            C                DJZ		0x50		; [0x50] = [0x50] - 1,if z,skip
  1787            C                JMP		$+2
  1788            C                JMP		INS_FAIL
  1789            C            INST_DJZA_R:		;------- Instruction Test => DJZA R
  1790            C                CALL	STATUS_CLEAR
  1791            C                MOV		A,@0x01
  1792            C                MOV		0x50,A		; [0x50] = 0x01
  1793            C                DJZA	0x50		; A = [0x50] - 0x01,if z,skip
  1794            C                JMP	INS_FAIL
  1795            C                XOR		A,@0x00		; Check Result ?
  1796            C                CALL	INST_XOR_JUDGE
  1797            C                CALL	STATUS_CLEAR
  1798            C                MOV		A,@0x02
  1799            C                MOV		0x50,A		; [0x50] = 0x02
  1800            C                DJZA	0x50		; A = [0x50] - 0x01,if z,skip
  1801            C                JMP		$+2
  1802            C                JMP	INS_FAIL
  1803            C            INST_JZA_R:			;-------Instruction Test => JZA R
  1804            C                CALL	STATUS_CLEAR
  1805            C                MOV		A,@0xFF
  1806            C                MOV		0x50,A
  1807            C                JZA		0x50		; A = [0x50] + 1,if 0 skip
  1808            C                JMP		INS_FAIL
  1809            C                XOR		A,@0x00		; Check Result ?
  1810            C                CALL	INST_XOR_JUDGE
  1811            C                CALL	STATUS_CLEAR
  1812            C                MOV		A,@0x80
  1813            C                MOV		0x50,A
  1814            C                JZA		0x50		; A = [0x50] + 1,if 0 skip
  1815            C                JMP		$+2
  1816            C                JMP		INS_FAIL
  1817            C            INST_JZ_R:			;-------Instruction Test => JZ R
  1818            C                CALL	STATUS_CLEAR
  1819            C                MOV		A,@0xFF
  1820            C                MOV		0x50,A		; [0x50] = 0xFF
  1821            C                JZ		0x50		; [0x50] = [0x50] + 1,if 0 skip
  1822            C                JMP		INS_FAIL
  1823            C                MOV		A,0x50
  1824            C                XOR		A,@0x00		; Check Result ?
  1825            C                CALL	INST_XOR_JUDGE
  1826            C                CALL	STATUS_CLEAR
  1827            C                MOV		A,@0x80
  1828            C                MOV		0x50,A		; [0x50] = 0xFF
  1829            C                JZ		0x50		; [0x50] = [0x50] + 1,if 0 skip
  1830            C                JMP		$+2
  1831            C                JMP		INS_FAIL
  1832            C            
  1833            C            ENDM
  1834            C        
  1835            C        SDxxx_EFT_BRANCH_II MACRO
  1836            C            INST_JE_R:			;-------Instruction Test => JE R
  1837            C                CALL	STATUS_CLEAR
  1838            C                MOV		A,@0x5A
  1839            C                MOV		0x50,A		; [0x50] = 0x5A
  1840            C                JE		0x50		; [0x50] = A?
  1841            C                JMP		INS_FAIL
  1842            C                MOV		A,@0x5B
  1843            C                MOV		0x50,A		; [0x50] = 0x5B
  1844            C                MOV		A,@0x5C
  1845            C                JE		0x50		; [0x50] = A(0x5C)?
  1846            C                JMP		$+2
  1847            C                JMP		INS_FAIL
  1848            C            INST_JGE_R:			;-------Instruction Test => JGE R
  1849            C                CALL	STATUS_CLEAR
  1850            C                MOV		A,@0x7F
  1851            C                MOV		0x50,A		; [0x50] = 0x7F
  1852            C                MOV		A,@0x00
  1853            C                JGE		0x50		; [0x50] > A ?
  1854            C                JMP		INS_FAIL
  1855            C                CALL	STATUS_CLEAR
  1856            C                MOV		A,@0xFF
  1857            C                MOV		0x50,A		; [0x50] = 0xFF
  1858            C                MOV		A,@0x80
  1859            C                JGE		0x50		; [0x50] > A ?
  1860            C                JMP		INS_FAIL
  1861            C                CALL	STATUS_CLEAR
  1862            C                MOV		A,@0x00
  1863            C                MOV		0x50,A		; [0x50] = 0x00
  1864            C                MOV		A,@0xFF
  1865            C                JGE		0x50		; [0x50] > A(0xFF) ?x
  1866            C                JMP		$+2
  1867            C                JMP		INS_FAIL
  1868            C        
  1869            C            INST_JLE_R:			;-------Instruction Test => JLE R
  1870            C                CALL	STATUS_CLEAR
  1871            C                MOV		A,@0x00
  1872            C                MOV		0x50,A		; [0x50] = 0x00
  1873            C                MOV		A,@0x7F
  1874            C                JLE		0x50		; [0x50] < A ?
  1875            C                JMP		INS_FAIL
  1876            C                MOV		A,@0x00
  1877            C                MOV		STATUS,A
  1878            C                MOV		A,@0x80
  1879            C                MOV		0x50,A		; [0x50] = 0x80
  1880            C                MOV		A,@0xFF
  1881            C                JLE		0x50		; [0x50] < A ?
  1882            C                JMP		INS_FAIL
  1883            C                CALL	STATUS_CLEAR
  1884            C                MOV		A,@0xFF
  1885            C                MOV		0x50,A		; [0x50] = 0xFF
  1886            C                MOV		A,@0x00
  1887            C                JLE		0x50		; [0x50] < A(0x00) ?x
  1888            C                JMP		$+2
  1889            C                JMP		INS_FAIL
  1890            C            INST_JE_K:			;-------Instruction Test => JE k
  1891            C                CALL	STATUS_CLEAR
  1892            C                MOV		A,@0x7F
  1893            C                JE		@0x7F
  1894            C                JMP	INS_FAIL
  1895            C            ENDM
  1896            C        
  1897            C        ;;需建立遠程呼叫程式位址(CALL_TEST)，才可測試
  1898            C        SDxxx_EFT_BRANCH_III MACRO
  1899            C            INST_CALL_K:		;-------Instruction Test => CALL k
  1900            C                CALL	STATUS_CLEAR
  1901            C                MOV		A,@0x03
  1902            C                MOV		0x50,A
  1903            C                CALL	CALL_TEST
  1904            C                MOV		A,0x50
  1905            C                XOR		A,@0x04
  1906            C                CALL	INST_XOR_JUDGE
  1907            C        
  1908            C            INST_LCALL_K:		;-------Instruction Test => LCALL k
  1909            C                CALL	STATUS_CLEAR
  1910            C                MOV		A,@0x03
  1911            C                MOV		0x51,A
  1912            C                LCALL	LCALL_Test
  1913            C                MOV		A,0x51
  1914            C                XOR		A,@0x04		; Check Result ?
  1915            C                CALL	INST_XOR_JUDGE
  1916            C        
  1917            C            INST_RETL_K:		;-------Instruction Test => RETL k
  1918            C                CALL	STATUS_CLEAR
  1919            C                MOV		A,@0x00
  1920            C                CALL	INST_RETL_TABLE
  1921            C                XOR		A,@0xA1
  1922            C                CALL	INST_XOR_JUDGE
  1923            C                MOV		A,@0x01
  1924            C                CALL	INST_RETL_TABLE
  1925            C                XOR		A,@0xA2
  1926            C                CALL	INST_XOR_JUDGE
  1927            C                MOV		A,@0x02
  1928            C                CALL	INST_RETL_TABLE
  1929            C                XOR		A,@0xA4
  1930            C                CALL	INST_XOR_JUDGE
  1931            C                MOV		A,@0x03
  1932            C                CALL	INST_RETL_TABLE
  1933            C                XOR		A,@0xA8
  1934            C                CALL	INST_XOR_JUDGE
  1935            C            ENDM
  1936            C        
  1937            C        SDxxx_EFT_SHORT_BRANCH MACRO
  1938            C            INST_SJX:
  1939            C                CALL	STATUS_CLEAR
  1940            C                BS	C
  1941            C                SJC		@0x03
  1942            C                JMP		JMP_FAIL
  1943            C                JMP		JMP_FAIL
  1944            C                JMP		JMP_FAIL
  1945            C                BC	C
  1946            C                SJNC	bbb		;@0x03
  1947            C                JMP		JMP_FAIL
  1948            C                JMP		JMP_FAIL
  1949            C                JMP		JMP_FAIL
  1950            C                bbb:		
  1951            C                    BS		Z
  1952            C                    SJZ		@0x03
  1953            C                    JMP		JMP_FAIL
  1954            C                    JMP		JMP_FAIL
  1955            C                    JMP		JMP_FAIL
  1956            C                    CLRA
  1957            C                    SJZ		@0x03
  1958            C                    JMP		JMP_FAIL
  1959            C                    JMP		JMP_FAIL
  1960            C                    JMP		JMP_FAIL
  1961            C                JMP		IATEST1		;JMP back Test as below
  1962            C                aaa:	
  1963            C                    JMP	IATEST2		; -9
  1964            C                    JMP	JMP_FAIL	; -8
  1965            C                    JMP	JMP_FAIL	; -7
  1966            C                    JMP	JMP_FAIL	; -6
  1967            C                    JMP	JMP_FAIL	; -5
  1968            C                    JMP	JMP_FAIL	; -4
  1969            C                    JMP	JMP_FAIL	; -3
  1970            C                IATEST1:	
  1971            C                    BS		C		; -2
  1972            C                    SJC		aaa		; -1
  1973            C                    SJC		@0xF7	; -1
  1974            C                    JMP		JMP_FAIL
  1975            C                    JMP		JMP_FAIL
  1976            C                    JMP		JMP_FAIL
  1977            C                    JMP		IATEST3		; -9
  1978            C                    JMP		JMP_FAIL	; -8
  1979            C                    JMP		JMP_FAIL	; -7
  1980            C                    JMP		JMP_FAIL	; -6
  1981            C                    JMP		JMP_FAIL	; -5
  1982            C                    JMP		JMP_FAIL	; -4
  1983            C                    JMP		JMP_FAIL	; -3
  1984            C                IATEST2:	
  1985            C                    BC		C		; -2
  1986            C                    SJNC		@0xF7	; -1
  1987            C                    JMP		_IPass
  1988            C                    JMP		_IPass
  1989            C                    JMP		_IPass
  1990            C                    JMP		IATEST4		; -9
  1991            C                    JMP		JMP_FAIL	; -8
  1992            C                    JMP		JMP_FAIL	; -7
  1993            C                    JMP		JMP_FAIL	; -6
  1994            C                    JMP		JMP_FAIL	; -5
  1995            C                    JMP		JMP_FAIL	; -4
  1996            C                    JMP		JMP_FAIL	; -3
  1997            C                IATEST3:	
  1998            C                    BS		Z		; -2
  1999            C                    SJZ		@0xF7	; -1
  2000            C                    JMP		JMP_FAIL
  2001            C                    JMP		JMP_FAIL
  2002            C                    JMP		JMP_FAIL
  2003            C        
  2004            C                    JMP		_IPass		; -9
  2005            C                    JMP		JMP_FAIL	; -8
  2006            C                    JMP		JMP_FAIL	; -7
  2007            C                    JMP		JMP_FAIL	; -6
  2008            C                    JMP		JMP_FAIL	; -5
  2009            C                    JMP		JMP_FAIL	; -4
  2010            C                    JMP		JMP_FAIL	; -3
  2011            C                IATEST4:	
  2012            C                    BC		Z		; -2
  2013            C                    SJNZ	@0xF7	; -1
  2014            C                    JMP		JMP_FAIL
  2015            C                    JMP		JMP_FAIL
  2016            C                    JMP		JMP_FAIL
  2017            C                _IPass:
  2018            C                    NOP
  2019            C            ENDM
  2020            C        
  2021            C        SDxxx_EFT_CONTROL MACRO
  2022            C            INST_ENI:			;-------Instruction Test => ENI , IT?
  2023            C                ENI
  2024            C                JBS		IT		; Check IT = 1?
  2025            C                JMP	INS_FAIL
  2026            C            INST_DISI:			;-------Instruction Test => DISI , IT?
  2027            C                DISI
  2028            C                JBC		IT		; Check IT = 0?
  2029            C                JMP	INS_FAIL
  2030            C            ENDM
  2031            C        
  2032            C        ;;需更新給定位址之內容，才可測試
  2033            C        SDxxx_EFT_READ_ROM MACRO
  2034            C            INST_TBLRD_R:
  2035            C                SBANK	1
  2036            C                MOV		A,@0xF1		;ADDR(0x0EF1)
  2037            C                MOV		TBPTL,A
  2038            C                MOV		A,@0x0E
  2039            C                MOV		TBPTH,A
  2040            C                SBANK	0
  2041            C                TBRDA	0x50		; [0x50]+ A = [TABPTR] 
  2042            C                XOR		A,@0xA1
  2043            C                CALL	INST_XOR_JUDGE
  2044            C                MOV		A,0x50
  2045            C                XOR		A,@0x70
  2046            C                CALL	INST_XOR_JUDGE
  2047            C                SBANK	1
  2048            C                INC		TBPTL		;ADDR(0x0EF2)
  2049            C                SBANK	0
  2050            C                TBRDA	0x50		; [0x50]+ A = [TABPTR] 
  2051            C                XOR		A,@0xA2
  2052            C                CALL	INST_XOR_JUDGE
  2053            C                MOV		A,0x50
  2054            C                XOR		A,@0x70
  2055            C                CALL	INST_XOR_JUDGE
  2056            C            INST_TBRD_R:		;-------Instruction Test => TBRD R
  2057            C                SBANK	1
  2058            C                MOV		A,@0xF3		;ADDR(0x0EF3)
  2059            C                MOV		TBPTL,A
  2060            C                MOV		A,@0x0E
  2061            C                MOV		TBPTH,A
  2062            C                SBANK	0
  2063            C                TBRD	0x50
  2064            C                MOV		A,0x50
  2065            C                XOR		A,@0xA4
  2066            C                CALL	INST_XOR_JUDGE
  2067            C                SBANK	1
  2068            C                INC		TBPTL		;ADDR(0x0EF4)
  2069            C                SBANK	0
  2070            C                TBRD	0x50
  2071            C                MOV		A,0x50
  2072            C                XOR		A,@0xA8
  2073            C                CALL	INST_XOR_JUDGE
  2074            C            ENDM
  2075            C        
    41            C        	INCLUDE		"SDXXX_ASM_RAM.ASM"
     1            C        ;ORG 	0x03FF
     2            C        ;SDxxx_RAM_INIT:	
     3            C            ;SDxxx_RAM_INIT
     4            C            ;RET
     5            C        
     6            C        ;;====== For IC Application =================================================;;
     7            C        SDxxx_RAM_INIT MACRO
     8            C            SBANK	0
     9            C            ;clear all ram
    10            C            ENDM
    11            C        
    12            C        ;Write(WR_VAL=0xFF)
    13            C        SDxxx_RAM_SHA_INIT MACRO
    14            C            SBANK	0
    15            C            MOV		A,@0x50     ;Write Start
    16            C            MOV		RSR,A
    17            C            MOV		A,@0xFF		;RAM_SHA_LOOP
    18            C            MOV		IAR,A
    19            C            INC		RSR
    20            C            MOV		A,@0x80
    21            C            XOR		A,RSR
    22            C            JBS		Z
    23            C            JMP		$-6
    24            C            MOV		A,@0x50     ;Read Back Start
    25            C            MOV		RSR,A
    26            C            MOV		A,@0xFF
    27            C            XOR		A,IAR
    28            C            JBS		Z
    29            C            JMP		RAM_FAIL
    30            C            INC		RSR
    31            C            MOV		A,@0x80
    32            C            XOR		A,RSR
    33            C            JBS		Z
    34            C            JMP		$-8
    35            C            ENDM
    36            C        
    37            C        ;Write(WR_VAL=0xFF)
    38            C        SDxxx_RAM_IND_INIT MACRO RAM_BANK
    39            C            MOV		A,@0x80
    40            C            MOV		RSR,A
    41            C            GBANK	RAM_BANK
    42            C            MOV		A,@0xFF
    43            C            MOV		IAR,A
    44            C            INC		RSR
    45            C            MOV		A,@0x00
    46            C            XOR		A,RSR
    47            C            JBS		Z
    48            C            JMP		$-7
    49            C            ENDM
    50            C        
    51            C        ;;====== For IC Function Verify =============================================;;
    52            C        
    53            C        ;Write(WR_VAL),Read(WR_VAL),Clear(0x00)
    54            C        SDxxx_RAM_WR_ALL MACRO RAM_BANK,WR_VAL
    55            C            MOV		A,@0x80		; Write Start SRAM(WR_VAL)
    56            C            MOV		RSR,A
    57            C            GBANK	RAM_BANK
    58            C            MOV		A,@WR_VAL
    59            C            MOV		IAR,A
    60            C            INC		RSR
    61            C            MOV		A,@0x00
    62            C            XOR		A,RSR		; INC(0x80),UNTIL(0x00)
    63            C            JBS		Z
    64            C            JMP		$-6
    65            C            MOV		A,@0x80		; Read Start SRAM(WR_VAL)
    66            C            MOV		RSR,A
    67            C            GBANK	RAM_BANK
    68            C            MOV		A,@WR_VAL
    69            C            XOR		IAR,A
    70            C            JBS		Z
    71            C            JMP		RAM_FAIL
    72            C            INC		RSR
    73            C            MOV		A,@0x00
    74            C            XOR		A,RSR		; INC(0x80),UNTIL(0x00)
    75            C            JBS		Z
    76            C            JMP		$-8
    77            C            ENDM
    78            C        
    79            C        ;Write(0x00,0xFF)
    80            C        SDxxx_RAM_SHA_WORD_QB MACRO
    81            C            MOV		A,@0x00
    82            C            MOV		0x50,A
    83            C            MOV		0x51,A
    84            C            MOV		0x52,A
    85            C            MOV		0x53,A
    86            C            MOV		A,@0xFF
    87            C            MOV		0x54,A
    88            C            MOV		0x55,A
    89            C            MOV		0x56,A
    90            C            MOV		0x57,A
    91            C            MOV		A,@0x00
    92            C            MOV		0x58,A
    93            C            MOV		0x59,A
    94            C            MOV		0x5A,A
    95            C            MOV		0x5B,A
    96            C            MOV		A,@0xFF
    97            C            MOV		0x5C,A
    98            C            MOV		0x5D,A
    99            C            MOV		0x5E,A
   100            C            MOV		0x5F,A
   101            C            ;-------------
   102            C            MOV		A,@0x00
   103            C            MOV		0x60,A
   104            C            MOV		0x61,A
   105            C            MOV		0x62,A
   106            C            MOV		0x63,A
   107            C            MOV		A,@0xFF
   108            C            MOV		0x64,A
   109            C            MOV		0x65,A
   110            C            MOV		0x66,A
   111            C            MOV		0x67,A
   112            C            MOV		A,@0x00
   113            C            MOV		0x68,A
   114            C            MOV		0x69,A
   115            C            MOV		0x6A,A
   116            C            MOV		0x6B,A
   117            C            MOV		A,@0xFF
   118            C            MOV		0x6C,A
   119            C            MOV		0x6D,A
   120            C            MOV		0x6E,A
   121            C            MOV		0x6F,A
   122            C            ;-------------
   123            C            MOV		A,@0x00
   124            C            MOV		0x70,A
   125            C            MOV		0x71,A
   126            C            MOV		0x72,A
   127            C            MOV		0x73,A
   128            C            MOV		A,@0xFF
   129            C            MOV		0x74,A
   130            C            MOV		0x75,A
   131            C            MOV		0x76,A
   132            C            MOV		0x77,A
   133            C            MOV		A,@0x00
   134            C            MOV		0x78,A
   135            C            MOV		0x79,A
   136            C            MOV		0x7A,A
   137            C            MOV		0x7B,A
   138            C            MOV		A,@0xFF
   139            C            MOV		0x7C,A
   140            C            MOV		0x7D,A
   141            C            MOV		0x7E,A
   142            C            MOV		0x7F,A
   143            C            ENDM
   144            C        
    42            C        	INCLUDE		"SDXXX_ASM_ROM.ASM"
     1            C        ;;====== For IC Application =================================================;;
     2            C        
     3            C        ;Write(WR_ADDR,@WR_VAL)
     4            C        SDxxx_ROM_EEP_WR MACRO WR_ADDR,WR_VAL
     5            C            SBANK	1
     6            C            BS      EECR2,5     ;EECR2[EEPC]
     7            C            JBS     EECR1,2     ;while(EECR1_ONRD_SF)
     8            C            JMP     $-1
     9            C            BS      EECR2,7     ;EECR2[EEWE]
    10            C        	MOV		A,@WR_ADDR
    11            C        	MOV		EERA,A
    12            C        	MOV		A,@WR_VAL
    13            C        	MOV		EERD,A
    14            C        	BS		EECR1,0		;EECR1[WR]
    15            C            JBC     EECR2,6     ;while(EECR2_EDF_SF)
    16            C            JMP     $-1
    17            C            BC      EECR2,7     ;EECR2[EEWE]
    18            C            BC      EECR2,5     ;EECR2[EEPC]
    19            C            ENDM
    20            C        
    21            C        ;Read(RD_ADDR,RD_VAL)
    22            C        SDxxx_ROM_EEP_RD MACRO RD_ADDR,RD_VAL
    23            C            SBANK	1
    24            C            BS      EECR2,5     ;EECR2[EEPC]
    25            C            JBS     EECR1,2     ;while(EECR1_ONRD_SF)
    26            C            JMP     $-1
    27            C        	MOV		A,@RD_ADDR
    28            C        	MOV		EERA,A
    29            C            BS		EECR1,1		;EECR1[RD]
    30            C        	MOV		A,EERD
    31            C        	MOV		RD_VAL,A
    32            C            JBC     EECR2,6     ;while(EECR2_EDF_SF)
    33            C            JMP     $-1
    34            C            BC      EECR2,5     ;EECR2[EEPC]
    35            C            ENDM
    36            C        
    37            C        ;待驗證
    38            C        SDxxx_ROM_IAP_WR MACRO WR_ADDR,WR_VAL,RAM_BANK
    39            C        	SBANK	1
    40            C        	GBANK	3
    41            C        	MOV		A,@0x08
    42            C        	MOV		TBWAH,A
    43            C        	MOV		A,@0x00
    44            C        	MOV		TBWAL,A
    45            C        	MOV		A,@0x01
    46            C        	MOV		TBWCR,A
    47            C        	MOV		A,@0xB4
    48            C        	MOV		FLKR,A		
    49            C        	SBANK	0
    50            C        	TBWR
    51            C            ENDM
    52            C        
    53            C        
    54            C        ;;====== For IC Function Verify =============================================;;
    55            C        
    56            C        ;Write(WR_VAL),Read(WR_VAL),Clear(0x00)
    57            C        SDxxx_ROM_EEP_WR_ALL MACRO
    58            C            NOP
    59            C            ENDM
    60            C        
    43            C        ELSE
    44            C        	NOP
    45            C        ENDIF
    46            C        
    47            C        ;;使用CALL需定義位址，因有衝突問題
    48            C        
    49            C        
    23                     
    24                     ;================ General Purpose Register ===============
    25       0050          	TMP50	== 0x50
    26       0051          	TMP51	== 0x51
    27       0052          	TMP52	== 0x52
    28       0053          	TMP53	== 0x53
    29       0054          	TMP54	== 0x54
    30       0055          	TMP55	== 0x55
    31       0056          	TMP56	== 0x56
    32       0057          	TMP57	== 0x57
    33       0058          	TMP58	== 0x58
    34       0059          	TMP59	== 0x59
    35       005A          	TMP5A	== 0x5A
    36       005B          	TMP5B	== 0x5B
    37       005C          	TMP5C	== 0x5C
    38       005D          	TMP5D	== 0x5D
    39       005E          	TMP5E	== 0x5E
    40       005F          	TMP5F	== 0x5F
    41       005A          	INST	== 0x5A
    42                     
    43                     ;================ Interrupt Vector Table =================
    44                     	ORG 	0x0000
    45 00000 5050          	JMP 	MAIN
    46                     	ORG		0x0002
    47 00002 506D          	JMP 	JMP_FAIL	;0x0030
    48 00003 506D          	JMP 	JMP_FAIL	;0x0031
    49 00004 506D          	JMP 	JMP_FAIL	;0x0032
    50 00005 506D          	JMP 	JMP_FAIL	;0x0033
    51 00006 506D          	JMP 	JMP_FAIL	;0x0034
    52 00007 506D          	JMP 	JMP_FAIL	;0x0035
    53 00008 506D          	JMP 	JMP_FAIL	;0x0036
    54 00009 506D          	JMP 	JMP_FAIL	;0x0037
    55 0000A 506D          	JMP 	JMP_FAIL	;0x0038
    56 0000B 506D          	JMP 	JMP_FAIL	;0x0039
    57 0000C 506D          	JMP 	JMP_FAIL	;0x003A
    58 0000D 506D          	JMP 	JMP_FAIL	;0x003B
    59 0000E 506D          	JMP 	JMP_FAIL	;0x003C
    60 0000F 506D          	JMP 	JMP_FAIL	;0x003D
    61 00010 506D          	JMP 	JMP_FAIL	;0x003E
    62 00011 506D          	JMP 	JMP_FAIL	;0x003F
    63 00012 506D          	JMP 	JMP_FAIL	;0x0040
    64 00013 506D          	JMP 	JMP_FAIL	;0x0041
    65 00014 506D          	JMP 	JMP_FAIL	;0x0042
    66 00015 506D          	JMP 	JMP_FAIL	;0x0043
    67 00016 506D          	JMP 	JMP_FAIL	;0x0044
    68 00017 506D          	JMP 	JMP_FAIL	;0x0045
    69 00018 506D          	JMP 	JMP_FAIL	;0x0046
    70 00019 506D          	JMP 	JMP_FAIL	;0x0047
    71 0001A 506D          	JMP 	JMP_FAIL	;0x0048
    72 0001B 506D          	JMP 	JMP_FAIL	;0x0049
    73 0001C 506D          	JMP 	JMP_FAIL	;0x004A
    74 0001D 506D          	JMP 	JMP_FAIL	;0x004B
    75 0001E 506D          	JMP 	JMP_FAIL	;0x004C
    76 0001F 506D          	JMP 	JMP_FAIL	;0x004D
    77 00020 506D          	JMP 	JMP_FAIL	;0x004E
    78 00021 506D          	JMP 	JMP_FAIL	;0x004F
    79                     ;==================== Main Function ======================
    80                     	ORG		0x0050
    81 00050               MAIN:
    82 00050 4079          	CALL	SYS_INIT
    83 00051 407E          	CALL	GPIO_INIT
    84                     	;CALL	WAKE_INIT
    85 00052 4095          	CALL	WDT_QK
    86 00053 4099          	CALL	KEY_DEBOUNCE
    87 00054 40B3          	CALL	RAM_SHA_INIT
    88 00055 40BD          	CALL	RAM_IND_INIT
    89 00056 40E6          	CALL	EEPROM_INIT
    90                     	;CALL	TEST_EEPROM (Do not loop forever)
    91                     	;CALL	TEST_FLASH (Do not loop forever)
    92 00057 6088          	MOV		A,@0x88
    93 00058 0121          	MOV		WDTCR,A
    94                     ;====================== BACK_GROUND_LOOP ================
    95 00059               BACK_GROUND_LOOP:
    96 00059 7A00          	SBANK	0
    97 0005A 47B2          	CALL	TEST_STACK
    98 0005B 40FC          	CALL	TEST_INST_ARITHEMATIC	;ADD, SUB, DAA, DEC, DECA, INC, INCA, ADC, SUBB, NEG
    99 0005C 4482          	CALL	TEST_INST_LOGIC_I		;AND, OR, COM, COMA, XOR, CLR, CLRA, BTG
   100 0005D 459F          	CALL	TEST_INST_LOGIC_II		;RLC, RLCA, RRC, RRCA, RRA, RR, RLA, RL, XCH
   101 0005E 4655          	CALL	TEST_INST_TRANSFER		;MOV, SWAP, SWAPA
   102 0005F 4685          	CALL	TEST_INST_MANIPULATION	;BC, BS, JBC, JBS
   103 00060 46AC          	CALL	TEST_INST_BRANCH_I		;JC, JNC, JZ, JNZ, DJZ, DJZA, JZ, JZA
   104 00061 46E3          	CALL	TEST_INST_BRANCH_II		;JE R, JGE, JLE, JE K
   105 00062 471A          	CALL	TEST_INST_BRANCH_III	;CALL, JMP, LCALL, LJMP, RETL
   106 00063 473B          	CALL	TEST_INST_CONTROL		;ENI, DISI, WDTC, SLEP, NOP, RETI, RET
   107 00064 4742          	CALL	TEST_SHORT_BRANCH		;SJC, SJZ, SJNC, SJNZ
   108 00065 478B          	CALL	TEST_READ_ROM			;TBRD, TBRDA
   109 00066 4F00          	CALL	TEST_RAM_BANK_0_5		;Write(0x55),Read(0x55),Clear(0x00)
   110 00067 4F17          	CALL	TEST_RAM_BANK_1_A		;Write(0xAA),Read(0xAA),Clear(0x00)
   111 00068 4F2E          	CALL	TEST_RAM_BANK_2_3		;Write(0x33),Read(0x33),Clear(0x00)
   112 00069 4F45          	CALL	TEST_RAM_BANK_3_C		;Write(0xCC),Read(0xCC),Clear(0x00)
   113 0006A               	JMP_PASS:
   114 0006A 0085          	BTG		P5,0
   115 0006B 0004          	WDTC
   116 0006C 5059          	JMP		BACK_GROUND_LOOP
   117                     
   118                     ;====================== ERROR_LOOP =====================
   119 0006D               JMP_FAIL:
   120 0006D 7A00          	SBANK	0
   121 0006E 2205          	BC		P5,2
   122 0006F 5059          	JMP		BACK_GROUND_LOOP
   123 00070               RAM_FAIL:
   124 00070 7A00          	SBANK	0
   125 00071 2305          	BC		P5,3
   126 00072 5059          	JMP		BACK_GROUND_LOOP
   127 00073               INS_FAIL:
   128 00073 7A00          	SBANK	0
   129 00074 2405          	BC		P5,4
   130 00075 5059          	JMP		BACK_GROUND_LOOP
   131 00076               RST_FAIL:
   132 00076 7A00          	SBANK	0
   133 00077 2505          	BC		P5,5
   134 00078 5059          	JMP		BACK_GROUND_LOOP
   135                     
   136                     ;================== PEIPHERAL_INITIAL ==================
   137                     	;-------------------------------;
   138 00079               	SYS_INIT:	
   139 00079 7A00          		SBANK	0
   140                     		;BS		CPUS	;FSYS=FM
   141 0007A 260E          		BC		IDLE	;SLEEP_MODE
   142 0007B 6000          		MOV		A,@0x00
   143 0007C 0114          		MOV		SFR1,A
   144 0007D 0012          		RET
   145                     	;-------------------------------;		
   146 0007E               	GPIO_INIT:
   147 0007E 7A00          		SBANK	0
   148 0007F 0305          		CLR		P5
   149 00080 6002          		MOV		A,@0x02
   150 00081 010B          		MOV		IOCR5,A
   151 00082 60FF          		MOV		A,@0xFF	;Turn-Off LED (Active-Low)
   152 00083 0105          		MOV		P5,A
   153 00084 2005          		BC		P50
   154 00085 0012          		RET
   155                     
   156                     	;-------------------------------;
   157 00086               	WAKE_INIT:
   158 00086 7A00          		SBANK	0
   159 00087 3B03          		JBS		P			; PWR ON reset(1)/RST pin reset(0)
   160 00088 508B          		JMP		$+3
   161 00089 2005          		BC		P5,0		; PWR ON reset,Light PWR_LED
   162 0008A 0003          		SLEP
   163 0008B 3B03          		JBS		P
   164 0008C 508F          		JMP		$+3
   165 0008D 2005          		BC		P5,0		; PWR ON reset,Light PWR_LED
   166 0008E 0003          		SLEP
   167 0008F 3B03          		JBS		P
   168 00090 5093          		JMP		$+3
   169 00091 2005          		BC		P5,0		; PWR ON reset,Light PWR_LED
   170 00092 2005          		BC		P5,0		; PWR ON reset,Light PWR_LED
   171 00093 0003          		SLEP		
   172 00094 0012          		RET
   173                     		
   174 00095               	WDT_QK:
   175 00095 3C03          		JBS		T
   176 00096 5076          		JMP		RST_FAIL
   177 00097 0000          		NOP
   178 00098 0012          		RET
   179                     	;-------------------------------;
   180 00099               	KEY_DEBOUNCE:
   181 00099 3905          		JBS		P5,1		; Push, or not
   182 0009A 509C          		JMP		$+2
   183 0009B 5099          		JMP		$-2
   184 0009C 3905          		JBS		P5,1
   185 0009D 5099          		JMP		KEY_DEBOUNCE
   186 0009E 3905          		JBS		P5,1
   187 0009F 5099          		JMP		KEY_DEBOUNCE
   188 000A0 3905          		JBS		P5,1
   189 000A1 5099          		JMP		KEY_DEBOUNCE
   190 000A2 3905          		JBS		P5,1
   191 000A3 5099          		JMP		KEY_DEBOUNCE
   192 000A4 3905          		JBS		P5,1
   193 000A5 5099          		JMP		KEY_DEBOUNCE
   194 000A6 3905          		JBS		P5,1
   195 000A7 5099          		JMP		KEY_DEBOUNCE
   196 000A8 3905          		JBS		P5,1
   197 000A9 5099          		JMP		KEY_DEBOUNCE
   198 000AA 3905          		JBS		P5,1
   199 000AB 5099          		JMP		KEY_DEBOUNCE
   200 000AC 3905          		JBS		P5,1
   201 000AD 5099          		JMP		KEY_DEBOUNCE
   202 000AE 3905          		JBS		P5,1
   203 000AF 50AD          		JMP		$-2
   204 000B0 60FF          		MOV		A,@0xFF		; Turn Off all LED
   205 000B1 0105          		MOV		P5,A		
   206 000B2 0012          		RET
   207                     	;-------------------------------;
   208 000B3               	RAM_SHA_INIT:
   209 000B3 6050          		MOV		A,@0x50
   210 000B4 0104          		MOV		RSR,A
   211 000B5 60FF          		MOV		A,@0xFF		;RAM_SHA_LOOP
   212 000B6 0100          		MOV		IAR,A
   213 000B7 1504          		INC		RSR
   214 000B8 6080          		MOV		A,@0x80
   215 000B9 0C04          		XOR		A,RSR
   216 000BA 3A03          		JBS		Z
   217 000BB 50B5          		JMP		$-6
   218 000BC 0012          		RET
   219                     	;-------------------------------;		
   220 000BD               	RAM_IND_INIT:
   221 000BD 6080          		MOV		A,@0x80
   222 000BE 0104          		MOV		RSR,A
   223 000BF               		RAM_IND_LOOP_0:
   224 000BF 7A40          		GBANK	0
   225 000C0 60FF          		MOV		A,@0xFF
   226 000C1 0100          		MOV		IAR,A
   227 000C2 1504          		INC		RSR
   228 000C3 6000          		MOV		A,@0x00
   229 000C4 0C04          		XOR		A,RSR
   230 000C5 3A03          		JBS		Z
   231 000C6 50BF          		JMP		RAM_IND_LOOP_0
   232 000C7 6080          		MOV		A,@0x80
   233 000C8 0104          		MOV		RSR,A
   234 000C9               		RAM_IND_LOOP_1:
   235 000C9 7A41          		GBANK	1
   236 000CA 60FF          		MOV		A,@0xFF
   237 000CB 0100          		MOV		IAR,A
   238 000CC 1504          		INC		RSR
   239 000CD 6000          		MOV		A,@0x00
   240 000CE 0C04          		XOR		A,RSR
   241 000CF 3A03          		JBS		Z
   242 000D0 50C9          		JMP		RAM_IND_LOOP_1
   243 000D1 6080          		MOV		A,@0x80
   244 000D2 0104          		MOV		RSR,A
   245 000D3               		RAM_IND_LOOP_2:
   246 000D3 7A42          		GBANK	2
   247 000D4 60FF          		MOV		A,@0xFF
   248 000D5 0100          		MOV		IAR,A
   249 000D6 1504          		INC		RSR
   250 000D7 6000          		MOV		A,@0x00
   251 000D8 0C04          		XOR		A,RSR
   252 000D9 3A03          		JBS		Z
   253 000DA 50D3          		JMP		RAM_IND_LOOP_2
   254 000DB 6080          		MOV		A,@0x80
   255 000DC 0104          		MOV		RSR,A
   256 000DD               		RAM_IND_LOOP_3:
   257 000DD 7A43          		GBANK	3
   258 000DE 60FF          		MOV		A,@0xFF
   259 000DF 0100          		MOV		IAR,A
   260 000E0 1504          		INC		RSR
   261 000E1 6000          		MOV		A,@0x00
   262 000E2 0C04          		XOR		A,RSR
   263 000E3 3A03          		JBS		Z
   264 000E4 50DD          		JMP		RAM_IND_LOOP_3
   265 000E5 0012          		RET
   266                     	;-------------------------------;
   267 000E6               	EEPROM_INIT:
   268 000E6 6080          		MOV		A,@0x80
   269 000E7 0141          		MOV		EECR2,A
   270 000E8 1000          		MOV		A,0x00
   271 000E9 0150          		MOV		TMP50,A
   272 000EA               		EEPROM_INIT_LOOP:
   273 000EA 1050          		MOV		A,TMP50
   274 000EB 0142          		MOV		EERA,A
   275 000EC 60FF          		MOV		A,@0xFF
   276 000ED 0143          		MOV		EERD,A
   277 000EE 1550          		INC		TMP50
   278 000EF 1080          		MOV		A,0x80
   279 000F0 0C50          		XOR		A,TMP50
   280 000F1 3A03          		JBS		Z
   281 000F2 50EA          		JMP		EEPROM_INIT_LOOP
   282 000F3 0012          		RET
   283                     	;-------------------------------;
   284 000F4               	STATUS_CLEAR:
   285 000F4 6000          		MOV		A,@0x00
   286 000F5 0103          		MOV		STATUS,A
   287 000F6 0012          		RET
   288                     	;-------------------------------;
   289 000F7               	INST_XOR_JUDGE:
   290 000F7 3A03          		JBS		Z			; IF(Z=1) BRANCH
   291 000F8 5073          		JMP		INS_FAIL
   292 000F9 3603          		JBC		N			; IF(N=0) BRANCH
   293 000FA 5073          		JMP		INS_FAIL
   294 000FB 0012          		RET
   295                     
   296                     ;================== Jmp Sub Function ==================
   297 000FC               	TEST_INST_ARITHEMATIC:
   298 000FC               		INST_DAA:			;-------Instruction Test => DAA , C?
   299 000FC 40F4          			CALL	STATUS_CLEAR	;-------DAA(0xAA)=10
   300 000FD 60AA          			MOV		A,@0xAA
   301 000FE 0001          			DAA
   302 000FF 3803          			JBS		C			; Check C = 1?
   303 00100 5073          			JMP	INS_FAIL
   304 00101 3103          			JBC		DC			; Check DC = 0?
   305 00102 5073          			JMP	INS_FAIL
   306 00103 3203          			JBC		Z			; Check Z = 0?
   307 00104 5073          			JMP	INS_FAIL
   308 00105 3503          			JBC		OV			; Check OV = 0?
   309 00106 5073          			JMP	INS_FAIL
   310 00107 3603          			JBC		N			; Check N = 0?
   311 00108 5073          			JMP	INS_FAIL
   312 00109 6C10          			XOR		A,@0x10		; Check Result ?
   313 0010A 3A03          			JBS		Z			; Check Z = 1?
   314 0010B 5073          			JMP	INS_FAIL
   315 0010C 3603          			JBC		N			; Check N = 0?
   316 0010D 5073          			JMP	INS_FAIL
   317 0010E 40F4          			CALL	STATUS_CLEAR	;-------DAA(0xFF)=65
   318 0010F 6080          			MOV		A,@0x80
   319 00110 0150          			MOV		0x50,A		; [0x50] = 0x80
   320 00111 607F          			MOV		A,@0x7F		; 
   321 00112 0E50          			ADD		A,0x50		; A = 0x7F + 0x80 = 0xFF
   322 00113 0001          			DAA
   323 00114 3803          			JBS		C			; Check C = 1?
   324 00115 5073          			JMP	INS_FAIL
   325 00116 3103          			JBC		DC			; Check DC = 0?
   326 00117 5073          			JMP	INS_FAIL
   327 00118 3203          			JBC		Z			; Check Z = 0?
   328 00119 5073          			JMP	INS_FAIL
   329 0011A 3503          			JBC		OV			; Check OV = 0?
   330 0011B 5073          			JMP	INS_FAIL
   331 0011C 3E03          			JBS		N			; Check N = 1?	; Result is Negative
   332 0011D 5073          			JMP	INS_FAIL
   333 0011E 2203          			BC		Z
   334 0011F 2603          			BC		N
   335 00120 6C65          			XOR		A,@0x65		; Check Result ?
   336 00121 3A03          			JBS		Z			; Check Z = 1?
   337 00122 5073          			JMP	INS_FAIL
   338 00123 3603          			JBC		N			; Check N = 0?
   339 00124 5073          			JMP	INS_FAIL
   340 00125 0000          			NOP
   341 00126 6000          			MOV		A,@0x00
   342 00127 0103          			MOV		STATUS,A
   343                     			;-------DAA(0x00)=66
   344 00128 2803          			BS		C
   345 00129 6080          			MOV		A,@0x80
   346 0012A 0150          			MOV		0x50,A		; [0x50] = 0x80
   347 0012B 607F          			MOV		A,@0x7F		; 
   348 0012C 7E50          			ADC		A,0x50		; A = 0x7F + 0x80
   349 0012D 0001          			DAA
   350 0012E 3803          			JBS		C			; Check C = 1? 	/ By ADC
   351 0012F 5073          			JMP	INS_FAIL
   352 00130 3903          			JBS		DC			; Check DC = 1? / By ADC
   353 00131 5073          			JMP	INS_FAIL
   354 00132 3A03          			JBS		Z			; Check Z = 1? 	/ By ADC
   355 00133 5073          			JMP	INS_FAIL
   356 00134 3503          			JBC		OV			; Check OV = 0?
   357 00135 5073          			JMP	INS_FAIL
   358 00136 3603          			JBC		N			; Check N = 0?
   359 00137 5073          			JMP	INS_FAIL
   360 00138 6C66          			XOR		A,@0x66		; Check Result ?
   361 00139 3A03          			JBS		Z			; Check Z = 1?
   362 0013A 5073          			JMP	INS_FAIL
   363 0013B 3603          			JBC		N			; Check N = 0?
   364 0013C 5073          			JMP	INS_FAIL
   365 0013D 6000          			MOV		A,@0x00
   366 0013E 0103          			MOV		STATUS,A
   367                     			;-------DAA(0x80)=E6
   368 0013F 60FF          			MOV		A,@0xFF
   369 00140 0150          			MOV		0x50,A		; [0x50] = 0xFF
   370 00141 607F          			MOV		A,@0x7F		; 
   371 00142 0450          			SUB		A,0x50		; A = 0xFF - 0x7F
   372 00143 0001          			DAA
   373 00144 3803          			JBS		C			; Check C = 1? 	/ By SUB
   374 00145 5073          			JMP	INS_FAIL
   375 00146 3903          			JBS		DC			; Check DC = 1? / By SUB
   376 00147 5073          			JMP	INS_FAIL
   377 00148 3203          			JBC		Z			; Check Z = 0?
   378 00149 5073          			JMP	INS_FAIL
   379 0014A 3503          			JBC		OV			; Check OV = 0?
   380 0014B 5073          			JMP	INS_FAIL
   381 0014C 3E03          			JBS		N			; Check N = 1?	; Result is Negative
   382 0014D 5073          			JMP	INS_FAIL
   383 0014E 2203          			BC		Z
   384 0014F 2603          			BC		N
   385 00150 6CE6          			XOR		A,@0xE6		; Check Result ?
   386 00151 3A03          			JBS		Z			; Check Z = 1?
   387 00152 5073          			JMP	INS_FAIL
   388 00153 3603          			JBC		N			; Check N = 0?
   389 00154 5073          			JMP	INS_FAIL
   390                     
   391                     		
   392 00155               		INST_CLA:			;-------Instruction Test => CLA
   393 00155 605A          			MOV		A,@0x5A
   394 00156 6C5A          			XOR		A,@0x5A		; Check Result ?
   395 00157 3A03          			JBS		Z			; Check Z = 1?
   396 00158 5073          			JMP	INS_FAIL
   397 00159 3603          			JBC		N			; Check N = 0?
   398 0015A 5073          			JMP	INS_FAIL
   399 0015B 605A          			MOV		A,@0x5A
   400 0015C 0200          			CLRA
   401 0015D 3A03          			JBS		Z			; Check Z = 1?
   402 0015E 5073          			JMP	INS_FAIL
   403 0015F 2203          			BC		Z
   404 00160 6C00          			XOR		A,@0x00		; Check Result ?
   405 00161 3A03          			JBS		Z			; Check Z = 1?
   406 00162 5073          			JMP	INS_FAIL
   407 00163 3603          			JBC		N			; Check N = 0?
   408 00164 5073          			JMP	INS_FAIL
   409 00165               		INST_CLR:			;-------Instruction Test => CLR
   410 00165 60AA          			MOV		A,@0xAA
   411 00166 0150          			MOV		0x50,A
   412 00167 1050          			MOV		A,0x50
   413 00168 6CAA          			XOR		A,@0xAA		; Check Result ?
   414 00169 3A03          			JBS		Z			; Check Z = 1?
   415 0016A 5073          			JMP	INS_FAIL
   416 0016B 3603          			JBC		N			; Check N = 0?
   417 0016C 5073          			JMP	INS_FAIL
   418 0016D 0350          			CLR		0x50
   419 0016E 3A03          			JBS		Z			; Check Z = 1?
   420 0016F 5073          			JMP	INS_FAIL
   421 00170 2203          			BC		Z
   422 00171 1050          			MOV		A,0x50
   423 00172 6C00          			XOR		A,@0x00		; Check Result ?
   424 00173 3A03          			JBS		Z			; Check Z = 1?
   425 00174 5073          			JMP	INS_FAIL
   426 00175 3603          			JBC		N			; Check N = 0?
   427 00176 5073          			JMP	INS_FAIL
   428 00177               		INST_SUB_A_R:		;-------Instruction Test => SUB A,R
   429 00177 6000          			MOV		A,@0x00
   430 00178 0103          			MOV		STATUS,A
   431 00179 6002          			MOV		A,@0x02		; SUB(2-1)=1
   432 0017A 0150          			MOV		0x50,A		; [0x50] = 0x02
   433 0017B 6001          			MOV		A,@0x01
   434 0017C 0450          			SUB		A,0x50		; A = [0x50] - A
   435 0017D 3803          			JBS		C			; Check C = 1? 	; Resulet is Positive
   436 0017E 5073          			JMP	INS_FAIL
   437 0017F 3903          			JBS		DC			; Check DC = 1?	; Low-Byte is Positve
   438 00180 5073          			JMP	INS_FAIL
   439 00181 3203          			JBC		Z			; Check Z = 0?
   440 00182 5073          			JMP	INS_FAIL
   441 00183 3503          			JBC		OV			; Check OV = 0?
   442 00184 5073          			JMP	INS_FAIL
   443 00185 3603          			JBC		N			; Check N = 0?
   444 00186 5073          			JMP	INS_FAIL
   445 00187 2203          			BC		Z
   446 00188 6C01          			XOR		A,@0x01		; Check Result ?
   447 00189 3A03          			JBS		Z			; Check Z = 1?
   448 0018A 5073          			JMP	INS_FAIL
   449 0018B 3603          			JBC		N			; Check N = 0?
   450 0018C 5073          			JMP	INS_FAIL
   451 0018D 6000          			MOV		A,@0x00
   452 0018E 0103          			MOV		STATUS,A
   453 0018F 6002          			MOV		A,@0x02		; SUB(2-2)=0
   454 00190 0150          			MOV		0x50,A		; [0x50] = 0x02
   455 00191 6002          			MOV		A,@0x02
   456 00192 0450          			SUB		A,0x50		; A = [0x50] - A
   457 00193 3803          			JBS		C			; Check C = 1?	; Result is Positive
   458 00194 5073          			JMP	INS_FAIL
   459 00195 3903          			JBS		DC			; Check DC = 1?	; Low-Byte is Positve
   460 00196 5073          			JMP	INS_FAIL
   461 00197 3A03          			JBS		Z			; Check Z = 1?	; Result is Zero
   462 00198 5073          			JMP	INS_FAIL
   463 00199 3503          			JBC		OV			; Check OV = 0?
   464 0019A 5073          			JMP	INS_FAIL
   465 0019B 3603          			JBC		N			; Check N = 0?
   466 0019C 5073          			JMP	INS_FAIL
   467 0019D 2203          			BC		Z
   468 0019E 6C00          			XOR		A,@0x00		; Check Result ?
   469 0019F 3A03          			JBS		Z			; Check Z = 1?
   470 001A0 5073          			JMP	INS_FAIL
   471 001A1 3603          			JBC		N			; Check N = 0?
   472 001A2 5073          			JMP	INS_FAIL
   473 001A3 6000          			MOV		A,@0x00
   474 001A4 0103          			MOV		STATUS,A
   475 001A5 60FF          			MOV		A,@0xFF		; SUB(-1-127) = -128(0x80)
   476 001A6 0150          			MOV		0x50,A		; [0x50] = 0xFF
   477 001A7 607F          			MOV		A,@0x7F
   478 001A8 0450          			SUB		A,0x50		; A = [0x50] - A
   479 001A9 3803          			JBS		C			; Check C = 1?
   480 001AA 5073          			JMP	INS_FAIL
   481 001AB 3903          			JBS		DC			; Check DC = 1?
   482 001AC 5073          			JMP	INS_FAIL
   483 001AD 3203          			JBC		Z			; Check Z = 0?
   484 001AE 5073          			JMP	INS_FAIL
   485 001AF 3503          			JBC		OV			; Check OV = 0?
   486 001B0 5073          			JMP	INS_FAIL
   487 001B1 3E03          			JBS		N			; Check N = 1?
   488 001B2 5073          			JMP	INS_FAIL
   489 001B3 2203          			BC		Z
   490 001B4 2603          			BC		N
   491 001B5 6C80          			XOR		A,@0x80		; Check Result ?
   492 001B6 3A03          			JBS		Z			; Check Z = 1?
   493 001B7 5073          			JMP	INS_FAIL
   494 001B8 3603          			JBC		N			; Check N = 0?
   495 001B9 5073          			JMP	INS_FAIL
   496 001BA 6000          			MOV		A,@0x00
   497 001BB 0103          			MOV		STATUS,A
   498 001BC 6080          			MOV		A,@0x80		; SUB(-128-127) = 1(0x01)
   499 001BD 0150          			MOV		0x50,A		; [0x50] = 0x80
   500 001BE 607F          			MOV		A,@0x7F
   501 001BF 0450          			SUB		A,0x50		; A = [0x50] - A
   502 001C0 3803          			JBS		C			; Check C = 1?
   503 001C1 5073          			JMP	INS_FAIL
   504 001C2 3103          			JBC		DC			; Check DC = 0?
   505 001C3 5073          			JMP	INS_FAIL
   506 001C4 3203          			JBC		Z			; Check Z = 0?
   507 001C5 5073          			JMP	INS_FAIL
   508 001C6 3D03          			JBS		OV			; Check OV = 1?
   509 001C7 5073          			JMP	INS_FAIL
   510 001C8 3603          			JBC		N			; Check N = 0?
   511 001C9 5073          			JMP	INS_FAIL
   512 001CA 2203          			BC		Z
   513 001CB 2603          			BC		N
   514 001CC 6C01          			XOR		A,@0x01		; Check Result ?
   515 001CD 3A03          			JBS		Z			; Check Z = 1?
   516 001CE 5073          			JMP	INS_FAIL
   517 001CF 3603          			JBC		N			; Check N = 0?
   518 001D0 5073          			JMP	INS_FAIL
   519 001D1 6000          			MOV		A,@0x00
   520 001D2 0103          			MOV		STATUS,A
   521 001D3 6001          			MOV		A,@0x01		; SUB(1-3) = -2(0xFE)
   522 001D4 0150          			MOV		0x50,A		; [0x50] = 0x01
   523 001D5 6003          			MOV		A,@0x03
   524 001D6 0450          			SUB		A,0x50		; A = [0x50] - A
   525 001D7 3003          			JBC		C			; Check C = 0?
   526 001D8 5073          			JMP	INS_FAIL
   527 001D9 3103          			JBC		DC			; Check DC = 0?
   528 001DA 5073          			JMP	INS_FAIL
   529 001DB 3203          			JBC		Z			; Check Z = 0?
   530 001DC 5073          			JMP	INS_FAIL
   531 001DD 3503          			JBC		OV			; Check OV = 0?
   532 001DE 5073          			JMP	INS_FAIL
   533 001DF 3E03          			JBS		N			; Check N = 1?
   534 001E0 5073          			JMP	INS_FAIL
   535 001E1 2203          			BC		Z
   536 001E2 2603          			BC		N
   537 001E3 6CFE          			XOR		A,@0xFE		; Check Result ?
   538 001E4 3A03          			JBS		Z			; Check Z = 1?
   539 001E5 5073          			JMP	INS_FAIL
   540 001E6 3603          			JBC		N			; Check N = 0?
   541 001E7 5073          			JMP	INS_FAIL
   542 001E8               		INST_SUB_R_A:		;-------Instruction Test => SUB R,A
   543 001E8 6000          			MOV		A,@0x00
   544 001E9 0103          			MOV		STATUS,A
   545 001EA 6002          			MOV		A,@0x02
   546 001EB 0150          			MOV		0x50,A		; [0x50] = 0x02
   547 001EC 6001          			MOV		A,@0x01
   548 001ED 0550          			SUB		0x50,A		; [0x50] = [0x50] - 0x01
   549 001EE 1003          			MOV		A,STATUS
   550 001EF 6C1B          			XOR		A,@0x1B		; for non reset
   551                     			;;XOR		A,@0x13
   552 001F0 40F7          			CALL	INST_XOR_JUDGE
   553 001F1 2203          			BC		Z
   554 001F2 2603          			BC		N
   555 001F3 1050          			MOV		A,0x50
   556 001F4 6C01          			XOR		A,@0x01		; Check Result ?
   557 001F5 40F7          			CALL	INST_XOR_JUDGE
   558 001F6 6000          			MOV		A,@0x00
   559 001F7 0103          			MOV		STATUS,A
   560 001F8 6002          			MOV		A,@0x02
   561 001F9 0150          			MOV		0x50,A		; [0x50] = 0x02
   562 001FA 6002          			MOV		A,@0x02
   563 001FB 0550          			SUB		0x50,A		; [0x50] = [0x50] - 0x02
   564 001FC 1003          			MOV		A,STATUS
   565 001FD 6C1F          			XOR		A,@0x1F		; for nono reset
   566                     			;;XOR		A,@0x17
   567 001FE 40F7          			CALL	INST_XOR_JUDGE
   568 001FF 2203          			BC		Z
   569 00200 2603          			BC		N
   570 00201 1050          			MOV		A,0x50
   571 00202 6C00          			XOR		A,@0x00		; Check Result ?
   572 00203 3A03          			JBS		Z			; Check Z = 1?
   573 00204 5073          			JMP	INS_FAIL
   574 00205 3603          			JBC		N			; Check N = 0?
   575 00206 5073          			JMP	INS_FAIL
   576 00207 6000          			MOV		A,@0x00
   577 00208 0103          			MOV		STATUS,A
   578 00209 6080          			MOV		A,@0x80
   579 0020A 0150          			MOV		0x50,A		; [0x50] = 0x80
   580 0020B 6001          			MOV		A,@0x01
   581 0020C 0550          			SUB		0x50,A		; [0x50] = [0x50] - 0x01
   582 0020D 1003          			MOV		A,STATUS
   583 0020E 6C39          			XOR		A,@0x39	;; for non reset
   584                     			;;XOR		A,@0x31
   585 0020F 40F7          			CALL	INST_XOR_JUDGE
   586 00210 2203          			BC		Z
   587 00211 2603          			BC		N
   588 00212 1050          			MOV		A,0x50
   589 00213 6C7F          			XOR		A,@0x7F		; Check Result ?
   590 00214 40F7          			CALL	INST_XOR_JUDGE
   591 00215               		INST_SUB_A_K:		;-------Instruction Test => SUB A,k
   592 00215 40F4          			CALL	STATUS_CLEAR
   593 00216 60FF          			MOV		A,@0xFF		; 0xFF-0xFF
   594 00217 74FF          			SUB		A,@0xFF		; A = 0xFF - 0xFF
   595 00218 3803          			JBS		C			; Check C = 1?
   596 00219 5073          			JMP	INS_FAIL
   597 0021A 3903          			JBS		DC			; Check DC = 1?
   598 0021B 5073          			JMP	INS_FAIL
   599 0021C 3A03          			JBS		Z			; Check Z = 1?
   600 0021D 5073          			JMP	INS_FAIL
   601 0021E 3503          			JBC		OV			; Check OV = 0?
   602 0021F 5073          			JMP	INS_FAIL
   603 00220 3603          			JBC		N			; Check N = 0?
   604 00221 5073          			JMP	INS_FAIL
   605 00222 6C00          			XOR		A,@0x00		; Check Result ?
   606 00223 40F7          			CALL	INST_XOR_JUDGE
   607 00224 40F4          			CALL	STATUS_CLEAR
   608 00225 607F          			MOV		A,@0x7F		; 0x00-0x7F
   609 00226 7400          			SUB		A,@0x00		; A = 0x00 - 0x7F
   610 00227 3003          			JBC		C			; Check C = 0?
   611 00228 5073          			JMP	INS_FAIL
   612 00229 3103          			JBC		DC			; Check DC = 0?
   613 0022A 5073          			JMP	INS_FAIL
   614 0022B 3203          			JBC		Z			; Check Z = 0?
   615 0022C 5073          			JMP	INS_FAIL
   616 0022D 3503          			JBC		OV			; Check OV = 0?
   617 0022E 5073          			JMP	INS_FAIL
   618 0022F 3E03          			JBS		N			; Check N = 1?
   619 00230 5073          			JMP	INS_FAIL
   620 00231 6C81          			XOR		A,@0x81		; Check Result ?
   621 00232 40F7          			CALL	INST_XOR_JUDGE
   622 00233 40F4          			CALL	STATUS_CLEAR
   623 00234 6001          			MOV		A,@0x01		; 0x80-0x01
   624 00235 7480          			SUB		A,@0x80		; A = 0x80 - 0x01
   625 00236 3803          			JBS		C			; Check C = 1?
   626 00237 5073          			JMP	INS_FAIL
   627 00238 3103          			JBC		DC			; Check DC = 0?
   628 00239 5073          			JMP	INS_FAIL
   629 0023A 3203          			JBC		Z			; Check Z = 0?
   630 0023B 5073          			JMP	INS_FAIL
   631 0023C 3D03          			JBS		OV			; Check OV = 1?
   632 0023D 5073          			JMP	INS_FAIL
   633 0023E 3603          			JBC		N			; Check N = 0?
   634 0023F 5073          			JMP	INS_FAIL
   635 00240 6C7F          			XOR		A,@0x7F		; Check Result ?
   636 00241 40F7          			CALL	INST_XOR_JUDGE
   637 00242               		INST_SUBB_A_R:		;-------Instruction Test => SUBB A,R
   638 00242 40F4          			CALL	STATUS_CLEAR
   639 00243 2003          			BC		C			; B = 1
   640 00244 6000          			MOV		A,@0x00		;0x00-0xF
   641 00245 0150          			MOV		0x50,A		; [0x50] = 0x00
   642 00246 60FF          			MOV		A,@0xFF		; A = 0x01
   643 00247 7850          			SUBB	A,0x50		; A = [0x50] - A - B
   644 00248 3003          			JBC		C			; Check C = 0?
   645 00249 5073          			JMP	INS_FAIL
   646 0024A 3103          			JBC		DC			; Check DC = 0?
   647 0024B 5073          			JMP	INS_FAIL
   648 0024C 3A03          			JBS		Z			; Check Z = 1?
   649 0024D 5073          			JMP	INS_FAIL
   650 0024E 3503          			JBC		OV			; Check OV = 0?
   651 0024F 5073          			JMP	INS_FAIL
   652 00250 3603          			JBC		N			; Check N = 0?
   653 00251 5073          			JMP	INS_FAIL
   654 00252 6C00          			XOR		A,@0x00		; Check Result ?
   655 00253 40F7          			CALL	INST_XOR_JUDGE	
   656 00254 40F4          			CALL	STATUS_CLEAR
   657 00255 2003          			BC		C			; B = 1
   658 00256 6000          			MOV		A,@0x00		; 0x00-0x7F
   659 00257 0150          			MOV		0x50,A		; [0x50] = 0x00
   660 00258 607F          			MOV		A,@0x7F		; A = 0x01
   661 00259 7850          			SUBB	A,0x50		; A = [0x50] - A - B
   662 0025A 3003          			JBC		C			; Check C = 0?
   663 0025B 5073          			JMP	INS_FAIL
   664 0025C 3103          			JBC		DC			; Check DC = 0?
   665 0025D 5073          			JMP	INS_FAIL
   666 0025E 3203          			JBC		Z			; Check Z = 0?
   667 0025F 5073          			JMP	INS_FAIL
   668 00260 3503          			JBC		OV			; Check OV = 0?
   669 00261 5073          			JMP	INS_FAIL
   670 00262 3E03          			JBS		N			; Check N = 1?
   671 00263 5073          			JMP	INS_FAIL
   672 00264 6C80          			XOR		A,@0x80		; Check Result ?
   673 00265 40F7          			CALL	INST_XOR_JUDGE
   674 00266 40F4          			CALL	STATUS_CLEAR
   675 00267 2003          			BC		C			; B = 1
   676 00268 6080          			MOV		A,@0x80		; 0x80-0x01
   677 00269 0150          			MOV		0x50,A		; [0x50] = 0x80
   678 0026A 6001          			MOV		A,@0x01		; A = 0x01
   679 0026B 7850          			SUBB	A,0x50		; A = [0x50] - A - B
   680 0026C 3803          			JBS		C			; Check C = 1?
   681 0026D 5073          			JMP	INS_FAIL
   682 0026E 3103          			JBC		DC			; Check DC = 0?
   683 0026F 5073          			JMP	INS_FAIL
   684 00270 3203          			JBC		Z			; Check Z = 0?
   685 00271 5073          			JMP	INS_FAIL
   686 00272 3D03          			JBS		OV			; Check OV = 1?
   687 00273 5073          			JMP	INS_FAIL
   688 00274 3603          			JBC		N			; Check N = 0?
   689 00275 5073          			JMP	INS_FAIL
   690 00276 6C7E          			XOR		A,@0x7E		; Check Result ?
   691 00277 40F7          			CALL	INST_XOR_JUDGE
   692 00278               		INST_SUBB_R_A:			;-------Instruction Test => SUBB R,A
   693 00278 40F4          			CALL	STATUS_CLEAR
   694 00279 2003          			BC		C			; B = 1
   695 0027A 6000          			MOV		A,@0x00		; 0x00-0xFF
   696 0027B 0150          			MOV		0x50,A		; [0x50] = 0x00
   697 0027C 60FF          			MOV		A,@0xFF
   698 0027D 7950          			SUBB	0x50,A		; [0x50] = 0x00 - 0xFF - B
   699 0027E 1003          			MOV		A,STATUS
   700 0027F 6C1C          			XOR		A,@0x1C		; Check Status ?
   701                     			;;XOR		A,@0x14		; Check Status ?
   702 00280 40F7          			CALL	INST_XOR_JUDGE
   703 00281 1050          			MOV		A,0x50
   704 00282 6C00          			XOR		A,@0x00		; Check Result ?
   705 00283 40F7          			CALL	INST_XOR_JUDGE
   706 00284 40F4          			CALL	STATUS_CLEAR
   707 00285 2003          			BC		C			; B = 1
   708 00286 6000          			MOV		A,@0x00		; 0x00-0x7F
   709 00287 0150          			MOV		0x50,A		; [0x50] = 0x00
   710 00288 607F          			MOV		A,@0x7F
   711 00289 7950          			SUBB	0x50,A		; [0x50] = 0x00 - 0x7F - B
   712 0028A 1003          			MOV		A,STATUS
   713 0028B 6C58          			XOR		A,@0x58		; Check Status ?
   714                     			;;XOR		A,@0x50		; Check Status ?
   715 0028C 40F7          			CALL	INST_XOR_JUDGE
   716 0028D 1050          			MOV		A,0x50
   717 0028E 6C80          			XOR		A,@0x80		; Check Result ?
   718 0028F 40F7          			CALL	INST_XOR_JUDGE
   719 00290 40F4          			CALL	STATUS_CLEAR
   720 00291 2003          			BC		C			; B = 1
   721 00292 6080          			MOV		A,@0x80		; ,0x80-0x01
   722 00293 0150          			MOV		0x50,A		; [0x50] = 0x80
   723 00294 6001          			MOV		A,@0x01
   724 00295 7950          			SUBB	0x50,A		; [0x50] = 0x80 - 0x01 - B
   725 00296 1003          			MOV		A,STATUS
   726 00297 6C39          			XOR		A,@0x39		; Check Status ?
   727                     			;;XOR		A,@0x31		; Check Status ?
   728 00298 40F7          			CALL	INST_XOR_JUDGE
   729 00299 1050          			MOV		A,0x50
   730 0029A 6C7E          			XOR		A,@0x7E		; Check Result ?
   731 0029B 40F7          			CALL	INST_XOR_JUDGE
   732                     
   733 0029C               		INST_DECA:			;-------Instruction Test => DECA R
   734 0029C 6000          			MOV		A,@0x00
   735 0029D 0103          			MOV		STATUS,A
   736 0029E 6020          			MOV		A,@0x20		; 0x20-1
   737 0029F 0150          			MOV		0x50,A		; [0x50] = 0x20
   738 002A0 0650          			DECA	0x50		; A = [0x50] - 1
   739 002A1 3803          			JBS		C			; Check C = 1?	; Result is Positive
   740 002A2 5073          			JMP	INS_FAIL
   741 002A3 3103          			JBC		DC			; Check DC = 0?
   742 002A4 5073          			JMP	INS_FAIL
   743 002A5 3203          			JBC		Z			; Check Z = 0?
   744 002A6 5073          			JMP	INS_FAIL
   745 002A7 3503          			JBC		OV			; Check OV = 0?
   746 002A8 5073          			JMP	INS_FAIL
   747 002A9 3603          			JBC		N			; Check N = 0?
   748 002AA 5073          			JMP	INS_FAIL
   749 002AB 6C1F          			XOR		A,@0x1F		; Check Result ?
   750 002AC 3A03          			JBS		Z			; Check Z = 1?
   751 002AD 5073          			JMP	INS_FAIL
   752 002AE 3603          			JBC		N			; Check N = 0?
   753 002AF 5073          			JMP	INS_FAIL
   754 002B0 6000          			MOV		A,@0x00
   755 002B1 0103          			MOV		STATUS,A
   756 002B2 6001          			MOV		A,@0x01		; 0x01-1
   757 002B3 0150          			MOV		0x50,A		; [0x50] = 0x01
   758 002B4 0650          			DECA	0x50		; A = [0x50] - 1
   759 002B5 3803          			JBS		C			; Check C = 1?	; Result is Positive
   760 002B6 5073          			JMP	INS_FAIL
   761 002B7 3903          			JBS		DC			; Check DC = 1?
   762 002B8 5073          			JMP	INS_FAIL
   763 002B9 3A03          			JBS		Z			; Check Z = 1?
   764 002BA 5073          			JMP	INS_FAIL
   765 002BB 3503          			JBC		OV			; Check OV = 0?
   766 002BC 5073          			JMP	INS_FAIL
   767 002BD 3603          			JBC		N			; Check N = 0?
   768 002BE 5073          			JMP	INS_FAIL
   769 002BF 2203          			BC		Z
   770 002C0 6C00          			XOR		A,@0x00		; Check Result ?
   771 002C1 3A03          			JBS		Z			; Check Z = 1?
   772 002C2 5073          			JMP	INS_FAIL
   773 002C3 3603          			JBC		N			; Check N = 0?
   774 002C4 5073          			JMP	INS_FAIL
   775 002C5 6000          			MOV		A,@0x00
   776 002C6 0103          			MOV		STATUS,A
   777 002C7 6000          			MOV		A,@0x00		; 0x00-1
   778 002C8 0150          			MOV		0x50,A		; [0x50] = 0x00
   779 002C9 0650          			DECA	0x50		; A = [0x50] - 1
   780 002CA 3003          			JBC		C			; Check C = 0?
   781 002CB 5073          			JMP	INS_FAIL
   782 002CC 3103          			JBC		DC			; Check DC = 0?
   783 002CD 5073          			JMP	INS_FAIL
   784 002CE 3203          			JBC		Z			; Check Z = 0?
   785 002CF 5073          			JMP	INS_FAIL
   786 002D0 3503          			JBC		OV			; Check OV = 0?
   787 002D1 5073          			JMP	INS_FAIL
   788 002D2 3E03          			JBS		N			; Check N = 1?
   789 002D3 5073          			JMP	INS_FAIL
   790 002D4 2203          			BC		Z
   791 002D5 2603          			BC		N
   792 002D6 6CFF          			XOR		A,@0xFF		; Check Result ?
   793 002D7 3A03          			JBS		Z			; Check Z = 1?
   794 002D8 5073          			JMP	INS_FAIL
   795 002D9 3603          			JBC		N			; Check N = 0?
   796 002DA 5073          			JMP	INS_FAIL
   797 002DB 6000          			MOV		A,@0x00
   798 002DC 0103          			MOV		STATUS,A
   799 002DD 6080          			MOV		A,@0x80		; 0x80-1
   800 002DE 0150          			MOV		0x50,A		; [0x50] = 0x80
   801 002DF 0650          			DECA	0x50		; A = [0x50] - 1
   802 002E0 3803          			JBS		C			; Check C = 1?
   803 002E1 5073          			JMP	INS_FAIL
   804 002E2 3103          			JBC		DC			; Check DC = 0?
   805 002E3 5073          			JMP	INS_FAIL
   806 002E4 3203          			JBC		Z			; Check Z = 0?
   807 002E5 5073          			JMP	INS_FAIL
   808 002E6 3D03          			JBS		OV			; Check OV = 1?
   809 002E7 5073          			JMP	INS_FAIL
   810 002E8 3603          			JBC		N			; Check N = 0?
   811 002E9 5073          			JMP	INS_FAIL
   812 002EA 2203          			BC		Z
   813 002EB 2603          			BC		N
   814 002EC 6C7F          			XOR		A,@0x7F		; Check Result ?
   815 002ED 3A03          			JBS		Z			; Check Z = 1?
   816 002EE 5073          			JMP	INS_FAIL
   817 002EF 3603          			JBC		N			; Check N = 0?
   818 002F0 5073          			JMP	INS_FAIL
   819                     
   820                     
   821                     
   822 002F1               		INST_DEC:			;-------Instruction Test => DEC R
   823 002F1 6000          			MOV		A,@0x00
   824 002F2 0103          			MOV		STATUS,A
   825 002F3 6020          			MOV		A,@0x20		; 0x20-1
   826 002F4 0150          			MOV		0x50,A		; [0x50] = 0x20
   827 002F5 0750          			DEC		0x50		; [0x50] = [0x50] - 0x01
   828 002F6 1003          			MOV		A,STATUS
   829 002F7 6C19          			XOR		A,@0x19		; Check Status ? for non rest
   830                     			;;XOR		A,@0x11		; Check Status ?
   831 002F8 3A03          			JBS		Z			; Check Z = 1?
   832 002F9 5073          			JMP	INS_FAIL
   833 002FA 3603          			JBC		N			; Check N = 0?
   834 002FB 5073          			JMP	INS_FAIL
   835 002FC 2203          			BC		Z
   836 002FD 1050          			MOV		A,0x50
   837 002FE 6C1F          			XOR		A,@0x1F		; Check Result ?
   838 002FF 3A03          			JBS		Z			; Check Z = 1?
   839 00300 5073          			JMP	INS_FAIL
   840 00301 3603          			JBC		N			; Check N = 0?
   841 00302 5073          			JMP	INS_FAIL
   842 00303 6000          			MOV		A,@0x00
   843 00304 0103          			MOV		STATUS,A
   844 00305 6001          			MOV		A,@0x01		; 0x01-1
   845 00306 0150          			MOV		0x50,A		; [0x50] = 0x01
   846 00307 0750          			DEC		0x50		; [0x50] = [0x50] - 0x01
   847 00308 1003          			MOV		A,STATUS
   848 00309 6C1F          			XOR		A,@0x1F		; Check Status ? for non reset
   849                     			;;XOR		A,@0x17		; Check Status ?
   850 0030A 3A03          			JBS		Z			; Check Z = 1?
   851 0030B 5073          			JMP	INS_FAIL
   852 0030C 3603          			JBC		N			; Check N = 0?
   853 0030D 5073          			JMP	INS_FAIL
   854 0030E 2203          			BC		Z
   855 0030F 1050          			MOV		A,0x50
   856 00310 6C00          			XOR		A,@0x00		; Check Result ?
   857 00311 3A03          			JBS		Z			; Check Z = 1?
   858 00312 5073          			JMP	INS_FAIL
   859 00313 3603          			JBC		N			; Check N = 0?
   860 00314 5073          			JMP	INS_FAIL
   861 00315 6000          			MOV		A,@0x00
   862 00316 0103          			MOV		STATUS,A
   863 00317 6000          			MOV		A,@0x00		; 0x00-1
   864 00318 0150          			MOV		0x50,A		; [0x50] = 0x00
   865 00319 0750          			DEC		0x50		; [0x50] = [0x50] - 0x01
   866 0031A 1003          			MOV		A,STATUS
   867 0031B 6C58          			XOR		A,@0x58		; Check Status ? for non reset
   868                     			;;XOR		A,@0x50		; Check Status ?
   869 0031C 3A03          			JBS		Z			; Check Z = 1?
   870 0031D 5073          			JMP	INS_FAIL
   871 0031E 3603          			JBC		N			; Check N = 0?
   872 0031F 5073          			JMP	INS_FAIL
   873 00320 2203          			BC		Z
   874 00321 1050          			MOV		A,0x50
   875 00322 6CFF          			XOR		A,@0xFF		; Check Result ?
   876 00323 3A03          			JBS		Z			; Check Z = 1?
   877 00324 5073          			JMP	INS_FAIL
   878 00325 3603          			JBC		N			; Check N = 0?
   879 00326 5073          			JMP	INS_FAIL
   880 00327 6000          			MOV		A,@0x00
   881 00328 0103          			MOV		STATUS,A
   882 00329 6080          			MOV		A,@0x80		; 0x80-1
   883 0032A 0150          			MOV		0x50,A		; [0x50] = 0x80
   884 0032B 0750          			DEC		0x50		; [0x50] = [0x50] - 0x01
   885 0032C 1003          			MOV		A,STATUS
   886 0032D 6C39          			XOR		A,@0x39		; Check Status ? for non reset
   887                     			;;XOR		A,@0x31		; Check Status ?
   888 0032E 3A03          			JBS		Z			; Check Z = 1?
   889 0032F 5073          			JMP	INS_FAIL
   890 00330 3603          			JBC		N			; Check N = 0?
   891 00331 5073          			JMP	INS_FAIL
   892 00332 2203          			BC		Z
   893 00333 1050          			MOV		A,0x50
   894 00334 6C7F          			XOR		A,@0x7F		; Check Result ?
   895 00335 3A03          			JBS		Z			; Check Z = 1?
   896 00336 5073          			JMP	INS_FAIL
   897 00337 3603          			JBC		N			; Check N = 0?
   898 00338 5073          			JMP	INS_FAIL
   899                     
   900 00339               		INST_ADD_A_R:		;-------Instruction Test => ADD A,R
   901 00339 40F4          			CALL	STATUS_CLEAR	; 0x80+0x7F
   902 0033A 6080          			MOV		A,@0x80
   903 0033B 0150          			MOV		0x50,A		; [0x50] = 0x80
   904 0033C 607F          			MOV		A,@0x7F		; 
   905 0033D 0E50          			ADD		A,0x50		; A = 0x7F + 0x80
   906 0033E 3003          			JBC		C			; Check C = 0?
   907 0033F 5073          			JMP	INS_FAIL
   908 00340 3103          			JBC		DC			; Check DC = 0?
   909 00341 5073          			JMP	INS_FAIL
   910 00342 3203          			JBC		Z			; Check Z = 0?
   911 00343 5073          			JMP	INS_FAIL
   912 00344 3503          			JBC		OV			; Check OV = 0?
   913 00345 5073          			JMP	INS_FAIL
   914 00346 3E03          			JBS		N			; Check N = 1?	; Result is Negative
   915 00347 5073          			JMP	INS_FAIL
   916 00348 2203          			BC		Z
   917 00349 2603          			BC		N
   918 0034A 6CFF          			XOR		A,@0xFF		; Check Result ?
   919 0034B 3A03          			JBS		Z			; Check Z = 1?
   920 0034C 5073          			JMP	INS_FAIL
   921 0034D 3603          			JBC		N			; Check N = 0?
   922 0034E 5073          			JMP	INS_FAIL
   923 0034F 40F4          			CALL	STATUS_CLEAR	; 0xFF+0x01
   924 00350 60FF          			MOV		A,@0xFF
   925 00351 0150          			MOV		0x50,A		; [0x50] = 0xFF
   926 00352 6001          			MOV		A,@0x01		; 
   927 00353 0E50          			ADD		A,0x50		; A = 0x01 + 0xFF
   928 00354 3803          			JBS		C			; Check C = 1?
   929 00355 5073          			JMP	INS_FAIL
   930 00356 3903          			JBS		DC			; Check DC = 1?
   931 00357 5073          			JMP	INS_FAIL
   932 00358 3A03          			JBS		Z			; Check Z = 1?
   933 00359 5073          			JMP	INS_FAIL
   934 0035A 3503          			JBC		OV			; Check OV = 0?
   935 0035B 5073          			JMP	INS_FAIL
   936 0035C 3603          			JBC		N			; Check N = 0?
   937 0035D 5073          			JMP	INS_FAIL
   938 0035E 2203          			BC		Z
   939 0035F 2603          			BC		N
   940 00360 6C00          			XOR		A,@0x00		; Check Result ?
   941 00361 3A03          			JBS		Z			; Check Z = 1?
   942 00362 5073          			JMP	INS_FAIL
   943 00363 3603          			JBC		N			; Check N = 0?
   944 00364 5073          			JMP	INS_FAIL
   945 00365 40F4          			CALL	STATUS_CLEAR	; 0x7F+0x01
   946 00366 607F          			MOV		A,@0x7F
   947 00367 0150          			MOV		0x50,A		; [0x50] = 0x7F
   948 00368 6001          			MOV		A,@0x01		; 
   949 00369 0E50          			ADD		A,0x50		; A = 0x01 + 0x7F
   950 0036A 3003          			JBC		C			; Check C = 0?
   951 0036B 5073          			JMP	INS_FAIL
   952 0036C 3903          			JBS		DC			; Check DC = 1?
   953 0036D 5073          			JMP	INS_FAIL
   954 0036E 3203          			JBC		Z			; Check Z = 0?
   955 0036F 5073          			JMP	INS_FAIL
   956 00370 3D03          			JBS		OV			; Check OV = 1?
   957 00371 5073          			JMP	INS_FAIL
   958 00372 3E03          			JBS		N			; Check N = 1?
   959 00373 5073          			JMP	INS_FAIL
   960 00374 2203          			BC		Z
   961 00375 2603          			BC		N
   962 00376 6C80          			XOR		A,@0x80		; Check Result ?
   963 00377 3A03          			JBS		Z			; Check Z = 1?
   964 00378 5073          			JMP	INS_FAIL
   965 00379 3603          			JBC		N			; Check N = 0?
   966 0037A 5073          			JMP	INS_FAIL
   967 0037B               		INST_ADD_R_A:		;-------Instruction Test => ADD R,A
   968 0037B 40F4          			CALL	STATUS_CLEAR	; 0x80+0x7F
   969 0037C 6080          			MOV		A,@0x80
   970 0037D 0150          			MOV		0x50,A		; [0x50] = 0x80
   971 0037E 607F          			MOV		A,@0x7F		; A = 0x7F
   972 0037F 0F50          			ADD		0x50,A		; [0x50] = 0x80 + 0x7F
   973 00380 1003          			MOV		A,STATUS
   974 00381 6C58          			XOR		A,@0x58		; Check Status ? for non reset
   975                     			;;XOR		A,@0x50		; Check Status ?
   976 00382 3A03          			JBS		Z			; Check Z = 1?
   977 00383 5073          			JMP	INS_FAIL
   978 00384 3603          			JBC		N			; Check N = 0?
   979 00385 5073          			JMP	INS_FAIL
   980 00386 1050          			MOV		A,0x50
   981 00387 6CFF          			XOR		A,@0xFF		; Check Result ?
   982 00388 3A03          			JBS		Z			; Check Z = 1?
   983 00389 5073          			JMP	INS_FAIL
   984 0038A 3603          			JBC		N			; Check N = 0?
   985 0038B 5073          			JMP	INS_FAIL
   986 0038C 40F4          			CALL	STATUS_CLEAR	; 0xFF+0x01
   987 0038D 60FF          			MOV		A,@0xFF
   988 0038E 0150          			MOV		0x50,A		; [0x50] = 0xFF
   989 0038F 6001          			MOV		A,@0x01		; A = 0x01
   990 00390 0F50          			ADD		0x50,A		; [0x50] = 0xFF + 0x01
   991 00391 1003          			MOV		A,STATUS
   992 00392 6C1F          			XOR		A,@0x1F		; Check Status ? for non reset
   993                     			;;XOR		A,@0x17		; Check Status ?
   994 00393 3A03          			JBS		Z			; Check Z = 1?
   995 00394 5073          			JMP	INS_FAIL
   996 00395 3603          			JBC		N			; Check N = 0?
   997 00396 5073          			JMP	INS_FAIL
   998 00397 1050          			MOV		A,0x50
   999 00398 6C00          			XOR		A,@0x00		; Check Result ?
  1000 00399 3A03          			JBS		Z			; Check Z = 1?
  1001 0039A 5073          			JMP	INS_FAIL
  1002 0039B 3603          			JBC		N			; Check N = 0?
  1003 0039C 5073          			JMP	INS_FAIL
  1004 0039D 40F4          			CALL	STATUS_CLEAR	;0x7F+0x01
  1005 0039E 607F          			MOV		A,@0x7F
  1006 0039F 0150          			MOV		0x50,A		; [0x50] = 0x7F
  1007 003A0 6001          			MOV		A,@0x01		; A = 0x01
  1008 003A1 0F50          			ADD		0x50,A		; [0x50] = 0x7F + 0x01
  1009 003A2 1003          			MOV		A,STATUS
  1010 003A3 6C7A          			XOR		A,@0x7A		; Check Status ? for non reset
  1011                     			;;XOR		A,@0x72		; Check Status ?
  1012 003A4 3A03          			JBS		Z			; Check Z = 1?
  1013 003A5 5073          			JMP	INS_FAIL
  1014 003A6 3603          			JBC		N			; Check N = 0?
  1015 003A7 5073          			JMP	INS_FAIL
  1016 003A8 1050          			MOV		A,0x50
  1017 003A9 6C80          			XOR		A,@0x80		; Check Result ?
  1018 003AA 3A03          			JBS		Z			; Check Z = 1?
  1019 003AB 5073          			JMP	INS_FAIL
  1020 003AC 3603          			JBC		N			; Check N = 0?
  1021 003AD 5073          			JMP	INS_FAIL
  1022 003AE               		INST_ADD_A_K:		;-------Instruction Test => ADD A,k
  1023 003AE 40F4          			CALL	STATUS_CLEAR
  1024 003AF 607F          			MOV		A,@0x7F		;0x7F+0x01
  1025 003B0 7C01          			ADD		A,@0x01		; A = 0x01 + A
  1026 003B1 3003          			JBC		C			; Check C = 0?
  1027 003B2 5073          			JMP	INS_FAIL
  1028 003B3 3903          			JBS		DC			; Check DC = 1?
  1029 003B4 5073          			JMP	INS_FAIL
  1030 003B5 3203          			JBC		Z			; Check Z = 0?
  1031 003B6 5073          			JMP	INS_FAIL
  1032 003B7 3D03          			JBS		OV			; Check OV = 1?
  1033 003B8 5073          			JMP	INS_FAIL
  1034 003B9 3E03          			JBS		N			; Check N = 1?
  1035 003BA 5073          			JMP	INS_FAIL
  1036 003BB 6C80          			XOR		A,@0x80		; Check Result ?
  1037 003BC 40F7          			CALL	INST_XOR_JUDGE
  1038 003BD 40F4          			CALL	STATUS_CLEAR
  1039 003BE 60FF          			MOV		A,@0xFF		;0xFF+0x01
  1040 003BF 7C01          			ADD		A,@0x01		; A = 0x01 + A
  1041 003C0 3803          			JBS		C			; Check C = 1?
  1042 003C1 5073          			JMP	INS_FAIL
  1043 003C2 3903          			JBS		DC			; Check DC = 1?
  1044 003C3 5073          			JMP	INS_FAIL
  1045 003C4 3A03          			JBS		Z			; Check Z = 1?
  1046 003C5 5073          			JMP	INS_FAIL
  1047 003C6 3503          			JBC		OV			; Check OV = 0?
  1048 003C7 5073          			JMP	INS_FAIL
  1049 003C8 3603          			JBC		N			; Check N = 0?
  1050 003C9 5073          			JMP	INS_FAIL
  1051 003CA 6C00          			XOR		A,@0x00		; Check Result ?
  1052 003CB 40F7          			CALL	INST_XOR_JUDGE
  1053 003CC 40F4          			CALL	STATUS_CLEAR
  1054 003CD 607F          			MOV		A,@0x7F		; 0x80+0x7F
  1055 003CE 7C80          			ADD		A,@0x80		; A = 0x80 + A
  1056 003CF 3003          			JBC		C			; Check C = 0?
  1057 003D0 5073          			JMP	INS_FAIL
  1058 003D1 3103          			JBC		DC			; Check DC = 0?
  1059 003D2 5073          			JMP	INS_FAIL
  1060 003D3 3203          			JBC		Z			; Check Z = 0?
  1061 003D4 5073          			JMP	INS_FAIL
  1062 003D5 3503          			JBC		OV			; Check OV = 0?
  1063 003D6 5073          			JMP	INS_FAIL
  1064 003D7 3E03          			JBS		N			; Check N = 1?
  1065 003D8 5073          			JMP	INS_FAIL
  1066 003D9 6CFF          			XOR		A,@0xFF		; Check Result ?
  1067 003DA 40F7          			CALL	INST_XOR_JUDGE
  1068 003DB               		INST_ADC_A_R:		;-------Instruction Test => ADC A,R
  1069 003DB 40F4          			CALL	STATUS_CLEAR
  1070 003DC 2803          			BS		C			; 0x7F+0x00
  1071 003DD 607F          			MOV		A,@0x7F		
  1072 003DE 0150          			MOV		0x50,A		; [0x50] = 0x7F
  1073 003DF 6000          			MOV		A,@0x00		; A = 0x00
  1074 003E0 7E50          			ADC		A,0x50		; A = A + [0x50] + C
  1075 003E1 3003          			JBC		C			; Check C = 0?
  1076 003E2 5073          			JMP	INS_FAIL
  1077 003E3 3903          			JBS		DC			; Check DC = 1?
  1078 003E4 5073          			JMP	INS_FAIL
  1079 003E5 3203          			JBC		Z			; Check Z = 0?
  1080 003E6 5073          			JMP	INS_FAIL
  1081 003E7 3D03          			JBS		OV			; Check OV = 1?
  1082 003E8 5073          			JMP	INS_FAIL
  1083 003E9 3E03          			JBS		N			; Check N = 1?
  1084 003EA 5073          			JMP	INS_FAIL
  1085 003EB 6C80          			XOR		A,@0x80		; Check Result ?
  1086 003EC 40F7          			CALL	INST_XOR_JUDGE
  1087 003ED 40F4          			CALL	STATUS_CLEAR
  1088 003EE 2803          			BS		C			; 0x80+0x7F
  1089 003EF 6080          			MOV		A,@0x80
  1090 003F0 0150          			MOV		0x50,A		; [0x50] = 0x80
  1091 003F1 607F          			MOV		A,@0x7F		; A = 0x7F
  1092 003F2 7E50          			ADC		A,0x50		; A = A + [0x50] + C
  1093 003F3 3803          			JBS		C			; Check C = 1?
  1094 003F4 5073          			JMP	INS_FAIL
  1095 003F5 3903          			JBS		DC			; Check DC = 1?
  1096 003F6 5073          			JMP	INS_FAIL
  1097 003F7 3A03          			JBS		Z			; Check Z = 1?
  1098 003F8 5073          			JMP	INS_FAIL
  1099 003F9 3503          			JBC		OV			; Check OV = 0?
  1100 003FA 5073          			JMP	INS_FAIL
  1101 003FB 3603          			JBC		N			; Check N = 0?
  1102 003FC 5073          			JMP	INS_FAIL
  1103 003FD 6C00          			XOR		A,@0x00		; Check Result ?
  1104 003FE 40F7          			CALL	INST_XOR_JUDGE
  1105 003FF               		INST_ADC_R_A:		;-------Instruction Test => ADC R,A
  1106 003FF 40F4          			CALL	STATUS_CLEAR
  1107 00400 2803          			BS		C			;0x7F+0x00
  1108 00401 607F          			MOV		A,@0x7F
  1109 00402 0150          			MOV		0x50,A		; [0x50] = 0x7F
  1110 00403 6000          			MOV		A,@0x00		; A = 0x00
  1111 00404 2203          			BC		Z
  1112 00405 7F50          			ADC		0x50,A		; TMP1 = A + [0x50] + C
  1113 00406 1003          			MOV		A,STATUS
  1114 00407 6C7A          			XOR		A,@0x7A		; Check Status ?
  1115                     			;;XOR		A,@0x72		; Check Status ?
  1116 00408 40F7          			CALL	INST_XOR_JUDGE
  1117 00409 1050          			MOV		A,0x50
  1118 0040A 6C80          			XOR		A,@0x80		; Check Result ?
  1119 0040B 40F7          			CALL	INST_XOR_JUDGE
  1120 0040C 40F4          			CALL	STATUS_CLEAR
  1121 0040D 2803          			BS		C			;0x80+0x7F
  1122 0040E 6080          			MOV		A,@0x80
  1123 0040F 0150          			MOV		0x50,A		; [0x50] = 0x80
  1124 00410 607F          			MOV		A,@0x7F		; A = 0x7F
  1125 00411 2203          			BC		Z
  1126 00412 7F50          			ADC		0x50,A		; TMP1 = A + [0x50] + C
  1127 00413 1003          			MOV		A,STATUS
  1128 00414 6C1F          			XOR		A,@0x1F		; Check Status ?
  1129                     			;;XOR		A,@0x17		; Check Status ?
  1130 00415 40F7          			CALL	INST_XOR_JUDGE
  1131 00416 1050          			MOV		A,0x50
  1132 00417 6C00          			XOR		A,@0x00		; Check Result ?
  1133 00418 40F7          			CALL	INST_XOR_JUDGE
  1134                     
  1135 00419               		INST_INCA:			;-------Instruction Test => INCA R
  1136 00419 40F4          			CALL	STATUS_CLEAR	; 0x7F+0x01
  1137 0041A 607F          			MOV		A,@0x7F
  1138 0041B 0150          			MOV		0x50,A		; [0x50] = 0x7F
  1139 0041C 1450          			INCA	0x50		; A = [0x50] +1		
  1140 0041D 3003          			JBC		C			; Check C = 0?
  1141 0041E 5073          			JMP	INS_FAIL
  1142 0041F 3903          			JBS		DC			; Check DC = 1?
  1143 00420 5073          			JMP	INS_FAIL
  1144 00421 3203          			JBC		Z			; Check Z = 0?
  1145 00422 5073          			JMP	INS_FAIL
  1146 00423 3D03          			JBS		OV			; Check OV = 1?
  1147 00424 5073          			JMP	INS_FAIL
  1148 00425 3E03          			JBS		N			; Check N = 1?
  1149 00426 5073          			JMP	INS_FAIL
  1150 00427 2203          			BC		Z
  1151 00428 2603          			BC		N
  1152 00429 6C80          			XOR		A,@0x80		; Check Result ?
  1153 0042A 3A03          			JBS		Z			; Check Z = 1?
  1154 0042B 5073          			JMP	INS_FAIL
  1155 0042C 3603          			JBC		N			; Check N = 0?
  1156 0042D 5073          			JMP	INS_FAIL
  1157 0042E 40F4          			CALL	STATUS_CLEAR	; 0xFF+0x01
  1158 0042F 60FF          			MOV		A,@0xFF
  1159 00430 0150          			MOV		0x50,A		; [0x50] = 0xFF
  1160 00431 1450          			INCA	0x50		; A = [0x50] +1		
  1161 00432 3803          			JBS		C			; Check C = 1?
  1162 00433 5073          			JMP	INS_FAIL
  1163 00434 3903          			JBS		DC			; Check DC = 1?
  1164 00435 5073          			JMP	INS_FAIL
  1165 00436 3A03          			JBS		Z			; Check Z = 1?
  1166 00437 5073          			JMP	INS_FAIL
  1167 00438 3503          			JBC		OV			; Check OV = 0?
  1168 00439 5073          			JMP	INS_FAIL
  1169 0043A 3603          			JBC		N			; Check N = 0?
  1170 0043B 5073          			JMP	INS_FAIL
  1171 0043C 2203          			BC		Z
  1172 0043D 2603          			BC		N
  1173 0043E 6C00          			XOR		A,@0x00		; Check Result ?
  1174 0043F 3A03          			JBS		Z			; Check Z = 1?
  1175 00440 5073          			JMP	INS_FAIL
  1176 00441 3603          			JBC		N			; Check N = 0?
  1177 00442 5073          			JMP	INS_FAIL
  1178                     
  1179 00443               		INST_INC:			;-------Instruction Test => INC R
  1180 00443 40F4          			CALL 	STATUS_CLEAR	; 0x7F+0x01
  1181 00444 607F          			MOV		A,@0x7F
  1182 00445 0150          			MOV		0x50,A		; [0x50] = 0x7F
  1183 00446 1550          			INC		0x50		; [0x50] = [0x50] + 0x01
  1184 00447 1003          			MOV		A,STATUS
  1185 00448 6C7A          			XOR		A,@0x7A		; Check Status ?
  1186                     			;;XOR		A,@0x72		; Check Status ?
  1187 00449 3A03          			JBS		Z			; Check Z = 1?
  1188 0044A 5073          			JMP	INS_FAIL
  1189 0044B 3603          			JBC		N			; Check N = 0?
  1190 0044C 5073          			JMP	INS_FAIL
  1191 0044D 1050          			MOV		A,0x50
  1192 0044E 6C80          			XOR		A,@0x80		; Check Result ?
  1193 0044F 3A03          			JBS		Z			; Check Z = 1?
  1194 00450 5073          			JMP	INS_FAIL
  1195 00451 3603          			JBC		N			; Check N = 0?
  1196 00452 5073          			JMP	INS_FAIL
  1197 00453 40F4          			CALL	STATUS_CLEAR	; 0xFF+0x01
  1198 00454 60FF          			MOV		A,@0xFF
  1199 00455 0150          			MOV		0x50,A		; [0x50] = 0x7F
  1200 00456 1550          			INC		0x50		; [0x50] = [0x50] + 0x01
  1201 00457 1003          			MOV		A,STATUS
  1202 00458 6C1F          			XOR		A,@0x1F		; Check Status ?
  1203                     			;;XOR		A,@0x17		; Check Status ?
  1204 00459 3A03          			JBS		Z			; Check Z = 1?
  1205 0045A 5073          			JMP	INS_FAIL
  1206 0045B 3603          			JBC		N			; Check N = 0?
  1207 0045C 5073          			JMP	INS_FAIL
  1208 0045D 1050          			MOV		A,0x50
  1209 0045E 6C00          			XOR		A,@0x00		; Check Result ?
  1210 0045F 3A03          			JBS		Z			; Check Z = 1?
  1211 00460 5073          			JMP	INS_FAIL
  1212 00461 3603          			JBC		N			; Check N = 0?
  1213 00462 5073          			JMP	INS_FAIL
  1214                     
  1215 00463               		INST_NEG_R:			;-------Instruction Test => NEG R
  1216 00463 40F4          			CALL	STATUS_CLEAR
  1217 00464 6000          			MOV		A,@0x00		; 0x00
  1218 00465 0150          			MOV		0x50,A		; [0x50] = 0x00
  1219 00466 7D50          			NEG		0x50
  1220 00467 1003          			MOV		A,STATUS
  1221 00468 6C1F          			XOR		A,@0x1F		; Check Status ?
  1222                     			;;XOR		A,@0x17		; Check Status ?
  1223 00469 40F7          			CALL	INST_XOR_JUDGE
  1224 0046A 1050          			MOV		A,0x50
  1225 0046B 6C00          			XOR		A,@0x00		; Check Result ?
  1226 0046C 40F7          			CALL	INST_XOR_JUDGE
  1227 0046D 40F4          			CALL	STATUS_CLEAR
  1228 0046E 6001          			MOV		A,@0x01		; 0x01
  1229 0046F 0150          			MOV		0x50,A		; [0x50] = 0x01
  1230 00470 7D50          			NEG		0x50
  1231 00471 1003          			MOV		A,STATUS
  1232 00472 6C58          			XOR		A,@0x58		; Check Status ?
  1233                     			;;XOR		A,@0x50		; Check Status ?
  1234 00473 40F7          			CALL	INST_XOR_JUDGE
  1235 00474 1050          			MOV		A,0x50
  1236 00475 6CFF          			XOR		A,@0xFF		; Check Result ?
  1237 00476 40F7          			CALL	INST_XOR_JUDGE
  1238 00477 40F4          			CALL	STATUS_CLEAR
  1239 00478 6080          			MOV		A,@0x80		; 0x80
  1240 00479 0150          			MOV		0x50,A		; [0x50] = 0x80
  1241 0047A 7D50          			NEG		0x50
  1242 0047B 1003          			MOV		A,STATUS
  1243 0047C 6C7A          			XOR		A,@0x7A		; Check Status ?
  1244                     			;;XOR		A,@0x72		; Check Status ?
  1245 0047D 40F7          			CALL	INST_XOR_JUDGE
  1246 0047E 1050          			MOV		A,0x50
  1247 0047F 6C80          			XOR		A,@0x80		; Check Result ?
  1248 00480 40F7          			CALL	INST_XOR_JUDGE
  1249                     
  1250 00481 0012          		RET
  1251 00482               	TEST_INST_LOGIC_I:
  1252 00482               		INST_BTG:			;-------Instruction Test => BTG R,b	
  1253 00482 40F4          			CALL	STATUS_CLEAR
  1254 00483 60FF          			MOV		A,@0xFF
  1255 00484 0104          			MOV		RSR,A		; Start Address
  1256 00485 0084          			BTG		RSR
  1257 00486 1004          			MOV		A,RSR
  1258 00487 6CFE          			XOR		A,@0xFE		; Check Result ?
  1259 00488 40F7          			CALL	INST_XOR_JUDGE
  1260 00489               		INST_OR_A_R:		;-------Instruction Test => OR A,R
  1261 00489 6000          			MOV		A,@0x00
  1262 0048A 0103          			MOV		STATUS,A
  1263 0048B 6000          			MOV		A,@0x00
  1264 0048C 0150          			MOV		0x50,A		; [0x50] = 0x00
  1265 0048D 6000          			MOV		A,@0x00
  1266 0048E 2203          			BC		Z
  1267 0048F 0850          			OR		A,0x50		; A = A | [0x50]
  1268 00490 3003          			JBC		C			; Check C = 0?
  1269 00491 5073          			JMP	INS_FAIL
  1270 00492 3103          			JBC		DC			; Check DC = 0?
  1271 00493 5073          			JMP	INS_FAIL
  1272 00494 3A03          			JBS		Z			; Check Z = 1?
  1273 00495 5073          			JMP	INS_FAIL
  1274 00496 3503          			JBC		OV			; Check OV = 0?
  1275 00497 5073          			JMP	INS_FAIL
  1276 00498 3603          			JBC		N			; Check N = 0?
  1277 00499 5073          			JMP	INS_FAIL
  1278 0049A 2203          			BC		Z
  1279 0049B 6C00          			XOR		A,@0x00		; Check Result ?
  1280 0049C 3A03          			JBS		Z			; Check Z = 1?
  1281 0049D 5073          			JMP	INS_FAIL
  1282 0049E 3603          			JBC		N			; Check N = 0?
  1283 0049F 5073          			JMP	INS_FAIL
  1284 004A0 6000          			MOV		A,@0x00
  1285 004A1 0103          			MOV		STATUS,A
  1286 004A2 6055          			MOV		A,@0x55
  1287 004A3 0150          			MOV		0x50,A		; [0x50] = 0x55
  1288 004A4 60AA          			MOV		A,@0xAA
  1289 004A5 2203          			BC		Z
  1290 004A6 0850          			OR		A,0x50		; A = A | [0x50]
  1291 004A7 3003          			JBC		C			; Check C = 0?
  1292 004A8 5073          			JMP	INS_FAIL
  1293 004A9 3103          			JBC		DC			; Check DC = 0?
  1294 004AA 5073          			JMP	INS_FAIL
  1295 004AB 3203          			JBC		Z			; Check Z = 0?
  1296 004AC 5073          			JMP	INS_FAIL
  1297 004AD 3503          			JBC		OV			; Check OV = 0?
  1298 004AE 5073          			JMP	INS_FAIL
  1299 004AF 3E03          			JBS		N			; Check N = 1?
  1300 004B0 5073          			JMP	INS_FAIL
  1301 004B1 2203          			BC		Z
  1302 004B2 6CFF          			XOR		A,@0xFF		; Check Result ?
  1303 004B3 3A03          			JBS		Z			; Check Z = 1?
  1304 004B4 5073          			JMP	INS_FAIL
  1305 004B5 3603          			JBC		N			; Check N = 0?
  1306 004B6 5073          			JMP	INS_FAIL
  1307                     
  1308 004B7               		INST_OR_R_A:		;-------Instruction Test => OR R,A
  1309 004B7 6000          			MOV		A,@0x00
  1310 004B8 0103          			MOV		STATUS,A
  1311 004B9 6000          			MOV		A,@0x00
  1312 004BA 0150          			MOV		0x50,A		; [0x50] = 0x00
  1313 004BB 6000          			MOV		A,@0x00		; A = 0x00
  1314 004BC 2203          			BC		Z
  1315 004BD 0950          			OR		0x50,A		; [0x50] = A | [0x50]
  1316 004BE 1003          			MOV		A,STATUS
  1317 004BF 6C1C          			XOR		A,@0x1C		; Check Status ? for non reset
  1318                     			;;XOR		A,@0x14		; Check Status ?
  1319 004C0 3A03          			JBS		Z			; Check Z = 1?
  1320 004C1 5073          			JMP	INS_FAIL
  1321 004C2 3603          			JBC		N			; Check N = 0?
  1322 004C3 5073          			JMP	INS_FAIL
  1323 004C4 1050          			MOV		A,0x50		; A = Result[0x50]
  1324 004C5 2203          			BC		Z
  1325 004C6 2603          			BC		N
  1326 004C7 6C00          			XOR		A,@0x00		; Check Result ?
  1327 004C8 3A03          			JBS		Z			; Check Z = 1?
  1328 004C9 5073          			JMP	INS_FAIL
  1329 004CA 3603          			JBC		N			; Check N = 0?
  1330 004CB 5073          			JMP	INS_FAIL
  1331 004CC 6000          			MOV		A,@0x00
  1332 004CD 0103          			MOV		STATUS,A
  1333 004CE 6055          			MOV		A,@0x55
  1334 004CF 0150          			MOV		0x50,A		; [0x50] = 0x55
  1335 004D0 60AA          			MOV		A,@0xAA		; A = 0xAA
  1336 004D1 0950          			OR		0x50,A		; [0x50] = 0xAA | 0x55
  1337 004D2 1003          			MOV		A,STATUS
  1338 004D3 6C58          			XOR		A,@0x58		; Check Status ? for non reset
  1339                     			;;XOR		A,@0x50		; Check Status ?
  1340 004D4 3A03          			JBS		Z			; Check Z = 1?
  1341 004D5 5073          			JMP	INS_FAIL
  1342 004D6 3603          			JBC		N			; Check N = 0?
  1343 004D7 5073          			JMP	INS_FAIL
  1344 004D8 1050          			MOV		A,0x50
  1345 004D9 2203          			BC		Z
  1346 004DA 2603          			BC		N
  1347 004DB 6CFF          			XOR		A,@0xFF		; Check Result ?
  1348 004DC 3A03          			JBS		Z			; Check Z = 1?
  1349 004DD 5073          			JMP	INS_FAIL
  1350 004DE 3603          			JBC		N			; Check N = 0?
  1351 004DF 5073          			JMP	INS_FAIL
  1352                     
  1353 004E0               		INST_AND_A_R:		;-------Instruction Test => AND A,R
  1354 004E0 40F4          			CALL	STATUS_CLEAR
  1355 004E1 6055          			MOV		A,@0x55
  1356 004E2 0150          			MOV		0x50,A		; [0x50] = 0x55
  1357 004E3 60AA          			MOV		A,@0xAA
  1358 004E4 0A50          			AND		A,0x50		; A = 0xAA & 0x55
  1359 004E5 3003          			JBC		C			; Check C = 0?
  1360 004E6 5073          			JMP	INS_FAIL
  1361 004E7 3103          			JBC		DC			; Check DC = 0?
  1362 004E8 5073          			JMP	INS_FAIL
  1363 004E9 3A03          			JBS		Z			; Check Z = 1?
  1364 004EA 5073          			JMP	INS_FAIL
  1365 004EB 3503          			JBC		OV			; Check OV = 0?
  1366 004EC 5073          			JMP	INS_FAIL
  1367 004ED 3603          			JBC		N			; Check N = 0?
  1368 004EE 5073          			JMP	INS_FAIL
  1369 004EF 6C00          			XOR		A,@0x00		; Check Result ?
  1370 004F0 3A03          			JBS		Z			; Check Z = 1?
  1371 004F1 5073          			JMP	INS_FAIL
  1372 004F2 3603          			JBC		N			; Check N = 0?
  1373 004F3 5073          			JMP	INS_FAIL
  1374 004F4 40F4          			CALL	STATUS_CLEAR
  1375 004F5 60F5          			MOV		A,@0xF5
  1376 004F6 0150          			MOV		0x50,A		; [0x50] = 0xF5
  1377 004F7 60FA          			MOV		A,@0xFA
  1378 004F8 0A50          			AND		A,0x50		; A = 0xFA & 0xF5
  1379 004F9 3003          			JBC		C			; Check C = 0?
  1380 004FA 5073          			JMP	INS_FAIL
  1381 004FB 3103          			JBC		DC			; Check DC = 0?
  1382 004FC 5073          			JMP	INS_FAIL
  1383 004FD 3203          			JBC		Z			; Check Z = 0?
  1384 004FE 5073          			JMP	INS_FAIL
  1385 004FF 3503          			JBC		OV			; Check OV = 0?
  1386 00500 5073          			JMP	INS_FAIL
  1387 00501 3E03          			JBS		N			; Check N = 1?
  1388 00502 5073          			JMP	INS_FAIL
  1389 00503 6CF0          			XOR		A,@0xF0		; Check Result ?
  1390 00504 3A03          			JBS		Z			; Check Z = 1?
  1391 00505 5073          			JMP	INS_FAIL
  1392 00506 3603          			JBC		N			; Check N = 0?
  1393 00507 5073          			JMP	INS_FAIL
  1394 00508               		INST_AND_R_A:		;-------Instruction Test => AND R,A
  1395 00508 40F4          			CALL	STATUS_CLEAR
  1396 00509 6055          			MOV		A,@0x55
  1397 0050A 0150          			MOV		0x50,A		; [0x50] = 0x55
  1398 0050B 60AA          			MOV		A,@0xAA
  1399 0050C 0B50          			AND		0x50,A		; [0x50] = 0xAA & 0x55
  1400 0050D 1003          			MOV		A,STATUS
  1401 0050E 6C1C          			XOR		A,@0x1C		; Check Status ? for non reset
  1402                     			;;XOR		A,@0x14		; Check Status ?
  1403 0050F 3A03          			JBS		Z			; Check Z = 1?
  1404 00510 5073          			JMP	INS_FAIL
  1405 00511 3603          			JBC		N			; Check N = 0?
  1406 00512 5073          			JMP	INS_FAIL
  1407 00513 2203          			BC		Z
  1408 00514 1050          			MOV		A,0x50
  1409 00515 2203          			BC		Z
  1410 00516 6C00          			XOR		A,@0x00		; Check Result ?
  1411 00517 3A03          			JBS		Z			; Check Z = 1?
  1412 00518 5073          			JMP	INS_FAIL
  1413 00519 3603          			JBC		N			; Check N = 0?
  1414 0051A 5073          			JMP	INS_FAIL
  1415 0051B 40F4          			CALL	STATUS_CLEAR
  1416 0051C 60F5          			MOV		A,@0xF5
  1417 0051D 0150          			MOV		0x50,A		; [0x50] = 0xF5
  1418 0051E 60FA          			MOV		A,@0xFA
  1419 0051F 0B50          			AND		0x50,A		; [0x50] = 0xFA & 0xF5
  1420 00520 1003          			MOV		A,STATUS
  1421 00521 6C58          			XOR		A,@0x58		; Check Status ? for non reset
  1422                     			;;XOR		A,@0x50		; Check Status ?
  1423 00522 3A03          			JBS		Z			; Check Z = 1?
  1424 00523 5073          			JMP	INS_FAIL
  1425 00524 3603          			JBC		N			; Check N = 0?
  1426 00525 5073          			JMP	INS_FAIL
  1427 00526 2203          			BC		Z
  1428 00527 1050          			MOV		A,0x50
  1429 00528 2203          			BC		Z
  1430 00529 6CF0          			XOR		A,@0xF0		; Check Result ?
  1431 0052A 3A03          			JBS		Z			; Check Z = 1?
  1432 0052B 5073          			JMP	INS_FAIL
  1433 0052C 3603          			JBC		N			; Check N = 0?
  1434 0052D 5073          			JMP	INS_FAIL
  1435 0052E               		INST_AND_A_K:		;-------Instruction Test => AND A,k
  1436 0052E 40F4          			CALL	STATUS_CLEAR
  1437 0052F 60AA          			MOV		A,@0xAA
  1438 00530 6855          			AND		A,@0x55		; A = 0xAA & 0x55
  1439 00531 3003          			JBC		C			; Check C = 0?
  1440 00532 5073          			JMP	INS_FAIL
  1441 00533 3103          			JBC		DC			; Check DC = 0?
  1442 00534 5073          			JMP	INS_FAIL
  1443 00535 3A03          			JBS		Z			; Check Z = 1?
  1444 00536 5073          			JMP	INS_FAIL
  1445 00537 3503          			JBC		OV			; Check OV = 0?
  1446 00538 5073          			JMP	INS_FAIL
  1447 00539 3603          			JBC		N			; Check N = 0?
  1448 0053A 5073          			JMP	INS_FAIL
  1449 0053B 6C00          			XOR		A,@0x00		; Check Result ?
  1450 0053C 3A03          			JBS		Z			; Check Z = 1?
  1451 0053D 5073          			JMP	INS_FAIL
  1452 0053E 3603          			JBC		N			; Check N = 0?
  1453 0053F 5073          			JMP	INS_FAIL
  1454 00540 40F4          			CALL	STATUS_CLEAR
  1455 00541 60AA          			MOV		A,@0xAA
  1456 00542 68FF          			AND		A,@0xFF		; A = A & 0xFF
  1457 00543 3003          			JBC		C			; Check C = 0?
  1458 00544 5073          			JMP	INS_FAIL
  1459 00545 3103          			JBC		DC			; Check DC = 0?
  1460 00546 5073          			JMP	INS_FAIL
  1461 00547 3203          			JBC		Z			; Check Z = 0?
  1462 00548 5073          			JMP	INS_FAIL
  1463 00549 3503          			JBC		OV			; Check OV = 0?
  1464 0054A 5073          			JMP	INS_FAIL
  1465 0054B 3E03          			JBS		N			; Check N = 1?
  1466 0054C 5073          			JMP	INS_FAIL
  1467 0054D 6CAA          			XOR		A,@0xAA		; Check Result ?
  1468 0054E 40F7          			CALL	INST_XOR_JUDGE
  1469                     
  1470 0054F               		INST_COMA:			;-------Instruction Test => COMA R
  1471 0054F 40F4          			CALL	STATUS_CLEAR
  1472 00550 60FF          			MOV		A,@0xFF
  1473 00551 0150          			MOV		0x50,A		; [0x50] = 0xFF
  1474 00552 1250          			COMA	0x50		; A = /R
  1475 00553 3003          			JBC		C			; Check C = 0?
  1476 00554 5073          			JMP	INS_FAIL
  1477 00555 3103          			JBC		DC			; Check DC = 0?
  1478 00556 5073          			JMP	INS_FAIL
  1479 00557 3A03          			JBS		Z			; Check Z = 1?
  1480 00558 5073          			JMP	INS_FAIL
  1481 00559 3503          			JBC		OV			; Check OV = 0?
  1482 0055A 5073          			JMP	INS_FAIL
  1483 0055B 3603          			JBC		N			; Check N = 0?
  1484 0055C 5073          			JMP	INS_FAIL
  1485 0055D 6C00          			XOR		A,@0x00		; Check Result ?
  1486 0055E 3A03          			JBS		Z			; Check Z = 1?
  1487 0055F 5073          			JMP	INS_FAIL
  1488 00560 3603          			JBC		N			; Check N = 0?
  1489 00561 5073          			JMP	INS_FAIL	
  1490 00562 40F4          			CALL	STATUS_CLEAR
  1491 00563 6005          			MOV		A,@0x05
  1492 00564 0150          			MOV		0x50,A		; [0x50] = 0x05
  1493 00565 1250          			COMA	0x50		; A = /R
  1494 00566 3003          			JBC		C			; Check C = 0?
  1495 00567 5073          			JMP	INS_FAIL
  1496 00568 3103          			JBC		DC			; Check DC = 0?
  1497 00569 5073          			JMP	INS_FAIL
  1498 0056A 3203          			JBC		Z			; Check Z = 0?
  1499 0056B 5073          			JMP	INS_FAIL
  1500 0056C 3503          			JBC		OV			; Check OV = 0?
  1501 0056D 5073          			JMP	INS_FAIL
  1502 0056E 3E03          			JBS		N			; Check N = 1?
  1503 0056F 5073          			JMP	INS_FAIL
  1504 00570 6CFA          			XOR		A,@0xFA		; Check Result ?
  1505 00571 3A03          			JBS		Z			; Check Z = 1?
  1506 00572 5073          			JMP	INS_FAIL
  1507 00573 3603          			JBC		N			; Check N = 0?
  1508 00574 5073          			JMP	INS_FAIL
  1509 00575               		INST_COM:			;-------Instruction Test => COM R
  1510 00575 40F4          			CALL	STATUS_CLEAR
  1511 00576 60FF          			MOV		A,@0xFF
  1512 00577 0150          			MOV		0x50,A		; [0x50] = 0xFF
  1513 00578 1350          			COM		0x50		; [0x50] = /[0x50]
  1514 00579 1003          			MOV		A,STATUS
  1515 0057A 6C1C          			XOR		A,@0x1C		; Check Status ?
  1516                     			;;XOR		A,@0x14		; Check Status ?
  1517 0057B 3A03          			JBS		Z			; Check Z = 1?
  1518 0057C 5073          			JMP	INS_FAIL
  1519 0057D 3603          			JBC		N			; Check N = 0?
  1520 0057E 5073          			JMP	INS_FAIL
  1521 0057F 2203          			BC		Z
  1522 00580 2603          			BC		N
  1523 00581 1050          			MOV		A,0x50
  1524 00582 6C00          			XOR		A,@0x00		; Check Result ?
  1525 00583 3A03          			JBS		Z			; Check Z = 1?
  1526 00584 5073          			JMP	INS_FAIL
  1527 00585 3603          			JBC		N			; Check N = 0?
  1528 00586 5073          			JMP	INS_FAIL
  1529 00587 40F4          			CALL	STATUS_CLEAR
  1530 00588 6000          			MOV		A,@0x00
  1531 00589 0150          			MOV		0x50,A		; [0x50] = 0xFF
  1532 0058A 1350          			COM		0x50		; [0x50] = /[0x50]
  1533 0058B 1003          			MOV		A,STATUS
  1534 0058C 6C58          			XOR		A,@0x58		; Check Status ?
  1535                     			;;XOR		A,@0x50		; Check Status ?
  1536 0058D 3A03          			JBS		Z			; Check Z = 1?
  1537 0058E 5073          			JMP	INS_FAIL
  1538 0058F 3603          			JBC		N			; Check N = 0?
  1539 00590 5073          			JMP	INS_FAIL
  1540 00591 2203          			BC		Z
  1541 00592 2603          			BC		N
  1542 00593 1050          			MOV		A,0x50
  1543 00594 6CFF          			XOR		A,@0xFF		; Check Result ?
  1544 00595 3A03          			JBS		Z			; Check Z = 1?
  1545 00596 5073          			JMP	INS_FAIL
  1546 00597 3603          			JBC		N			; Check N = 0?
  1547 00598 5073          			JMP	INS_FAIL
  1548 00599               		INST_OR_A_K:		;-------Instruction Test => OR A,k
  1549 00599 40F4          			CALL	STATUS_CLEAR
  1550 0059A 60A5          			MOV		A,@0xA5
  1551 0059B 645A          			OR		A,@0x5A		; A = 0xA5 | 0x5A
  1552 0059C 6CFF          			XOR		A,@0xFF		; Check Result ?
  1553 0059D 40F7          			CALL	INST_XOR_JUDGE
  1554 0059E 0012          		RET
  1555                     
  1556 0059F               	TEST_INST_LOGIC_II:
  1557 0059F               		INST_RR_R:			;-------Instruction Test => RR R
  1558 0059F 40F4          			CALL	STATUS_CLEAR
  1559 005A0 6055          			MOV		A,@0x55
  1560 005A1 0150          			MOV		0x50,A		; [0x50] = 0x55
  1561 005A2 6F50          			RR		0x50		; [0x50] = [0x50] >> 1
  1562 005A3 1003          			MOV		A,STATUS
  1563 005A4 6C58          			XOR		A,@0x58		; Check Status ?
  1564                     			;;XOR		A,@0x50		; Check Status ?
  1565 005A5 40F7          			CALL	INST_XOR_JUDGE
  1566 005A6 1050          			MOV		A,0x50
  1567 005A7 6CAA          			XOR		A,@0xAA		; Check Result ?
  1568 005A8 40F7          			CALL	INST_XOR_JUDGE
  1569                     
  1570 005A9               		INST_RRA_R:			;-------Instruction Test => RRA R
  1571 005A9 40F4          			CALL 	STATUS_CLEAR
  1572 005AA 6055          			MOV		A,@0x55
  1573 005AB 0150          			MOV		0x50,A		; [0x50] = 0x55
  1574 005AC 6E50          			RRA		0x50		; A = [0x50] >> 1
  1575 005AD 3003          			JBC		C			; Check C = 0?
  1576 005AE 5073          			JMP	INS_FAIL
  1577 005AF 3103          			JBC		DC			; Check DC = 0?
  1578 005B0 5073          			JMP	INS_FAIL
  1579 005B1 3203          			JBC		Z			; Check Z = 0?
  1580 005B2 5073          			JMP	INS_FAIL
  1581 005B3 3503          			JBC		OV			; Check OV = 0?
  1582 005B4 5073          			JMP	INS_FAIL
  1583 005B5 3E03          			JBS		N			; Check N = 1?
  1584 005B6 5073          			JMP	INS_FAIL
  1585 005B7 6CAA          			XOR		A,@0xAA		; Check Result ?
  1586 005B8 40F7          			CALL	INST_XOR_JUDGE
  1587                     
  1588 005B9               		INST_RRCA_R:		;-------Instruction Test => RRCA R
  1589 005B9 40F4          			CALL	STATUS_CLEAR
  1590 005BA 2803          			BS		C
  1591 005BB 60AA          			MOV		A,@0xAA
  1592 005BC 0150          			MOV		0x50,A		; [0x50] = 0xAA
  1593 005BD 1850          			RRCA	0x50		; A = [0x50] >> 1
  1594 005BE 3003          			JBC		C			; Check C = 0?
  1595 005BF 5073          			JMP	INS_FAIL
  1596 005C0 3103          			JBC		DC			; Check DC = 0?
  1597 005C1 5073          			JMP	INS_FAIL
  1598 005C2 3203          			JBC		Z			; Check Z = 0?
  1599 005C3 5073          			JMP	INS_FAIL
  1600 005C4 3503          			JBC		OV			; Check OV = 0?
  1601 005C5 5073          			JMP	INS_FAIL
  1602 005C6 3E03          			JBS		N			; Check N = 1?
  1603 005C7 5073          			JMP	INS_FAIL
  1604 005C8 6CD5          			XOR		A,@0xD5		; Check Result ?
  1605 005C9 40F7          			CALL	INST_XOR_JUDGE
  1606 005CA 40F4          			CALL	STATUS_CLEAR
  1607 005CB 6055          			MOV		A,@0x55
  1608 005CC 0150          			MOV		0x50,A		; [0x50] = 0x55
  1609 005CD 1850          			RRCA	0x50		; A = [0x50] >> 1
  1610 005CE 3803          			JBS		C			; Check C = 1?
  1611 005CF 5073          			JMP	INS_FAIL
  1612 005D0 3103          			JBC		DC			; Check DC = 0?
  1613 005D1 5073          			JMP	INS_FAIL
  1614 005D2 3203          			JBC		Z			; Check Z = 0?
  1615 005D3 5073          			JMP	INS_FAIL
  1616 005D4 3503          			JBC		OV			; Check OV = 0?
  1617 005D5 5073          			JMP	INS_FAIL
  1618 005D6 3603          			JBC		N			; Check N = 0?
  1619 005D7 5073          			JMP	INS_FAIL
  1620 005D8 6C2A          			XOR		A,@0x2A		; Check Result ?
  1621 005D9 40F7          			CALL	INST_XOR_JUDGE
  1622 005DA               		INST_RRC_R:			;-------Instruction Test => RRC R
  1623 005DA 40F4          			CALL	STATUS_CLEAR
  1624 005DB 2803          			BS		C
  1625 005DC 60AA          			MOV		A,@0xAA
  1626 005DD 0150          			MOV		0x50,A		; [0x50] = 0xAA
  1627 005DE 2203          			BC		Z
  1628 005DF 1950          			RRC		0x50		; [0x50] = [0x50] >> 1
  1629 005E0 1003          			MOV		A,STATUS
  1630 005E1 6C58          			XOR		A,@0x58		; Check Status ?
  1631                     			;;XOR		A,@0x50		; Check Status ?
  1632 005E2 40F7          			CALL	INST_XOR_JUDGE
  1633 005E3 1050          			MOV		A,0x50
  1634 005E4 6CD5          			XOR		A,@0xD5		; Check Result ?
  1635 005E5 40F7          			CALL	INST_XOR_JUDGE
  1636 005E6 40F4          			CALL	STATUS_CLEAR
  1637 005E7 6055          			MOV		A,@0x55
  1638 005E8 0150          			MOV		0x50,A		; [0x50] = 0x55
  1639 005E9 2203          			BC		Z
  1640 005EA 1950          			RRC		0x50		; [0x50] = [0x50] >> 1
  1641 005EB 1003          			MOV		A,STATUS
  1642 005EC 6C19          			XOR		A,@0x19		; Check Status ?
  1643                     			;;XOR		A,@0x11		; Check Status ?
  1644 005ED 3A03          			JBS		Z			; Check Z = 1?
  1645 005EE 5073          			JMP	INS_FAIL
  1646 005EF 3603          			JBC		N			; Check N = 0?
  1647 005F0 5073          			JMP	INS_FAIL
  1648 005F1 1050          			MOV		A,0x50
  1649 005F2 6C2A          			XOR		A,@0x2A		; Check Result ?
  1650 005F3 40F7          			CALL	INST_XOR_JUDGE
  1651 005F4               		INST_RLCA_R:		;-------Instruction Test => RLCA R
  1652 005F4 40F4          			CALL STATUS_CLEAR
  1653 005F5 2803          			BS		C
  1654 005F6 6055          			MOV		A,@0x55
  1655 005F7 0150          			MOV		0x50,A		; [0x50] = 0x55
  1656 005F8 1A50          			RLCA	0x50		; A = [0x50] << 1
  1657 005F9 3003          			JBC		C			; Check C = 0?
  1658 005FA 5073          			JMP	INS_FAIL
  1659 005FB 3103          			JBC		DC			; Check DC = 0?
  1660 005FC 5073          			JMP	INS_FAIL
  1661 005FD 3203          			JBC		Z			; Check Z = 0?
  1662 005FE 5073          			JMP	INS_FAIL
  1663 005FF 3503          			JBC		OV			; Check OV = 0?
  1664 00600 5073          			JMP	INS_FAIL
  1665 00601 3E03          			JBS		N			; Check N = 1?
  1666 00602 5073          			JMP	INS_FAIL
  1667 00603 6CAB          			XOR		A,@0xAB		; Check Result ?
  1668 00604 40F7          			CALL	INST_XOR_JUDGE
  1669 00605 40F4          			CALL	STATUS_CLEAR
  1670 00606 60AA          			MOV		A,@0xAA
  1671 00607 0150          			MOV		0x50,A		; [0x50] = 0xAA
  1672 00608 1A50          			RLCA	0x50		; A = [0x50] << 1
  1673 00609 3803          			JBS		C			; Check C = 1?
  1674 0060A 5073          			JMP	INS_FAIL
  1675 0060B 3103          			JBC		DC			; Check DC = 0?
  1676 0060C 5073          			JMP	INS_FAIL
  1677 0060D 3203          			JBC		Z			; Check Z = 0?
  1678 0060E 5073          			JMP	INS_FAIL
  1679 0060F 3503          			JBC		OV			; Check OV = 0?
  1680 00610 5073          			JMP	INS_FAIL
  1681 00611 3603          			JBC		N			; Check N = 0?
  1682 00612 5073          			JMP	INS_FAIL
  1683 00613 6C54          			XOR		A,@0x54		; Check Result ?
  1684 00614 40F7          			CALL	INST_XOR_JUDGE
  1685 00615               		INST_RLC_R:			;-------Instruction Test => RLC R
  1686 00615 40F4          			CALL	STATUS_CLEAR
  1687 00616 2803          			BS		C
  1688 00617 6055          			MOV		A,@0x55
  1689 00618 0150          			MOV		0x50,A		; [0x50] = 0x55
  1690 00619 1B50          			RLC		0x50		; [0x50] = [0x50] << 1
  1691 0061A 1003          			MOV		A,STATUS
  1692 0061B 6C58          			XOR		A,@0x58		; Check Status ?
  1693                     			;;XOR		A,@0x50		; Check Status ?
  1694 0061C 40F7          			CALL	INST_XOR_JUDGE
  1695 0061D 1050          			MOV		A,0x50
  1696 0061E 6CAB          			XOR		A,@0xAB		; Check Result ?
  1697 0061F 40F7          			CALL	INST_XOR_JUDGE
  1698 00620 40F4          			CALL	STATUS_CLEAR
  1699 00621 60AA          			MOV		A,@0xAA
  1700 00622 0150          			MOV		0x50,A		; [0x50] = 0xAA
  1701 00623 1B50          			RLC		0x50		; [0x50] = [0x50] << 1
  1702 00624 1003          			MOV		A,STATUS
  1703 00625 6C19          			XOR		A,@0x19		; Check Status ?
  1704                     			;;XOR		A,@0x11		; Check Status ?
  1705 00626 40F7          			CALL	INST_XOR_JUDGE
  1706 00627 1050          			MOV		A,0x50
  1707 00628 6C54          			XOR		A,@0x54		; Check Result ?
  1708 00629 40F7          			CALL	INST_XOR_JUDGE
  1709                     
  1710 0062A               		INST_RLA_A:			;-------Instruction Test => RLA R
  1711 0062A 40F4          			CALL	STATUS_CLEAR
  1712 0062B 605A          			MOV		A,@0x5A
  1713 0062C 0150          			MOV		0x50,A		; [0x50] = 0x5A
  1714 0062D 7250          			RLA		0x50		; A = [0x50] << 1
  1715 0062E 3003          			JBC		C			; Check C = 0?
  1716 0062F 5073          			JMP	INS_FAIL
  1717 00630 3103          			JBC		DC			; Check DC = 0?
  1718 00631 5073          			JMP	INS_FAIL
  1719 00632 3203          			JBC		Z			; Check Z = 0?
  1720 00633 5073          			JMP	INS_FAIL
  1721 00634 3503          			JBC		OV			; Check OV = 0?
  1722 00635 5073          			JMP	INS_FAIL
  1723 00636 3E03          			JBS		N			; Check N = 1?
  1724 00637 5073          			JMP	INS_FAIL
  1725 00638 6CB4          			XOR		A,@0xB4		; Check Result ?
  1726 00639 40F7          			CALL	INST_XOR_JUDGE
  1727                     
  1728 0063A               		INST_RL_R:			;-------Instruction Test => RL R
  1729 0063A 40F4          			CALL	STATUS_CLEAR
  1730 0063B 605A          			MOV		A,@0x5A
  1731 0063C 0150          			MOV		0x50,A		; [0x50] = 0xA5
  1732 0063D 7350          			RL		0x50		; [0x50] = [0x50] << 1
  1733 0063E 1003          			MOV		A,STATUS
  1734 0063F 6C58          			XOR		A,@0x58		; Check Status ?
  1735                     			;;XOR		A,@0x50		; Check Status ?
  1736 00640 3A03          			JBS		Z			; Check Z = 1?
  1737 00641 5073          			JMP	INS_FAIL
  1738 00642 3603          			JBC		N			; Check N = 0?
  1739 00643 5073          			JMP	INS_FAIL
  1740 00644 1050          			MOV		A,0x50
  1741 00645 6CB4          			XOR		A,@0xB4		; Check Result ?
  1742 00646 40F7          			CALL	INST_XOR_JUDGE
  1743 00647               		INST_XCH:			;-------Instruction Test => XCH R
  1744 00647 40F4          			CALL	STATUS_CLEAR
  1745 00648 6055          			MOV		A,@0x55
  1746 00649 0150          			MOV		0x50,A		; [0x50] = 0x55
  1747 0064A 60AA          			MOV		A,@0xAA
  1748 0064B 7150          			XCH		0x50		; [0x50] <-> A
  1749 0064C 6C55          			XOR		A,@0x55		; Check Result ?
  1750 0064D 3A03          			JBS		Z			; Check Z = 1?
  1751 0064E 5073          			JMP	INS_FAIL
  1752 0064F 3603          			JBC		N			; Check N = 0?
  1753 00650 5073          			JMP	INS_FAIL
  1754 00651 1050          			MOV		A,0x50
  1755 00652 6CAA          			XOR		A,@0xAA		; Check Result ?
  1756 00653 40F7          			CALL	INST_XOR_JUDGE
  1757 00654 0012          		RET
  1758 00655               	TEST_INST_TRANSFER:
  1759 00655               		INST_MOV_R_A:		;-------Instruction Test => MOV R,A
  1760 00655 40F4          			CALL	STATUS_CLEAR
  1761 00656 60FF          			MOV		A,@0xFF
  1762 00657 0150          			MOV		0x50,A
  1763 00658 1003          			MOV		A,STATUS
  1764 00659 6C18          			XOR		A,@0x18		;At  OCDS
  1765                     			;XOR		A,@0x98		; Check Status ? ;; For not reset
  1766                     			;;XOR		A,@0x10		; Check Status ?
  1767 0065A 40F7          			CALL	INST_XOR_JUDGE
  1768 0065B 1050          			MOV		A,0x50
  1769 0065C 6CFF          			XOR		A,@0xFF		; Check Result ?
  1770 0065D 40F7          			CALL	INST_XOR_JUDGE
  1771 0065E               		INST_MOV_R_R:		;-------Instruction Test => MOV R,R
  1772 0065E 40F4          			CALL	STATUS_CLEAR
  1773 0065F 6000          			MOV		A,@0x00
  1774 00660 0150          			MOV		0x50,A		; [0x50] = 0x00		
  1775 00661 1150          			MOV		0x50,0x50	; [0x50] = [0x50]
  1776 00662 1003          			MOV		A,STATUS
  1777 00663 6C1C          			XOR		A,@0x1C		; Check Status ?
  1778                     			;;XOR		A,@0x14		; Check Status ?
  1779 00664 3A03          			JBS		Z			; Check Z = 1?
  1780 00665 5073          			JMP	INS_FAIL
  1781 00666 3603          			JBC		N			; Check N = 0?
  1782 00667 5073          			JMP	INS_FAIL
  1783 00668 1050          			MOV		A,0x50
  1784 00669 2203          			BC		Z
  1785 0066A 6C00          			XOR		A,@0x00		; Check Result ?
  1786 0066B 3A03          			JBS		Z			; Check Z = 1?
  1787 0066C 5073          			JMP	INS_FAIL
  1788 0066D 3603          			JBC		N			; Check N = 0?
  1789 0066E 5073          			JMP	INS_FAIL
  1790 0066F 40F4          			CALL	STATUS_CLEAR
  1791 00670 6000          			MOV		A,@0x00
  1792 00671 0150          			MOV		0x50,A		; [0x50] = 0x00		
  1793 00672 1150          			MOV		0x50,0x50	; [0x50] = [0x50]
  1794 00673 2850          			BS		0x50,0
  1795 00674 1050          			MOV		A,0x50
  1796 00675 6C01          			XOR		A,@0x01		; Check Result ?
  1797 00676 40F7          			CALL	INST_XOR_JUDGE
  1798                     
  1799 00677               		INST_SWAPA_R:		;-------Instruction Test => SWAPA R
  1800 00677 40F4          			CALL	STATUS_CLEAR
  1801 00678 605A          			MOV		A,@0x5A
  1802 00679 0150          			MOV		0x50,A		; [0x50] = 0x5A
  1803 0067A 1C50          			SWAPA	0x50
  1804 0067B 6CA5          			XOR		A,@0xA5		; Check Result ?
  1805 0067C 40F7          			CALL	INST_XOR_JUDGE
  1806 0067D               		INST_SWAP_R:		;-------Instruction Test => SWAP R
  1807 0067D 40F4          			CALL	STATUS_CLEAR
  1808 0067E 605A          			MOV		A,@0x5A
  1809 0067F 0150          			MOV		0x50,A		; [0x50] = 0x5A
  1810 00680 1D50          			SWAP	0x50
  1811 00681 1050          			MOV		A,0x50
  1812 00682 6CA5          			XOR		A,@0xA5		; Check Result ?
  1813 00683 40F7          			CALL	INST_XOR_JUDGE
  1814 00684 0012          		RET
  1815                     
  1816 00685               	TEST_INST_MANIPULATION:
  1817 00685               		INST_BS_R:		;-------Instruction Test => BS	R
  1818 00685 40F4          			CALL	STATUS_CLEAR
  1819 00686 7A00          			SBANK	0
  1820 00687 103E          			MOV		A,ADCR1
  1821 00688 0150          			MOV		TMP50,A
  1822 00689 283E          			BS		ADCR1.0
  1823 0068A 1050          			MOV		A,TMP50
  1824 0068B 0C3E          			XOR		A,ADCR1
  1825 0068C 3203          			JBC		Z
  1826 0068D 5073          			JMP		INS_FAIL
  1827 0068E 3603          			JBC		N
  1828 0068F 5073          			JMP		INS_FAIL
  1829 00690 103E          			MOV		A,ADCR1
  1830 00691 0150          			MOV		TMP50,A
  1831 00692 293E          			BS		ADCR1.1
  1832 00693 1050          			MOV		A,TMP50
  1833 00694 0C3E          			XOR		A,ADCR1
  1834 00695 3203          			JBC		Z
  1835 00696 5073          			JMP		INS_FAIL
  1836 00697 3603          			JBC		N
  1837 00698 5073          			JMP		INS_FAIL
  1838 00699               		INST_BC_R:		;-------Instruction Test => BC	R
  1839 00699 103E          			MOV		A,ADCR1
  1840 0069A 0150          			MOV		TMP50,A
  1841 0069B 203E          			BC		ADCR1.0
  1842 0069C 1050          			MOV		A,TMP50
  1843 0069D 0C3E          			XOR		A,ADCR1
  1844 0069E 3203          			JBC		Z
  1845 0069F 5073          			JMP		INS_FAIL
  1846 006A0 3603          			JBC		N
  1847 006A1 5073          			JMP		INS_FAIL
  1848 006A2 103E          			MOV		A,ADCR1
  1849 006A3 0150          			MOV		TMP50,A
  1850 006A4 213E          			BC		ADCR1.1
  1851 006A5 1050          			MOV		A,TMP50
  1852 006A6 0C3E          			XOR		A,ADCR1
  1853 006A7 3203          			JBC		Z
  1854 006A8 5073          			JMP		INS_FAIL
  1855 006A9 3603          			JBC		N
  1856 006AA 5073          			JMP		INS_FAIL
  1857 006AB 0012          		RET
  1858                     
  1859 006AC               	TEST_INST_BRANCH_I:
  1860 006AC               		INST_DJZ_R:			;------- Instruction Test => DJZ R
  1861 006AC 40F4          			CALL	STATUS_CLEAR
  1862 006AD 6001          			MOV		A,@0x01
  1863 006AE 0150          			MOV		0x50,A		; [0x50] = 0x01
  1864 006AF 1750          			DJZ		0x50		; [0x50] = [0x50] - 1,if z,skip
  1865 006B0 5073          			JMP		INS_FAIL
  1866 006B1 1050          			MOV		A,0x50
  1867 006B2 6C00          			XOR		A,@0x00		; Check Result ?
  1868 006B3 40F7          			CALL	INST_XOR_JUDGE	
  1869 006B4 40F4          			CALL	STATUS_CLEAR
  1870 006B5 6002          			MOV		A,@0x02
  1871 006B6 0150          			MOV		0x50,A		; [0x50] = 0x02
  1872 006B7 1750          			DJZ		0x50		; [0x50] = [0x50] - 1,if z,skip
  1873 006B8 56BA          			JMP		$+2
  1874 006B9 5073          			JMP		INS_FAIL
  1875 006BA               		INST_DJZA_R:		;------- Instruction Test => DJZA R
  1876 006BA 40F4          			CALL	STATUS_CLEAR
  1877 006BB 6001          			MOV		A,@0x01
  1878 006BC 0150          			MOV		0x50,A		; [0x50] = 0x01
  1879 006BD 1650          			DJZA	0x50		; A = [0x50] - 0x01,if z,skip
  1880 006BE 5073          			JMP	INS_FAIL
  1881 006BF 6C00          			XOR		A,@0x00		; Check Result ?
  1882 006C0 40F7          			CALL	INST_XOR_JUDGE
  1883 006C1 40F4          			CALL	STATUS_CLEAR
  1884 006C2 6002          			MOV		A,@0x02
  1885 006C3 0150          			MOV		0x50,A		; [0x50] = 0x02
  1886 006C4 1650          			DJZA	0x50		; A = [0x50] - 0x01,if z,skip
  1887 006C5 56C7          			JMP		$+2
  1888 006C6 5073          			JMP	INS_FAIL
  1889 006C7               		INST_JZA_R:			;-------Instruction Test => JZA R
  1890 006C7 40F4          			CALL	STATUS_CLEAR
  1891 006C8 60FF          			MOV		A,@0xFF
  1892 006C9 0150          			MOV		0x50,A
  1893 006CA 1E50          			JZA		0x50		; A = [0x50] + 1,if 0 skip
  1894 006CB 5073          			JMP		INS_FAIL
  1895 006CC 6C00          			XOR		A,@0x00		; Check Result ?
  1896 006CD 40F7          			CALL	INST_XOR_JUDGE
  1897 006CE 40F4          			CALL	STATUS_CLEAR
  1898 006CF 6080          			MOV		A,@0x80
  1899 006D0 0150          			MOV		0x50,A
  1900 006D1 1E50          			JZA		0x50		; A = [0x50] + 1,if 0 skip
  1901 006D2 56D4          			JMP		$+2
  1902 006D3 5073          			JMP		INS_FAIL
  1903 006D4               		INST_JZ_R:			;-------Instruction Test => JZ R
  1904 006D4 40F4          			CALL	STATUS_CLEAR
  1905 006D5 60FF          			MOV		A,@0xFF
  1906 006D6 0150          			MOV		0x50,A		; [0x50] = 0xFF
  1907 006D7 1F50          			JZ		0x50		; [0x50] = [0x50] + 1,if 0 skip
  1908 006D8 5073          			JMP		INS_FAIL
  1909 006D9 1050          			MOV		A,0x50
  1910 006DA 6C00          			XOR		A,@0x00		; Check Result ?
  1911 006DB 40F7          			CALL	INST_XOR_JUDGE
  1912 006DC 40F4          			CALL	STATUS_CLEAR
  1913 006DD 6080          			MOV		A,@0x80
  1914 006DE 0150          			MOV		0x50,A		; [0x50] = 0xFF
  1915 006DF 1F50          			JZ		0x50		; [0x50] = [0x50] + 1,if 0 skip
  1916 006E0 56E2          			JMP		$+2
  1917 006E1 5073          			JMP		INS_FAIL
  1918 006E2 0012          		RET
  1919 006E3               	TEST_INST_BRANCH_II:
  1920 006E3               		INST_JE_R:			;-------Instruction Test => JE R
  1921 006E3 40F4          			CALL	STATUS_CLEAR
  1922 006E4 605A          			MOV		A,@0x5A
  1923 006E5 0150          			MOV		0x50,A		; [0x50] = 0x5A
  1924 006E6 6150          			JE		0x50		; [0x50] = A?
  1925 006E7 5073          			JMP		INS_FAIL
  1926 006E8 605B          			MOV		A,@0x5B
  1927 006E9 0150          			MOV		0x50,A		; [0x50] = 0x5B
  1928 006EA 605C          			MOV		A,@0x5C
  1929 006EB 6150          			JE		0x50		; [0x50] = A(0x5C)?
  1930 006EC 56EE          			JMP		$+2
  1931 006ED 5073          			JMP		INS_FAIL
  1932 006EE               		INST_JGE_R:			;-------Instruction Test => JGE R
  1933 006EE 40F4          			CALL	STATUS_CLEAR
  1934 006EF 607F          			MOV		A,@0x7F
  1935 006F0 0150          			MOV		0x50,A		; [0x50] = 0x7F
  1936 006F1 6000          			MOV		A,@0x00
  1937 006F2 6250          			JGE		0x50		; [0x50] > A ?
  1938 006F3 5073          			JMP		INS_FAIL
  1939 006F4 40F4          			CALL	STATUS_CLEAR
  1940 006F5 60FF          			MOV		A,@0xFF
  1941 006F6 0150          			MOV		0x50,A		; [0x50] = 0xFF
  1942 006F7 6080          			MOV		A,@0x80
  1943 006F8 6250          			JGE		0x50		; [0x50] > A ?
  1944 006F9 5073          			JMP		INS_FAIL
  1945 006FA 40F4          			CALL	STATUS_CLEAR
  1946 006FB 6000          			MOV		A,@0x00
  1947 006FC 0150          			MOV		0x50,A		; [0x50] = 0x00
  1948 006FD 60FF          			MOV		A,@0xFF
  1949 006FE 6250          			JGE		0x50		; [0x50] > A(0xFF) ?x
  1950 006FF 5701          			JMP		$+2
  1951 00700 5073          			JMP		INS_FAIL
  1952                     
  1953 00701               		INST_JLE_R:			;-------Instruction Test => JLE R
  1954 00701 40F4          			CALL	STATUS_CLEAR
  1955 00702 6000          			MOV		A,@0x00
  1956 00703 0150          			MOV		0x50,A		; [0x50] = 0x00
  1957 00704 607F          			MOV		A,@0x7F
  1958 00705 6350          			JLE		0x50		; [0x50] < A ?
  1959 00706 5073          			JMP		INS_FAIL
  1960 00707 6000          			MOV		A,@0x00
  1961 00708 0103          			MOV		STATUS,A
  1962 00709 6080          			MOV		A,@0x80
  1963 0070A 0150          			MOV		0x50,A		; [0x50] = 0x80
  1964 0070B 60FF          			MOV		A,@0xFF
  1965 0070C 6350          			JLE		0x50		; [0x50] < A ?
  1966 0070D 5073          			JMP		INS_FAIL
  1967 0070E 40F4          			CALL	STATUS_CLEAR
  1968 0070F 60FF          			MOV		A,@0xFF
  1969 00710 0150          			MOV		0x50,A		; [0x50] = 0xFF
  1970 00711 6000          			MOV		A,@0x00
  1971 00712 6350          			JLE		0x50		; [0x50] < A(0x00) ?x
  1972 00713 5715          			JMP		$+2
  1973 00714 5073          			JMP		INS_FAIL
  1974 00715               		INST_JE_K:			;-------Instruction Test => JE k
  1975 00715 40F4          			CALL	STATUS_CLEAR
  1976 00716 607F          			MOV		A,@0x7F
  1977 00717 657F          			JE		@0x7F
  1978 00718 5073          			JMP	INS_FAIL
  1979 00719 0012          		RET
  1980 0071A               	TEST_INST_BRANCH_III:
  1981 0071A               		INST_CALL_K:		;-------Instruction Test => CALL k
  1982 0071A 40F4          			CALL	STATUS_CLEAR
  1983 0071B 6003          			MOV		A,@0x03
  1984 0071C 0150          			MOV		0x50,A
  1985 0071D 47D8          			CALL	CALL_Test
  1986 0071E 1050          			MOV		A,0x50
  1987 0071F 6C04          			XOR		A,@0x04
  1988 00720 40F7          			CALL	INST_XOR_JUDGE
  1989                     
  1990 00721               		INST_LCALL_K:		;-------Instruction Test => LCALL k
  1991 00721 40F4          			CALL	STATUS_CLEAR
  1992 00722 6003          			MOV		A,@0x03
  1993 00723 0151          			MOV		0x51,A
  1994 00724 7A80          			LCALL	LCALL_Test
  1994 00725 1000          			LCALL	LCALL_Test
  1995 00726 1051          			MOV		A,0x51
  1996 00727 6C04          			XOR		A,@0x04		; Check Result ?
  1997 00728 40F7          			CALL	INST_XOR_JUDGE
  1998                     
  1999 00729               		INST_RETL_K:		;-------Instruction Test => RETL k
  2000 00729 40F4          			CALL	STATUS_CLEAR
  2001 0072A 6000          			MOV		A,@0x00
  2002 0072B 4EF0          			CALL	INST_RETL_TABLE
  2003 0072C 6CA1          			XOR		A,@0xA1
  2004 0072D 40F7          			CALL	INST_XOR_JUDGE
  2005 0072E 6001          			MOV		A,@0x01
  2006 0072F 4EF0          			CALL	INST_RETL_TABLE
  2007 00730 6CA2          			XOR		A,@0xA2
  2008 00731 40F7          			CALL	INST_XOR_JUDGE
  2009 00732 6002          			MOV		A,@0x02
  2010 00733 4EF0          			CALL	INST_RETL_TABLE
  2011 00734 6CA4          			XOR		A,@0xA4
  2012 00735 40F7          			CALL	INST_XOR_JUDGE
  2013 00736 6003          			MOV		A,@0x03
  2014 00737 4EF0          			CALL	INST_RETL_TABLE
  2015 00738 6CA8          			XOR		A,@0xA8
  2016 00739 40F7          			CALL	INST_XOR_JUDGE
  2017 0073A 0012          		RET
  2018 0073B               	TEST_INST_CONTROL:
  2019 0073B               		INST_ENI:			;-------Instruction Test => ENI , IT?
  2020 0073B 0010          			ENI
  2021 0073C 3F03          			JBS		IT		; Check IT = 1?
  2022 0073D 5073          			JMP	INS_FAIL
  2023 0073E               		INST_DISI:			;-------Instruction Test => DISI , IT?
  2024 0073E 0011          			DISI
  2025 0073F 3703          			JBC		IT		; Check IT = 0?
  2026 00740 5073          			JMP	INS_FAIL
  2027 00741 0012          		RET
  2028                     
  2029 00742               	TEST_SHORT_BRANCH:
  2030                     		;ORG	0x800
  2031 00742 40F4          		CALL	STATUS_CLEAR
  2032 00743 2803          		BS	C
  2033 00744 6903          		SJC		@0x03
  2034 00745 506D          		JMP		JMP_FAIL
  2035 00746 506D          		JMP		JMP_FAIL
  2036 00747 506D          		JMP		JMP_FAIL
  2037 00748 2003          		BC	C
  2038 00749 6A03          		SJNC	bbb		;@0x03
  2039 0074A 506D          		JMP		JMP_FAIL
  2040 0074B 506D          		JMP		JMP_FAIL
  2041 0074C 506D          		JMP		JMP_FAIL
  2042 0074D               		bbb:		
  2043 0074D 2A03          			BS		Z
  2044 0074E 6B03          			SJZ		@0x03
  2045 0074F 506D          			JMP		JMP_FAIL
  2046 00750 506D          			JMP		JMP_FAIL
  2047 00751 506D          			JMP		JMP_FAIL
  2048 00752 0200          			CLRA
  2049 00753 6B03          			SJZ		@0x03
  2050 00754 506D          			JMP		JMP_FAIL
  2051 00755 506D          			JMP		JMP_FAIL
  2052 00756 506D          			JMP		JMP_FAIL
  2053 00757 575F          		JMP		IATEST1		;JMP back Test as below
  2054 00758               		aaa:	
  2055 00758 576C          			JMP	IATEST2		; -9
  2056 00759 506D          			JMP	JMP_FAIL	; -8
  2057 0075A 506D          			JMP	JMP_FAIL	; -7
  2058 0075B 506D          			JMP	JMP_FAIL	; -6
  2059 0075C 506D          			JMP	JMP_FAIL	; -5
  2060 0075D 506D          			JMP	JMP_FAIL	; -4
  2061 0075E 506D          			JMP	JMP_FAIL	; -3
  2062 0075F               		IATEST1:	
  2063 0075F 2803          			BS		C		; -2
  2064 00760 69F7          			SJC		aaa		; -1
  2065 00761 69F7          			SJC		@0xF7	; -1
  2066 00762 506D          			JMP		JMP_FAIL
  2067 00763 506D          			JMP		JMP_FAIL
  2068 00764 506D          			JMP		JMP_FAIL
  2069 00765 5778          			JMP		IATEST3		; -9
  2070 00766 506D          			JMP		JMP_FAIL	; -8
  2071 00767 506D          			JMP		JMP_FAIL	; -7
  2072 00768 506D          			JMP		JMP_FAIL	; -6
  2073 00769 506D          			JMP		JMP_FAIL	; -5
  2074 0076A 506D          			JMP		JMP_FAIL	; -4
  2075 0076B 506D          			JMP		JMP_FAIL	; -3
  2076 0076C               		IATEST2:	
  2077 0076C 2003          			BC		C		; -2
  2078 0076D 6AF7          			SJNC		@0xF7	; -1
  2079 0076E 5789          			JMP		_IPass
  2080 0076F 5789          			JMP		_IPass
  2081 00770 5789          			JMP		_IPass
  2082 00771 5784          			JMP		IATEST4		; -9
  2083 00772 506D          			JMP		JMP_FAIL	; -8
  2084 00773 506D          			JMP		JMP_FAIL	; -7
  2085 00774 506D          			JMP		JMP_FAIL	; -6
  2086 00775 506D          			JMP		JMP_FAIL	; -5
  2087 00776 506D          			JMP		JMP_FAIL	; -4
  2088 00777 506D          			JMP		JMP_FAIL	; -3
  2089 00778               		IATEST3:	
  2090 00778 2A03          			BS		Z		; -2
  2091 00779 6BF7          			SJZ		@0xF7	; -1
  2092 0077A 506D          			JMP		JMP_FAIL
  2093 0077B 506D          			JMP		JMP_FAIL
  2094 0077C 506D          			JMP		JMP_FAIL
  2095                     
  2096 0077D 5789          			JMP		_IPass		; -9
  2097 0077E 506D          			JMP		JMP_FAIL	; -8
  2098 0077F 506D          			JMP		JMP_FAIL	; -7
  2099 00780 506D          			JMP		JMP_FAIL	; -6
  2100 00781 506D          			JMP		JMP_FAIL	; -5
  2101 00782 506D          			JMP		JMP_FAIL	; -4
  2102 00783 506D          			JMP		JMP_FAIL	; -3
  2103 00784               		IATEST4:	
  2104 00784 2203          			BC		Z		; -2
  2105 00785 6DF7          			SJNZ	@0xF7	; -1
  2106 00786 506D          			JMP		JMP_FAIL
  2107 00787 506D          			JMP		JMP_FAIL
  2108 00788 506D          			JMP		JMP_FAIL
  2109 00789               		_IPass:
  2110 00789 0000          				NOP
  2111 0078A 0012          		RET
  2112                     
  2113 0078B               	TEST_READ_ROM:
  2114 0078B               		INST_TBLRD_R:
  2115 0078B 7A01          			SBANK	1
  2116 0078C 60F1          			MOV		A,@0xF1		;ADDR(0x0EF1)
  2117 0078D 0145          			MOV		TBPTL,A
  2118 0078E 600E          			MOV		A,@0x0E
  2119 0078F 0146          			MOV		TBPTH,A
  2120 00790 7A00          			SBANK	0
  2121 00791 6750          			TBRDA	0x50		; [0x50]+ A = [TABPTR] 
  2122 00792 6CA1          			XOR		A,@0xA1
  2123 00793 40F7          			CALL	INST_XOR_JUDGE
  2124 00794 1050          			MOV		A,0x50
  2125 00795 6C70          			XOR		A,@0x70
  2126 00796 40F7          			CALL	INST_XOR_JUDGE
  2127                     
  2128 00797 7A01          			SBANK	1
  2129                     			;MOV		A,@0xF1		;ADDR(0x0EF1)
  2130                     			;MOV		TBPTL,A
  2131                     			;MOV		A,@0x0E
  2132                     			;MOV		TBPTH,A
  2133 00798 1545          			INC		TBPTL		;ADDR(0x0EF2)
  2134 00799 7A00          			SBANK	0
  2135 0079A 6750          			TBRDA	0x50		; [0x50]+ A = [TABPTR] 
  2136 0079B 6CA2          			XOR		A,@0xA2
  2137 0079C 40F7          			CALL	INST_XOR_JUDGE
  2138 0079D 1050          			MOV		A,0x50
  2139 0079E 6C70          			XOR		A,@0x70
  2140 0079F 40F7          			CALL	INST_XOR_JUDGE
  2141 007A0               		INST_TBRD_R:		;-------Instruction Test => TBRD R
  2142 007A0 7A01          			SBANK	1
  2143 007A1 60F3          			MOV		A,@0xF3		;ADDR(0x0EF3)
  2144 007A2 0145          			MOV		TBPTL,A
  2145 007A3 600E          			MOV		A,@0x0E
  2146 007A4 0146          			MOV		TBPTH,A
  2147 007A5 7A00          			SBANK	0
  2148 007A6 7B50          			TBRD	0x50
  2149 007A7 1050          			MOV		A,0x50
  2150 007A8 6CA4          			XOR		A,@0xA4
  2151 007A9 40F7          			CALL	INST_XOR_JUDGE
  2152                     
  2153 007AA 7A01          			SBANK	1
  2154                     			;MOV		A,@0xF3
  2155                     			;MOV		TBPTL,A
  2156                     			;MOV		A,@0x0E
  2157                     			;MOV		TBPTH,A
  2158 007AB 1545          			INC		TBPTL		;ADDR(0x0EF4)
  2159 007AC 7A00          			SBANK	0
  2160 007AD 7B50          			TBRD	0x50
  2161 007AE 1050          			MOV		A,0x50
  2162 007AF 6CA8          			XOR		A,@0xA8
  2163 007B0 40F7          			CALL	INST_XOR_JUDGE
  2164 007B1 0012          		RET
  2165                     
  2166 007B2               	TEST_STACK:
  2167 007B2 7A01          		SBANK	1
  2168 007B3 1047          		MOV		A,STKMON
  2169 007B4 6C01          		XOR		A,@0x01
  2170 007B5 40F7          		CALL	INST_XOR_JUDGE
  2171 007B6 47B8          		CALL	STACK1
  2172 007B7 0012          		RET
  2173 007B8               	STACK1:
  2174 007B8 1047          		MOV		A,STKMON
  2175 007B9 6C02          		XOR		A,@0x02
  2176 007BA 40F7          		CALL	INST_XOR_JUDGE
  2177 007BB 47BD          		CALL	STACK2
  2178 007BC 0012          		RET
  2179 007BD               	STACK2:
  2180 007BD 1047          		MOV		A,STKMON
  2181 007BE 6C03          		XOR		A,@0x03
  2182 007BF 40F7          		CALL	INST_XOR_JUDGE
  2183 007C0 47C2          		CALL	STACK3
  2184 007C1 0012          		RET
  2185 007C2               	STACK3:
  2186 007C2 1047          		MOV		A,STKMON
  2187 007C3 6C04          		XOR		A,@0x04
  2188 007C4 40F7          		CALL	INST_XOR_JUDGE
  2189 007C5 47C7          		CALL	STACK4
  2190 007C6 0012          		RET
  2191 007C7               	STACK4:
  2192 007C7 1047          		MOV		A,STKMON
  2193 007C8 6C05          		XOR		A,@0x05
  2194 007C9 40F7          		CALL	INST_XOR_JUDGE
  2195 007CA 47CC          		CALL	STACK5
  2196 007CB 0012          		RET
  2197 007CC               	STACK5:
  2198 007CC 1047          		MOV		A,STKMON
  2199 007CD 6C06          		XOR		A,@0x06
  2200 007CE 40F7          		CALL	INST_XOR_JUDGE
  2201 007CF 47D1          		CALL	STACK6
  2202 007D0 0012          		RET
  2203 007D1               	STACK6:
  2204 007D1 1047          		MOV		A,STKMON
  2205 007D2 6C07          		XOR		A,@0x07
  2206 007D3 40F7          		CALL	INST_XOR_JUDGE
  2207 007D4 47D6          		CALL	STACK7
  2208 007D5 0012          		RET
  2209 007D6               	STACK7:
  2210 007D6 0000          		NOP
  2211                     		;CALL	INST_XOR_JUDGE ;Sack Over(Shut Down Tst)
  2212 007D7 0012          		RET
  2213                     
  2214 007D8               	CALL_Test:
  2215 007D8 1550          		INC		0x50
  2216 007D9 0012          		RET
  2217                     ;================== EEPROM Test Routine =====================
  2218                     
  2219                     ;================== Return Table ============================
  2220                     ORG	0x0EF0	; ADDR(3824)
  2221 00EF0               	INST_RETL_TABLE:
  2222 00EF0 0F02          		ADD		PCL, A	;BackUp PC to STACK,then SEARCH TABLE By PC
  2223 00EF1 70A1          		RETL	@0xA1
  2224 00EF2 70A2          		RETL	@0xA2
  2225 00EF3 70A4          		RETL	@0xA4
  2226 00EF4 70A8          		RETL	@0xA8
  2227 00EF5 701A          		RETL	@0x1A
  2228 00EF6 702A          		RETL	@0x2A
  2229 00EF7 704A          		RETL	@0x4A
  2230 00EF8 708A          		RETL	@0x8A
  2231                     
  2232                     ;================== RAM Test Routine ========================
  2233                     ORG	0x0F00	; ADDR(3840)
  2234 00F00               	TEST_RAM_BANK_0_5:
  2235 00F00 6080          		MOV		A,@0x80		; Write Start SRAM(0x55)
  2236 00F01 0104          		MOV		RSR,A
  2237 00F02 7A40          		GBANK	0
  2238 00F03 6055          		MOV		A,@0x55
  2239 00F04 0100          		MOV		IAR,A
  2240 00F05 1504          		INC		RSR
  2241 00F06 6000          		MOV		A,@0x00
  2242 00F07 0C04          		XOR		A,RSR		; INC(0x80),UNTIL(0x00)
  2243 00F08 3A03          		JBS		Z
  2244 00F09 5F03          		JMP		$-6
  2245 00F0A 6080          		MOV		A,@0x80		; Read Start SRAM(0x55)
  2246 00F0B 0104          		MOV		RSR,A
  2247 00F0C 7A40          		GBANK	0
  2248 00F0D 6055          		MOV		A,@0x55
  2249 00F0E 0D00          		XOR		IAR,A
  2250 00F0F 3A03          		JBS		Z
  2251 00F10 5070          		JMP		RAM_FAIL
  2252 00F11 1504          		INC		RSR
  2253 00F12 6000          		MOV		A,@0x00
  2254 00F13 0C04          		XOR		A,RSR		; INC(0x80),UNTIL(0x00)
  2255 00F14 3A03          		JBS		Z
  2256 00F15 5F0D          		JMP		$-8
  2257 00F16 0012          		RET
  2258 00F17               	TEST_RAM_BANK_1_A:
  2259 00F17 6080          		MOV		A,@0x80		; Write Start SRAM(0xAA)
  2260 00F18 0104          		MOV		RSR,A
  2261 00F19 7A41          		GBANK	1
  2262 00F1A 60AA          		MOV		A,@0xAA		; SRAM(0xAA)
  2263 00F1B 0100          		MOV		IAR,A
  2264 00F1C 1504          		INC		RSR
  2265 00F1D 6000          		MOV		A,@0x00
  2266 00F1E 0C04          		XOR		A,RSR		; INC(0x80),UNTIL(0x00)
  2267 00F1F 3A03          		JBS		Z
  2268 00F20 5F1A          		JMP		$-6
  2269 00F21 6080          		MOV		A,@0x80
  2270 00F22 0104          		MOV		RSR,A
  2271 00F23 7A41          		GBANK	1
  2272 00F24 60AA          		MOV		A,@0xAA
  2273 00F25 0D00          		XOR		IAR,A
  2274 00F26 3A03          		JBS		Z
  2275 00F27 5070          		JMP		RAM_FAIL
  2276 00F28 1504          		INC		RSR
  2277 00F29 6000          		MOV		A,@0x00
  2278 00F2A 0C04          		XOR		A,RSR		; INC(0x80),UNTIL(0x00)
  2279 00F2B 3A03          		JBS		Z
  2280 00F2C 5F24          		JMP		$-8
  2281 00F2D 0012          		RET
  2282 00F2E               	TEST_RAM_BANK_2_3:
  2283 00F2E 6080          		MOV		A,@0x80		; Write Start SRAM(0x33)
  2284 00F2F 0104          		MOV		RSR,A
  2285 00F30 7A42          		GBANK	2
  2286 00F31 6033          		MOV		A,@0x33		; SRAM(0x33)
  2287 00F32 0100          		MOV		IAR,A
  2288 00F33 1504          		INC		RSR
  2289 00F34 6000          		MOV		A,@0x00
  2290 00F35 0C04          		XOR		A,RSR		; INC(0x80),UNTIL(0x00)
  2291 00F36 3A03          		JBS		Z
  2292 00F37 5F31          		JMP		$-6
  2293 00F38 6080          		MOV		A,@0x80
  2294 00F39 0104          		MOV		RSR,A
  2295 00F3A 7A42          		GBANK	2
  2296 00F3B 6033          		MOV		A,@0x33
  2297 00F3C 0D00          		XOR		IAR,A
  2298 00F3D 3A03          		JBS		Z
  2299 00F3E 5070          		JMP		RAM_FAIL
  2300 00F3F 1504          		INC		RSR
  2301 00F40 6000          		MOV		A,@0x00
  2302 00F41 0C04          		XOR		A,RSR		; INC(0x80),UNTIL(0x00)
  2303 00F42 3A03          		JBS		Z
  2304 00F43 5F3B          		JMP		$-8
  2305 00F44 0012          		RET
  2306 00F45               	TEST_RAM_BANK_3_C:
  2307 00F45 6080          		MOV		A,@0x80		; Write Start SRAM(0xCC)
  2308 00F46 0104          		MOV		RSR,A
  2309 00F47 7A43          		GBANK	3
  2310 00F48 60CC          		MOV		A,@0xCC		; SRAM(0xCC)
  2311 00F49 0100          		MOV		IAR,A
  2312 00F4A 1504          		INC		RSR
  2313 00F4B 6000          		MOV		A,@0x00
  2314 00F4C 0C04          		XOR		A,RSR		; INC(0x80),UNTIL(0x00)
  2315 00F4D 3A03          		JBS		Z
  2316 00F4E 5F48          		JMP		$-6
  2317 00F4F 6080          		MOV		A,@0x80
  2318 00F50 0104          		MOV		RSR,A
  2319 00F51 7A43          		GBANK	3
  2320 00F52 60CC          		MOV		A,@0xCC
  2321 00F53 0D00          		XOR		IAR,A
  2322 00F54 3A03          		JBS		Z
  2323 00F55 5070          		JMP		RAM_FAIL
  2324 00F56 1504          		INC		RSR
  2325 00F57 6000          		MOV		A,@0x00
  2326 00F58 0C04          		XOR		A,RSR		; INC(0x80),UNTIL(0x00)
  2327 00F59 3A03          		JBS		Z
  2328 00F5A 5F52          		JMP		$-8
  2329 00F5B 0012          		RET
  2330                     
  2331                     
  2332                     ;================== Long Sub Routine ========================
  2333                     ORG	0x1000	; >4K
  2334 01000               	LCALL_Test:
  2335 01000 1551          		INC		0x51
  2336 01001 0012          		RET
  0 Error(s), 0 Warning(s), 0 User Message(s)